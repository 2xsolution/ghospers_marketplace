[{"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\index.js":"1","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\App.js":"2","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\reportWebVitals.js":"3","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\Mint.js":"4","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Contact\\Contact.js":"5","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\ConnectWallet\\ConnectWallet.js":"6","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Home\\Home.js":"7","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\NFTDetail\\NFTdetail.js":"8","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\Header.js":"9","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\MultiRangeInput.js":"10","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\core\\web3.js":"11","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\utils\\Utils.js":"12","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\loader\\Loader.js":"13","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\Profile.js":"14","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\IPFSUtils.js":"15","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\updateModal\\UpdateModal.js":"16","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\accordian\\Accordian.js":"17","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\accordian\\AccordianData.js":"18","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\addPropertyModal.js\\AddPropertyModal.js":"19","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\LoaderModal.js":"20"},{"size":747,"mtime":1648646337282,"results":"21","hashOfConfig":"22"},{"size":1938,"mtime":1648643972145,"results":"23","hashOfConfig":"22"},{"size":375,"mtime":1648115103768,"results":"24","hashOfConfig":"22"},{"size":9503,"mtime":1648881240322,"results":"25","hashOfConfig":"22"},{"size":1378,"mtime":1648115103760,"results":"26","hashOfConfig":"22"},{"size":2200,"mtime":1648115103758,"results":"27","hashOfConfig":"22"},{"size":14714,"mtime":1648976566650,"results":"28","hashOfConfig":"22"},{"size":8509,"mtime":1648881217592,"results":"29","hashOfConfig":"22"},{"size":3283,"mtime":1648881254228,"results":"30","hashOfConfig":"22"},{"size":2939,"mtime":1648880453344,"results":"31","hashOfConfig":"22"},{"size":8116,"mtime":1648646337271,"results":"32","hashOfConfig":"22"},{"size":341,"mtime":1648976515013,"results":"33","hashOfConfig":"22"},{"size":238,"mtime":1648133365107,"results":"34","hashOfConfig":"22"},{"size":16374,"mtime":1648976546385,"results":"35","hashOfConfig":"22"},{"size":2034,"mtime":1648210876491,"results":"36","hashOfConfig":"22"},{"size":4905,"mtime":1648806499962,"results":"37","hashOfConfig":"22"},{"size":3536,"mtime":1648638606906,"results":"38","hashOfConfig":"22"},{"size":2113,"mtime":1648453158027,"results":"39","hashOfConfig":"22"},{"size":3630,"mtime":1648881029145,"results":"40","hashOfConfig":"22"},{"size":540,"mtime":1648645430858,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"17edddb",{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"44"},"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\index.js",[],["91","92"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\App.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\reportWebVitals.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\Mint.js",["93","94","95","96","97","98","99","100"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./mint.css\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport IPFSUtils from \"./IPFSUtils\";\r\nimport axios from \"axios\";\r\nimport { BASEURL, Error, Success } from \"../../utils/Utils\";\r\n\r\nimport {\r\n  loadWeb3,\r\n  connectWallet,\r\n  createNFT,\r\n  getCurrentWallet,\r\n} from \"../../core/web3\";\r\nimport Header from \"../../components/Header\";\r\nimport AddPropertyModal from \"./addPropertyModal.js/AddPropertyModal\";\r\nimport LoaderModal from \"./LoaderModal\";\r\nimport { NotificationManager } from \"react-notifications\";\r\n\r\nfunction Mint({ setShowModal }) {\r\n  const fileTypes = [\"JPEG\", \"PNG\", \"GIF\", \"JPG\"];\r\n\r\n  const handleChange = (file) => {\r\n    setImage(file);\r\n  };\r\n\r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [tokenId, setTokenId] = useState(\"xyz\");\r\n  const [showPropertyModal, setShowPropertyModal] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [ipfs, setIpfs] = useState(\"test\");\r\n  const [price, setPrice] = useState(\"\");\r\n  const [currency, setCurrency] = useState(\"ghsp\");\r\n  const [image, setImage] = useState(\"\");\r\n  const [selectedType, setSelectedType] = useState(\"\");\r\n  const [level, setLevel] = useState(\"\");\r\n  const [properties, setProperties] = useState(null);\r\n  // const [traitsArray, setTraitsArray] = useState([\r\n  //   \"tank\",\r\n  //   \"marksman\",\r\n  //   \"assassin\",\r\n  // ]);\r\n\r\n  const [typeArray, setTypeArray] = useState([\r\n    \"common\",\r\n    \"rare\",\r\n    \"epic\",\r\n    \"legendary\",\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const initWeb3 = async () => {\r\n      await loadWeb3();\r\n      await connectWallet();\r\n    };\r\n\r\n    initWeb3();\r\n  }, []);\r\n\r\n  const saveNft = async (e) => {\r\n    setIsLoading(true);\r\n    // NotificationManager.info(\"Please wait for a minutes.\");\r\n    IPFSUtils.uploadFileToIPFS([image]).then((lists) => {\r\n      if (lists.length > 0) {\r\n        const content_uri1 = {\r\n          name: title,\r\n          symbol: title,\r\n          image: lists[0],\r\n          properties: {\r\n            files: [{ uri: \"image.png\", type: \"image/png\" }],\r\n            category: \"image\",\r\n          },\r\n        };\r\n\r\n        IPFSUtils.uploadTextToIPFS(content_uri1).then((path) => {\r\n          try {\r\n            createNFT(path).then((res) => {\r\n              console.log(\r\n                \"********** minted token id ***********\",\r\n                res?.tokenId\r\n              );\r\n              if (res && res.tokenId) {\r\n                var formData = new FormData();\r\n                formData.append(\"title\", title);\r\n                formData.append(\"description\", description);\r\n                formData.append(\"price\", price);\r\n                formData.append(\"nftImage\", image);\r\n                formData.append(\"currency\", currency);\r\n                formData.append(\"walletAddress\", res.wallet);\r\n                formData.append(\"type\", selectedType);\r\n                formData.append(\"tokenId\", res.tokenId);\r\n                formData.append(\"ipfs\", ipfs);\r\n                formData.append(\"properties\", JSON.stringify(properties));\r\n                formData.append(\"level\", level);\r\n\r\n                console.log(...formData);\r\n\r\n                axios\r\n                  .post(BASEURL + \"/nft/save\", formData)\r\n                  .then((response) => {\r\n                    console.log(response);\r\n                    setCurrency(\"ghsp\");\r\n                    setTitle(\"\");\r\n                    setDescription(\"\");\r\n                    setPrice(\"\");\r\n                    setSelectedType(null);\r\n                    setImage(\"\");\r\n                    setProperties(null);\r\n                    setLevel(\"\");\r\n                    setIsLoading(false);\r\n                    NotificationManager.success(\"Nft Created Successfully\");\r\n                    window.location.reload();\r\n                  })\r\n                  .catch((e) => {\r\n                    console.log(e.response.data.message);\r\n                    NotificationManager.error(\"Error Writing to DB\");\r\n                    NotificationManager.error(e.response.data.message);\r\n                    console.log(e);\r\n                    setIsLoading(false);\r\n                    window.location.reload();\r\n                  });\r\n              } else {\r\n                setIsLoading(false);\r\n\r\n                NotificationManager.error(\"Not Created Token ID from contract\");\r\n              }\r\n            });\r\n          } catch (error) {\r\n            setIsLoading(false);\r\n\r\n            NotificationManager.error(\"Transaction Error\");\r\n          }\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const validateFields = () => {\r\n    if (!title || !price || !level) return false;\r\n    return true;\r\n  };\r\n\r\n  const mintNFT = async (event) => {\r\n    // const tokenID = await createNFT(\"\");\r\n    // console.log('minted token ID : ', tokenID);\r\n    // if (tokenID) {\r\n    // \tsetSampleNFTTokenID(tokenID);\r\n    // \tupdateTokenIds();\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header setShowModal={setShowModal} />\r\n      <div className=\"mint-container\">\r\n        {isLoading && <LoaderModal />}\r\n        <div className=\"file-div\">\r\n          <p>PNG, GIF, WEBP, MP4 or MP3. Max 100mb.</p>\r\n          <FileUploader\r\n            multiple={false}\r\n            handleChange={handleChange}\r\n            name=\"nftImage\"\r\n            classes=\"drag-zone\"\r\n            types={fileTypes}\r\n          />\r\n\r\n          {image && (\r\n            <>\r\n              <p className=\"preview-text\">Image Preview</p>\r\n              <img\r\n                className=\"preview-img\"\r\n                src={URL.createObjectURL(image)}\r\n                alt=\"\"\r\n              />\r\n            </>\r\n          )}\r\n        </div>\r\n        <div className=\"inputs-div\">\r\n          <div>\r\n            <label htmlFor=\"\">Title</label>\r\n            <input\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n              type=\"text\"\r\n              className=\"mint-input\"\r\n              placeholder=\"example: gaming art design\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"\">Description (Optional)</label>\r\n            <input\r\n              value={description}\r\n              onChange={(e) => setDescription(e.target.value)}\r\n              type=\"text\"\r\n              className=\"mint-input\"\r\n              placeholder=\"example: gaming art design\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"\">Price</label>\r\n            <div className=\"price-flex\">\r\n              <input\r\n                onKeyDown={(evt) => evt.key === \"e\" && evt.preventDefault()}\r\n                value={price}\r\n                onChange={(e) => {\r\n                  if (e.target.value < 0) {\r\n                    setPrice(0);\r\n                  } else if (e.target.value > 100000000) {\r\n                    setPrice(100000000);\r\n                  } else setPrice(e.target.value);\r\n                }}\r\n                type=\"number\"\r\n                min={0}\r\n                max=\"10\"\r\n                className=\"mint-input\"\r\n                placeholder=\"0.0\"\r\n              />\r\n              <select\r\n                onChange={(e) => setCurrency(e.target.value)}\r\n                value={currency}\r\n              >\r\n                <option selected value=\"ghsp\">\r\n                  GHSP\r\n                </option>\r\n                <option value=\"bnb\">BNB</option>\r\n                <option value=\"busd\">BUSD</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"\">Level</label>\r\n            <input\r\n              value={level}\r\n              max=\"20\"\r\n              min=\"0\"\r\n              onKeyDown={(evt) => evt.key === \"e\" && evt.preventDefault()}\r\n              onChange={(e) => {\r\n                if (e.target.value < 0) {\r\n                  setLevel(0);\r\n                } else if (e.target.value > 20) {\r\n                  setLevel(20);\r\n                } else setLevel(e.target.value);\r\n              }}\r\n              type=\"number\"\r\n              className=\"mint-input\"\r\n              placeholder=\"Level\"\r\n            />\r\n          </div>\r\n          <button onClick={() => setShowPropertyModal(true)}>\r\n            Add Properties\r\n          </button>\r\n          <div className=\"checkbox\">\r\n            <label htmlFor=\"\">Type</label>\r\n            <div className=\"mint-types\">\r\n              {typeArray.map((t) => {\r\n                return (\r\n                  <label key={t} className=\"checkbox-wrap mint-wrap\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={selectedType === t}\r\n                      onChange={() => {\r\n                        if (selectedType === t) {\r\n                          setSelectedType(null);\r\n                        } else setSelectedType(t);\r\n                      }}\r\n                    />\r\n                    <span className=\"checkmark\"></span>\r\n                    {t}\r\n                  </label>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n          <button onClick={saveNft} disabled={!validateFields()}>\r\n            Create Item\r\n          </button>\r\n        </div>\r\n        <AddPropertyModal\r\n          setProperties={setProperties}\r\n          properties={properties}\r\n          showModal={showPropertyModal}\r\n          setShowModal={setShowPropertyModal}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Mint;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Contact\\Contact.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\ConnectWallet\\ConnectWallet.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Home\\Home.js",["101","102","103","104","105","106","107","108","109"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\NFTDetail\\NFTdetail.js",["110","111","112","113","114","115","116","117","118","119"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport Header from \"../../components/Header\";\r\nimport NFTimg from \"../../assets/img/nftimg.png\";\r\nimport coinIcon from \"../../assets/img/coinicon.png\";\r\nimport Icon from \"../../assets/img/icon_stat.png\";\r\nimport SwordIcon from \"../../assets/img/sword.png\";\r\nimport \"./nftdetail.css\";\r\nimport axios from \"axios\";\r\nimport { BASEURL } from \"../../utils/Utils\";\r\nimport {\r\n  loadWeb3,\r\n  connectWallet,\r\n  buyNFTWithBNB,\r\n  buyNFTWithBUSD,\r\n  buyNFTWithGHSP,\r\n} from \"../../core/web3\";\r\n\r\nconst NFTdetail = ({ setShowModal }) => {\r\n  console.log(useParams());\r\n  const [nftDetail, setNftDetail] = useState(null);\r\n  const [walletAddress, setWalletAddress] = useState(\"\");\r\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\r\n  useEffect(() => {\r\n    const initWeb3 = async () => {\r\n      await loadWeb3();\r\n      let addr = await connectWallet();\r\n      setWalletAddress(addr.address);\r\n    };\r\n\r\n    initWeb3();\r\n  }, []);\r\n\r\n  const { nftId, tokenId } = useParams();\r\n  console.log(nftId);\r\n  console.log(tokenId);\r\n  useEffect(() => {\r\n    console.log(nftId);\r\n    loadNftById(nftId);\r\n  }, [nftId]);\r\n\r\n  const loadNftById = async (id) => {\r\n    axios\r\n      .get(`${BASEURL}/nft/${id}`)\r\n      .then((response) => {\r\n        console.log(\"detail data\", response.data.data);\r\n        setNftDetail(response.data.data);\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n\r\n  const buyNFT = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (tokenId) {\r\n      const saleTokenType = 2; // GHSP, BUSD, BNB\r\n      if (saleTokenType === 0) {\r\n        await buyNFTWithGHSP(tokenId);\r\n      } else if (saleTokenType === 1) {\r\n        await buyNFTWithBUSD(tokenId);\r\n      } else {\r\n        await buyNFTWithBNB(tokenId, 0.01);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header setShowModal={setShowModal} />\r\n      {nftDetail ? (\r\n        <section className=\"nft\">\r\n          <div className=\"container\">\r\n            <div className=\"home-btn\">\r\n              <Link to=\"/\">Back to home</Link>\r\n            </div>\r\n            <div className=\"nft-detail-container\">\r\n              <div className=\"nft-img\">\r\n                <img\r\n                  src={nftDetail && `${nftDetail.imageUrl}`}\r\n                  alt=\"nft_image\"\r\n                />\r\n              </div>\r\n              <div className=\"nft-detail\">\r\n                <div className=\"nft-titles\">\r\n                  <div className=\"title\">\r\n                    <h1>{nftDetail && nftDetail.title} </h1>\r\n                    <p>{nftDetail && nftDetail.description} </p>\r\n                  </div>\r\n                  <div className=\"title-right\">\r\n                    <div className=\"head\">\r\n                      <p>Rarity</p>\r\n                      <span>{nftDetail?.type}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <p className=\"view-owner\"> View Owner</p>\r\n\r\n                <div className=\"nft-data\">\r\n                  <ul className=\"tags\">\r\n                    <li>\r\n                      <p\r\n                        onClick={() => setSelectedTabIndex(0)}\r\n                        className={\r\n                          selectedTabIndex === 0 ? \"active-tag\" : \"inactive-tag\"\r\n                        }\r\n                      >\r\n                        P2E Info\r\n                      </p>\r\n                    </li>\r\n                    <li>\r\n                      <p\r\n                        onClick={() => setSelectedTabIndex(1)}\r\n                        className={\r\n                          selectedTabIndex === 1 ? \"active-tag\" : \"inactive-tag\"\r\n                        }\r\n                      >\r\n                        Traits\r\n                      </p>\r\n                    </li>\r\n                  </ul>\r\n\r\n                  {/* <div className=\"nft-reward\">\r\n                  <div className=\"icon\">\r\n                    <img src={coinIcon} alt=\"coinIcon\" />\r\n                  </div>\r\n                  <div className=\"rewards\">\r\n                    <p>Basic Battle Rewards:</p>\r\n                    <div className=\"reward-data\">\r\n                      <div className=\"reward\">\r\n                        <span>Win:</span>\r\n                        <span>+6</span>\r\n                      </div>\r\n                      <div className=\"reward\">\r\n                        <span>Draw:</span>\r\n                        <span>+2</span>\r\n                      </div>\r\n                      <div className=\"reward\">\r\n                        <span>Lose:</span>\r\n                        <span>+1</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div> */}\r\n                  {selectedTabIndex === 1 ? (\r\n                    <div className=\"detail-card-flex\">\r\n                      {nftDetail &&\r\n                        nftDetail.properties.map((property) => {\r\n                          return (\r\n                            <div className=\"detail-card\">\r\n                              <p className=\"type\">{property.type}</p>\r\n                              <p className=\"value\">{property.value}</p>\r\n                              <p className=\"percentage\">\r\n                                {(\r\n                                  (property.valueTotal / property.typeTotal) *\r\n                                  100\r\n                                ).toFixed(1)}\r\n                                % have this trait\r\n                              </p>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                    </div>\r\n                  ) : (\r\n                    <>\r\n                      <div className=\"nft-stats\">\r\n                        <div className=\"stat\">\r\n                          {/* <img src={Icon} alt=\"icon\" /> */}\r\n                          <p>Win Bonus</p>\r\n                        </div>\r\n                        <p>\r\n                          {nftDetail &&\r\n                            (nftDetail.type == \"common\"\r\n                              ? \"0.25\"\r\n                              : nftDetail.type == \"rare\"\r\n                              ? \"0.5\"\r\n                              : nftDetail.type == \"epic\"\r\n                              ? \"0.75\"\r\n                              : \"1.0\")}\r\n                        </p>\r\n                      </div>\r\n                      <div className=\"nft-stats\">\r\n                        <div className=\"stat\">\r\n                          {/* <img src={SwordIcon} alt=\"icon\" /> */}\r\n                          <p>GHSP Battles</p>\r\n                        </div>\r\n                        <p>#/Infinite</p>\r\n                      </div>\r\n                      <div className=\"nft-stats\">\r\n                        <div className=\"stat\">\r\n                          {/* <img src={SwordIcon} alt=\"icon\" /> */}\r\n                          <p>Daily GHSP Battles</p>\r\n                        </div>\r\n                        <p>\r\n                          {nftDetail &&\r\n                            (nftDetail.type == \"common\"\r\n                              ? \"5\"\r\n                              : nftDetail.type == \"rare\"\r\n                              ? \"10\"\r\n                              : nftDetail.type == \"epic\"\r\n                              ? \"15\"\r\n                              : \"20\")}\r\n                        </p>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n                <div className=\"nft-price\">\r\n                  <h1>\r\n                    {nftDetail && nftDetail.price}{\" \"}\r\n                    {nftDetail?.currency?.toUpperCase()}\r\n                  </h1>\r\n                  {/* <p>{nftDetail && nftDetail.price} USD</p> */}\r\n                </div>\r\n                <div className=\"buy-btn\">\r\n                  <a href=\"/\" onClick={buyNFT}>\r\n                    BUY NOW\r\n                  </a>\r\n                </div>\r\n                {nftDetail && walletAddress === nftDetail.walletAddress && (\r\n                  <div className=\"buy-btn\">\r\n                    <a href=\"/\" onClick={buyNFT}>\r\n                      SELL\r\n                    </a>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      ) : (\r\n        <h1 style={{ marginTop: \"40px\", textAlign: \"center\" }}>No NFT found</h1>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NFTdetail;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\Header.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\MultiRangeInput.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\core\\web3.js",["120","121"],"\r\nimport { NotificationManager } from 'react-notifications';\r\nimport Web3 from 'web3';\r\n\r\n// const busdAbi = require('./abi/busd.json');\r\n// const ghospAbi = require('./abi/ghosp.json');\r\nconst marketAbi = require('./abi/marketplace.json');\r\nconst minterAbi = require('./abi/minter.json');\r\n\r\n\r\nconst MINTER_ADDRESS = \"0xfA9bB2B3119A7b9d40235F9e92052AB6Fd6DaD12\"\r\nconst MARKETPLACE_ADDRESS = \"0xC4d193F224Ec31c7BDc959D2D1b9Eb9d16E97A78\"\r\n// const GHOSP_ADDRESS = \"0x91c70ba82a8ed676c5a09ce1cd94cc18923e8371\"\r\n// const BUSD_ADDRESS = \"0x8301f2213c0eed49a7e28ae4c3e91722919b8b47\"   // Faucet Token\r\nlet market_contract = null;\r\nlet minter_contract = null;\r\n//let ghosp_contract = null;\r\n//let busd_contract = null;\r\n\r\nconst NETWORK_ID = 97;\r\n\r\nconst checkConnectedNetwork = (chainId) => {\r\n    if (chainId != NETWORK_ID) {\r\n        NotificationManager.error(\"Please select BSC network\");\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const loadWeb3 = async () => {\r\n    if (window.ethereum) {\r\n        window.web3 = new Web3(window.ethereum);\r\n        window.web3.eth.handleRevert = true;\r\n    } else if (window.web3) {\r\n        window.web3 = new Web3(window.web3.currentProvider);\r\n        window.web3.eth.handleRevert = true\r\n    } else {\r\n        window.alert(\r\n            \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n        );\r\n        return;\r\n    }\r\n\r\n    minter_contract = new window.web3.eth.Contract(minterAbi, MINTER_ADDRESS);\r\n    market_contract = new window.web3.eth.Contract(marketAbi, MARKETPLACE_ADDRESS);\r\n//    ghosp_contract = new window.web3.eth.Contract(ghospAbi, GHOSP_ADDRESS);\r\n//    busd_contract = new window.web3.eth.Contract(busdAbi, BUSD_ADDRESS);\r\n\r\n    window.ethereum.on('chainChanged', function (chainId) {\r\n        checkConnectedNetwork(chainId);\r\n    });\r\n};\r\n\r\n\r\nexport const connectWallet = async () => {\r\n    const chainId = await getConnectedNetworkId();\r\n    if (checkConnectedNetwork(chainId) == false) {\r\n        return  {\r\n            address: \"\",\r\n            status: \"Network connection error\",\r\n            res: 3,\r\n        };\r\n    }\r\n\r\n    if (window.ethereum) {\r\n        try {\r\n            const addressArray = await window.ethereum.request({\r\n                method: \"eth_requestAccounts\",\r\n            });\r\n            const obj = {\r\n                status: \"Metamask successfuly connected.\",\r\n                address: addressArray[0],\r\n            };\r\n            return obj;\r\n        } catch (err) {\r\n            return {\r\n                address: \"\",\r\n                status: \"Something went wrong: \" + err.message,\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        return {\r\n            address: \"\",\r\n            status: (\r\n                <span>\r\n                    <p>\r\n                        {\" \"}\r\n                        🦊{\" \"}\r\n                        <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\r\n                            You must install Metamask, a virtual BSC wallet, in your\r\n                            browser.\r\n                        </a>\r\n                    </p>\r\n                </span>\r\n            ),\r\n        };\r\n    }\r\n};\r\n\r\nexport const getConnectedNetworkId = async () => {\r\n    if (window.web3 && window.web3.eth) {\r\n        return await window.web3.eth.getChainId();\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\nexport const getCurrentWallet = async () => {\r\n    const web3 = window.web3;\r\n    try {\r\n        let accounts = await web3.eth.getAccounts();\r\n        let accountBalance = await web3.eth.getBalance(accounts[0]);\r\n        accountBalance = web3.utils.fromWei(accountBalance);\r\n        return {\r\n            success: true,\r\n            account: accounts[0],\r\n            balance: accountBalance\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            result: \"Something went wrong: \" + error.message\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const buyNFTWithBNB = async (tokenID, amount) => {\r\n\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success===false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        let bnAmount = window.web3.utils.toWei(\"\" + amount);\r\n        await market_contract.methods.buyNFTWithBNB(tokenID, wallet.account).send({ from: wallet.account, value: bnAmount });\r\n    } catch (error) {\r\n        console.log('buyNFTWithBNB error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const buyNFTWithGHSP = async (tokenID) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success===false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        await market_contract.methods.buyNFTWithGHSP(tokenID, wallet.account).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('buyNFTWithGHSP error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const buyNFTWithBUSD = async (tokenID) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success===false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        await market_contract.methods.buyNFTWithBUSD(tokenID, wallet.account).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('buyNFTWithBUSD error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const removeTokenFromSale = async (tokenID) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success===false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        await market_contract.methods.removeTokenFromSale(tokenID, wallet.account).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('removeTokenFromSale error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const putTokenOnSale = async (tokenID, price, saleTokenType) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success===false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        await minter_contract.methods.setApprovalForAll(MARKETPLACE_ADDRESS, true).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('setApprovalForAll error', error);\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        let bnPrice = window.web3.utils.toWei(\"\" + price);\r\n        await market_contract.methods.putTokenOnSale(tokenID, bnPrice, saleTokenType).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('putTokenOnSale error', error);\r\n        return false;\r\n    }\r\n\r\n    console.log('putTokenOnSale ok');\r\n\r\n    return true;\r\n}\r\n\r\nexport const getSaleItems = async (tokenIds) => {\r\n\r\n    let saleItems = {};\r\n    for (let i = 0; i < tokenIds.length; i++) {\r\n        let item = await market_contract.methods.saleItems(tokenIds[i]).call();\r\n        saleItems[tokenIds[i]] = item;\r\n    }\r\n\r\n    console.log(\"Sale Items : \", saleItems);\r\n\r\n    return saleItems;\r\n}\r\n\r\nexport const createNFT = async (tokenURI) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success===false) {\r\n        return null;\r\n    }\r\n\r\n    try {\r\n        let tokenID = 0;\r\n        let tx = await minter_contract.methods.createNFT(tokenURI).send({ from: wallet.account });\r\n        tokenID = tx.events.Transfer.returnValues.tokenId;\r\n        return {tokenId: tokenID, wallet: wallet.account};\r\n    } catch (error) {\r\n        console.log('createNFT error', error);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nexport const getCreator = async (tokenID) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success===false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        await minter_contract.methods.getCreator(tokenID).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('getCreator error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const getTokenIds = async () => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success===false) {\r\n        return [];\r\n    }\r\n\r\n    try {\r\n        let tokenIds = await minter_contract.methods.getTokenIds(wallet.account).call();\r\n        return tokenIds;\r\n    } catch (error) {\r\n        console.log('getTokenIds error', error);\r\n        return [];\r\n    }\r\n}","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\utils\\Utils.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\loader\\Loader.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\Profile.js",["122","123","124","125","126","127","128","129","130","131","132","133"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\IPFSUtils.js",["134"],"import { create, urlSource } from 'ipfs-http-client'\r\nimport axios from 'axios';\r\n//import IPFS from 'nano-ipfs-store'\r\nlet all = require('it-all')\r\n\r\nlet client = create('https://ipfs.infura.io:5001/api/v0');\r\n\r\nconst uploadFileToIPFS = async (files) => {\r\n    console.log(\"enter uploadFileToIPFS\", files);\r\n    let lists = [];\r\n    try {\r\n        for (let i = 0; i < files.length; i++) {\r\n            const added = await client.add(files[i])\r\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n            console.log(\"[GD], FileName = \", files[i].name, \", Hash: \", added.path)\r\n            lists.push(url)\r\n        }\r\n        return lists\r\n    } catch (err) {\r\n        console.log(\"Error uploading file: \", err)\r\n        return []\r\n    }\r\n}\r\n\r\nconst uploadFolderToIPFS = async (files) => {\r\n    try {\r\n        /*let fileObjectsArray = Array.from(files).map((file) => {\r\n            return {\r\n                path: file.name,\r\n                content: file\r\n            }\r\n        })*/\r\n        const results = await all(\r\n            client.addAll(files, { wrapWithDirectory: true })\r\n        )\r\n        const length = results.length\r\n        const filesHash = results[length - 1].cid._baseCache.get('z')\r\n        const filesUrl = 'https://ipfs.infura.io/ipfs/' + filesHash\r\n        return filesUrl\r\n    } catch (err) {\r\n        console.log(\"[GD], Error uploading file: \", err)\r\n        return \"\"\r\n    }\r\n}\r\n\r\nconst uploadTextToIPFS = async (data) => {\r\n    try {\r\n        let doc = JSON.stringify(data)\r\n        const added = await client.add(doc)\r\n        const filesUrl = 'https://ipfs.infura.io/ipfs/' + added.path;\r\n        return filesUrl\r\n    } catch (err) {\r\n        //console.log(\"Error: \", err)\r\n        return null\r\n    }\r\n}\r\n\r\nconst loadFromIPFS = async (url) => {\r\n    let res = await axios.get(`https://ipfs.infura.io/ipfs/${url}`)\r\n    return res;\r\n}\r\n\r\n\r\nconst IPFSUtils = {\r\n    uploadFileToIPFS,\r\n    uploadFolderToIPFS,\r\n    uploadTextToIPFS,\r\n    loadFromIPFS\r\n}\r\n\r\n\r\nexport default IPFSUtils;","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\updateModal\\UpdateModal.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\accordian\\Accordian.js",["135"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./accordian.css\";\r\nfunction Accordian({ title, content, setSingleSelectedProperty }) {\r\n  const [contentArray] = useState(content);\r\n  const [searchInput, setsearchInput] = useState(\"\");\r\n  const [resultsArray, setResultsArray] = useState(contentArray);\r\n  const [showContent, setShowContent] = useState(false);\r\n  const [selectedProperties, setSelectedProperties] = useState({\r\n    type: \"\",\r\n    values: [],\r\n  });\r\n\r\n  const onChange = (e) => {\r\n    setsearchInput(e.target.value);\r\n    if (e.target.value === \"\") {\r\n      setResultsArray(contentArray);\r\n    } else {\r\n      var resultArray = contentArray.filter((text) =>\r\n        text.includes(searchInput.toLowerCase())\r\n      );\r\n      setResultsArray(resultArray);\r\n    }\r\n  };\r\n\r\n  const alreadyPresent = (data) => {\r\n    return selectedProperties && selectedProperties.values.includes(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(selectedProperties);\r\n    setSingleSelectedProperty(selectedProperties);\r\n  }, [selectedProperties]);\r\n\r\n  return (\r\n    <div className=\"accordian-div\">\r\n      <div\r\n        className=\"accordian-header\"\r\n        onClick={() => setShowContent((prev) => !prev)}\r\n      >\r\n        <h4>{title}</h4>\r\n        {showContent ? (\r\n          <i\r\n            class=\"fa-solid fa-caret-up\"\r\n            onClick={() => setShowContent(false)}\r\n          ></i>\r\n        ) : (\r\n          <i\r\n            class=\"fa-solid fa-caret-down\"\r\n            onClick={() => setShowContent(true)}\r\n          ></i>\r\n        )}\r\n      </div>\r\n      <div className=\"accordian-content\">\r\n        {showContent && (\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              className=\"select-search-input\"\r\n              placeholder=\"Search\"\r\n              value={searchInput}\r\n              onChange={onChange}\r\n            />\r\n            <ul>\r\n              <div className=\"checkbox\">\r\n                {resultsArray &&\r\n                  resultsArray.map((data, index) => {\r\n                    return (\r\n                      <label className=\"checkbox-wrap\" key={index}>\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          checked={\r\n                            selectedProperties &&\r\n                            selectedProperties.values.includes(data)\r\n                          }\r\n                          onChange={() => {\r\n                            if (alreadyPresent(data)) {\r\n                              var remainingValues =\r\n                                selectedProperties.values.filter(\r\n                                  (x) => x !== data\r\n                                );\r\n                              setSelectedProperties({\r\n                                type: title,\r\n                                values: remainingValues,\r\n                              });\r\n                            } else {\r\n                              setSelectedProperties((prev) => ({\r\n                                type: title,\r\n                                values: [...prev.values, data],\r\n                              }));\r\n                            }\r\n                          }}\r\n                        />\r\n                        <span className=\"checkmark\"></span>\r\n                        {data}\r\n                      </label>\r\n                    );\r\n                  })}\r\n              </div>\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Accordian;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\accordian\\AccordianData.js",[],["136","137"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\addPropertyModal.js\\AddPropertyModal.js",["138","139","140","141"],"import React, { Component, useEffect, useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport { BASEURL } from \"../../../utils/Utils\";\r\nimport \"./addPropertyModal.css\";\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction AddPropertyModal({\r\n  setShowModal,\r\n  showModal,\r\n  setProperties,\r\n  properties,\r\n}) {\r\n  console.log(showModal);\r\n  function closeModal() {\r\n    setShowModal(false);\r\n  }\r\n\r\n  const [rows, setRows] = useState([\r\n    {\r\n      type: \"\",\r\n      value: \"\",\r\n    },\r\n  ]);\r\n\r\n  const onChange = (e, index) => {\r\n    setRows((prev) =>\r\n      Object.values({\r\n        ...prev,\r\n        [index]: { ...prev[index], [e.target.name]: e.target.value },\r\n      })\r\n    );\r\n  };\r\n\r\n  const removeRow = (index) => {\r\n    console.log(index);\r\n    if (rows.length !== 1) {\r\n      console.log(rows);\r\n      console.log(rows[index]);\r\n      var rowsTemp = [...rows];\r\n      console.log(rowsTemp);\r\n      rowsTemp.splice(index, 1);\r\n      console.log(rowsTemp);\r\n      setRows(rowsTemp);\r\n    }\r\n  };\r\n\r\n  const AddRows = () => {\r\n    var rowsTemp = rows.filter((r) => r.type != \"\" && r.value != \"\");\r\n    setProperties(rowsTemp);\r\n    setShowModal(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(properties);\r\n    if (!properties) {\r\n      setRows([\r\n        {\r\n          type: \"\",\r\n          value: \"\",\r\n        },\r\n      ]);\r\n    }\r\n  }, [properties]);\r\n\r\n  return (\r\n    <div className=\"scrollable-modal\">\r\n      <Modal\r\n        isOpen={showModal}\r\n        shouldCloseOnOverlayClick={false}\r\n        // onAfterOpen={afterOpenModal}\r\n        onRequestClose={closeModal}\r\n        // style={customStyles}\r\n        // className=\"scrollable-modal\"\r\n        contentLabel=\"Example Modal\"\r\n      >\r\n        <div className=\"properties-modal-content\">\r\n          <h2>Add Properties </h2>\r\n          <div className=\"property-rows\">\r\n            {rows &&\r\n              rows.map((row, index) => {\r\n                return (\r\n                  <div key={index} className=\"inputs-div\">\r\n                    <div>\r\n                      <label htmlFor=\"\">Type</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"type\"\r\n                        value={row.type}\r\n                        onChange={(e) => onChange(e, index)}\r\n                        className=\"mint-input\"\r\n                        placeholder=\"Hair\"\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <label htmlFor=\"\">Value</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"value\"\r\n                        value={row.value}\r\n                        onChange={(e) => onChange(e, index)}\r\n                        className=\"mint-input\"\r\n                        placeholder=\"Blonde\"\r\n                      />\r\n                    </div>\r\n                    <button\r\n                      onClick={() => removeRow(index)}\r\n                      className=\"remove-btn\"\r\n                    >\r\n                      Remove\r\n                    </button>\r\n                  </div>\r\n                );\r\n              })}\r\n          </div>\r\n          <button\r\n            className=\"add-btn\"\r\n            onClick={() => {\r\n              setRows((prev) => [\r\n                ...prev,\r\n                {\r\n                  type: \"\",\r\n                  value: \"\",\r\n                },\r\n              ]);\r\n            }}\r\n          >\r\n            Add\r\n          </button>\r\n\r\n          <button onClick={AddRows}>Save</button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddPropertyModal;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\LoaderModal.js",["142","143"],"import React, { Component, useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport Loader from \"../../components/loader/Loader\";\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction LoaderModal() {\r\n  return (\r\n    <div className=\"\">\r\n      <Modal isOpen={true} contentLabel=\"Example Modal\">\r\n        <div style={{ width: \"400px\", margin: \"auto\" }}>\r\n          <h2 style={{ textAlign: \"center\", marginTop: \"40px\" }}>Loading.. </h2>\r\n          <Loader />\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoaderModal;\r\n",{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":6,"column":19,"nodeType":"150","messageId":"151","endLine":6,"endColumn":24},{"ruleId":"148","severity":1,"message":"152","line":6,"column":26,"nodeType":"150","messageId":"151","endLine":6,"endColumn":33},{"ruleId":"148","severity":1,"message":"153","line":12,"column":3,"nodeType":"150","messageId":"151","endLine":12,"endColumn":19},{"ruleId":"148","severity":1,"message":"154","line":28,"column":10,"nodeType":"150","messageId":"151","endLine":28,"endColumn":17},{"ruleId":"148","severity":1,"message":"155","line":28,"column":19,"nodeType":"150","messageId":"151","endLine":28,"endColumn":29},{"ruleId":"148","severity":1,"message":"156","line":31,"column":16,"nodeType":"150","messageId":"151","endLine":31,"endColumn":23},{"ruleId":"148","severity":1,"message":"157","line":44,"column":21,"nodeType":"150","messageId":"151","endLine":44,"endColumn":33},{"ruleId":"148","severity":1,"message":"158","line":143,"column":9,"nodeType":"150","messageId":"151","endLine":143,"endColumn":16},{"ruleId":"148","severity":1,"message":"159","line":82,"column":16,"nodeType":"150","messageId":"151","endLine":82,"endColumn":23},{"ruleId":"160","severity":1,"message":"161","line":122,"column":6,"nodeType":"162","endLine":122,"endColumn":30,"suggestions":"163"},{"ruleId":"148","severity":1,"message":"164","line":124,"column":9,"nodeType":"150","messageId":"151","endLine":124,"endColumn":23},{"ruleId":"148","severity":1,"message":"158","line":156,"column":9,"nodeType":"150","messageId":"151","endLine":156,"endColumn":16},{"ruleId":"160","severity":1,"message":"165","line":163,"column":6,"nodeType":"162","endLine":173,"endColumn":4,"suggestions":"166"},{"ruleId":"167","severity":1,"message":"168","line":343,"column":68,"nodeType":"169","messageId":"170","endLine":343,"endColumn":70},{"ruleId":"167","severity":1,"message":"171","line":398,"column":38,"nodeType":"169","messageId":"170","endLine":398,"endColumn":40},{"ruleId":"172","severity":1,"message":"173","line":404,"column":27,"nodeType":"174","endLine":404,"endColumn":30},{"ruleId":"172","severity":1,"message":"173","line":426,"column":27,"nodeType":"174","endLine":426,"endColumn":30},{"ruleId":"148","severity":1,"message":"175","line":4,"column":8,"nodeType":"150","messageId":"151","endLine":4,"endColumn":14},{"ruleId":"148","severity":1,"message":"176","line":5,"column":8,"nodeType":"150","messageId":"151","endLine":5,"endColumn":16},{"ruleId":"148","severity":1,"message":"177","line":6,"column":8,"nodeType":"150","messageId":"151","endLine":6,"endColumn":12},{"ruleId":"148","severity":1,"message":"178","line":7,"column":8,"nodeType":"150","messageId":"151","endLine":7,"endColumn":17},{"ruleId":"167","severity":1,"message":"168","line":172,"column":45,"nodeType":"169","messageId":"170","endLine":172,"endColumn":47},{"ruleId":"167","severity":1,"message":"168","line":174,"column":48,"nodeType":"169","messageId":"170","endLine":174,"endColumn":50},{"ruleId":"167","severity":1,"message":"168","line":176,"column":48,"nodeType":"169","messageId":"170","endLine":176,"endColumn":50},{"ruleId":"167","severity":1,"message":"168","line":195,"column":45,"nodeType":"169","messageId":"170","endLine":195,"endColumn":47},{"ruleId":"167","severity":1,"message":"168","line":197,"column":48,"nodeType":"169","messageId":"170","endLine":197,"endColumn":50},{"ruleId":"167","severity":1,"message":"168","line":199,"column":48,"nodeType":"169","messageId":"170","endLine":199,"endColumn":50},{"ruleId":"167","severity":1,"message":"171","line":23,"column":17,"nodeType":"169","messageId":"170","endLine":23,"endColumn":19},{"ruleId":"167","severity":1,"message":"168","line":58,"column":40,"nodeType":"169","messageId":"170","endLine":58,"endColumn":42},{"ruleId":"148","severity":1,"message":"179","line":9,"column":8,"nodeType":"150","messageId":"151","endLine":9,"endColumn":18},{"ruleId":"148","severity":1,"message":"157","line":17,"column":21,"nodeType":"150","messageId":"151","endLine":17,"endColumn":33},{"ruleId":"148","severity":1,"message":"180","line":69,"column":10,"nodeType":"150","messageId":"151","endLine":69,"endColumn":18},{"ruleId":"148","severity":1,"message":"181","line":69,"column":20,"nodeType":"150","messageId":"151","endLine":69,"endColumn":31},{"ruleId":"148","severity":1,"message":"182","line":70,"column":21,"nodeType":"150","messageId":"151","endLine":70,"endColumn":33},{"ruleId":"148","severity":1,"message":"183","line":72,"column":16,"nodeType":"150","messageId":"151","endLine":72,"endColumn":23},{"ruleId":"148","severity":1,"message":"159","line":73,"column":16,"nodeType":"150","messageId":"151","endLine":73,"endColumn":23},{"ruleId":"160","severity":1,"message":"165","line":94,"column":6,"nodeType":"162","endLine":105,"endColumn":4,"suggestions":"184"},{"ruleId":"160","severity":1,"message":"161","line":132,"column":6,"nodeType":"162","endLine":132,"endColumn":30,"suggestions":"185"},{"ruleId":"160","severity":1,"message":"186","line":137,"column":6,"nodeType":"162","endLine":137,"endColumn":21,"suggestions":"187"},{"ruleId":"188","severity":1,"message":"189","line":216,"column":21,"nodeType":"174","messageId":"190","endLine":219,"endColumn":22,"fix":"191"},{"ruleId":"188","severity":1,"message":"189","line":224,"column":21,"nodeType":"174","messageId":"190","endLine":227,"endColumn":22,"fix":"192"},{"ruleId":"148","severity":1,"message":"193","line":1,"column":18,"nodeType":"150","messageId":"151","endLine":1,"endColumn":27},{"ruleId":"160","severity":1,"message":"194","line":32,"column":6,"nodeType":"162","endLine":32,"endColumn":26,"suggestions":"195"},{"ruleId":"144","replacedBy":"196"},{"ruleId":"146","replacedBy":"197"},{"ruleId":"148","severity":1,"message":"198","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":26},{"ruleId":"148","severity":1,"message":"199","line":3,"column":10,"nodeType":"150","messageId":"151","endLine":3,"endColumn":17},{"ruleId":"167","severity":1,"message":"171","line":48,"column":46,"nodeType":"169","messageId":"170","endLine":48,"endColumn":48},{"ruleId":"167","severity":1,"message":"171","line":48,"column":63,"nodeType":"169","messageId":"170","endLine":48,"endColumn":65},{"ruleId":"148","severity":1,"message":"198","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":26},{"ruleId":"148","severity":1,"message":"200","line":1,"column":28,"nodeType":"150","messageId":"151","endLine":1,"endColumn":36},"no-native-reassign",["201"],"no-negated-in-lhs",["202"],"no-unused-vars","'Error' is defined but never used.","Identifier","unusedVar","'Success' is defined but never used.","'getCurrentWallet' is defined but never used.","'tokenId' is assigned a value but never used.","'setTokenId' is assigned a value but never used.","'setIpfs' is assigned a value but never used.","'setTypeArray' is assigned a value but never used.","'mintNFT' is assigned a value but never used.","'setSize' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selectedProperties'. Either include it or remove the dependency array.","ArrayExpression",["203"],"'updateTokenIds' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadNfts'. Either include it or remove the dependency array.",["204"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'NFTimg' is defined but never used.","'coinIcon' is defined but never used.","'Icon' is defined but never used.","'SwordIcon' is defined but never used.","'ProfileImg' is defined but never used.","'tokenIds' is assigned a value but never used.","'setTokenIds' is assigned a value but never used.","'setSaleItems' is assigned a value but never used.","'setPage' is assigned a value but never used.",["205"],["206"],"React Hook useEffect has a missing dependency: 'loadUserDetails'. Either include it or remove the dependency array.",["207"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"208","text":"209"},{"range":"210","text":"209"},"'urlSource' is defined but never used.","React Hook useEffect has a missing dependency: 'setSingleSelectedProperty'. Either include it or remove the dependency array. If 'setSingleSelectedProperty' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["211"],["201"],["202"],"'Component' is defined but never used.","'BASEURL' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},{"desc":"212","fix":"218"},{"desc":"219","fix":"220"},[6552,6552]," rel=\"noreferrer\"",[6887,6887],{"desc":"221","fix":"222"},"Update the dependencies array to be: [selectedProperties, singleSelectedProperty]",{"range":"223","text":"224"},"Update the dependencies array to be: [min, max, page, size, minlevel, currency, selectedType, maxlevel, selectedProperties, loadNfts]",{"range":"225","text":"226"},"Update the dependencies array to be: [min, max, page, size, minlevel, currency, selectedType, maxlevel, walletAddress, selectedProperties, loadNfts]",{"range":"227","text":"228"},{"range":"229","text":"224"},"Update the dependencies array to be: [loadUserDetails, walletAddress]",{"range":"230","text":"231"},"Update the dependencies array to be: [selectedProperties, setSingleSelectedProperty]",{"range":"232","text":"233"},[3779,3803],"[selectedProperties, singleSelectedProperty]",[4683,4820],"[min, max, page, size, minlevel, currency, selectedType, maxlevel, selectedProperties, loadNfts]",[3009,3166],"[min, max, page, size, minlevel, currency, selectedType, maxlevel, walletAddress, selectedProperties, loadNfts]",[3903,3927],[4006,4021],"[loadUserDetails, walletAddress]",[1038,1058],"[selectedProperties, setSingleSelectedProperty]"]
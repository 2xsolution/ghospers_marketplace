[{"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\index.js":"1","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\App.js":"2","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\reportWebVitals.js":"3","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\Mint.js":"4","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Contact\\Contact.js":"5","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\ConnectWallet\\ConnectWallet.js":"6","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Home\\Home.js":"7","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\NFTDetail\\NFTdetail.js":"8","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\Header.js":"9","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\MultiRangeInput.js":"10","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\core\\web3.js":"11","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\utils\\Utils.js":"12","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\loader\\Loader.js":"13","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\Profile.js":"14","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\IPFSUtils.js":"15","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\updateModal\\UpdateModal.js":"16","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\accordian\\Accordian.js":"17","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\accordian\\AccordianData.js":"18","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\addPropertyModal.js\\AddPropertyModal.js":"19","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\index.js":"20","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\App.js":"21","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\reportWebVitals.js":"22","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\pages\\NFTDetail\\NFTdetail.js":"23","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\pages\\mint\\Mint.js":"24","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\pages\\Home\\Home.js":"25","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\pages\\profile\\Profile.js":"26","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\pages\\Contact\\Contact.js":"27","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\pages\\ConnectWallet\\ConnectWallet.js":"28","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\pages\\mint\\IPFSUtils.js":"29","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\utils\\Utils.js":"30","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\components\\Header.js":"31","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\pages\\mint\\addPropertyModal.js\\AddPropertyModal.js":"32","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\components\\MultiRangeInput.js":"33","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\components\\loader\\Loader.js":"34","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\components\\accordian\\Accordian.js":"35","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\pages\\profile\\updateModal\\UpdateModal.js":"36","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\core\\web3.js":"37","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\pages\\mint\\LoaderModal.js":"38"},{"size":603,"mtime":1648115103756,"results":"39","hashOfConfig":"40"},{"size":1283,"mtime":1648298273159,"results":"41","hashOfConfig":"40"},{"size":375,"mtime":1648115103768,"results":"42","hashOfConfig":"40"},{"size":10137,"mtime":1648579874531,"results":"43","hashOfConfig":"40"},{"size":1378,"mtime":1648115103760,"results":"44","hashOfConfig":"40"},{"size":2200,"mtime":1648115103758,"results":"45","hashOfConfig":"40"},{"size":15616,"mtime":1648579972178,"results":"46","hashOfConfig":"40"},{"size":7032,"mtime":1648579874644,"results":"47","hashOfConfig":"40"},{"size":2470,"mtime":1648579874510,"results":"48","hashOfConfig":"40"},{"size":2694,"mtime":1648115103748,"results":"49","hashOfConfig":"40"},{"size":7436,"mtime":1648579874526,"results":"50","hashOfConfig":"40"},{"size":177,"mtime":1648578452876,"results":"51","hashOfConfig":"40"},{"size":238,"mtime":1648133365107,"results":"52","hashOfConfig":"40"},{"size":12284,"mtime":1648579874615,"results":"53","hashOfConfig":"40"},{"size":2034,"mtime":1648210876491,"results":"54","hashOfConfig":"40"},{"size":3636,"mtime":1648579874542,"results":"55","hashOfConfig":"40"},{"size":3460,"mtime":1648579874512,"results":"56","hashOfConfig":"40"},{"size":2113,"mtime":1648453158027,"results":"57","hashOfConfig":"40"},{"size":3047,"mtime":1648579874540,"results":"58","hashOfConfig":"40"},{"size":747,"mtime":1648590110696,"results":"59","hashOfConfig":"60"},{"size":1938,"mtime":1648974508125,"results":"61","hashOfConfig":"60"},{"size":375,"mtime":1647857396230,"results":"62","hashOfConfig":"60"},{"size":10167,"mtime":1649036767167,"results":"63","hashOfConfig":"60"},{"size":9503,"mtime":1648974508131,"results":"64","hashOfConfig":"60"},{"size":14783,"mtime":1649019737215,"results":"65","hashOfConfig":"60"},{"size":16374,"mtime":1648974508133,"results":"66","hashOfConfig":"60"},{"size":1378,"mtime":1647857396228,"results":"67","hashOfConfig":"60"},{"size":2200,"mtime":1647857396227,"results":"68","hashOfConfig":"60"},{"size":2034,"mtime":1647894973122,"results":"69","hashOfConfig":"60"},{"size":341,"mtime":1648974508135,"results":"70","hashOfConfig":"60"},{"size":3367,"mtime":1649019737212,"results":"71","hashOfConfig":"60"},{"size":3630,"mtime":1648974508131,"results":"72","hashOfConfig":"60"},{"size":2939,"mtime":1648974508126,"results":"73","hashOfConfig":"60"},{"size":238,"mtime":1648149926008,"results":"74","hashOfConfig":"60"},{"size":3536,"mtime":1648974508127,"results":"75","hashOfConfig":"60"},{"size":4905,"mtime":1648974508134,"results":"76","hashOfConfig":"60"},{"size":8337,"mtime":1649036072139,"results":"77","hashOfConfig":"60"},{"size":540,"mtime":1648974508130,"results":"78","hashOfConfig":"60"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},"17edddb",{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"81"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"81"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},"10z5on5",{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"122"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"122"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":2,"source":"138","usedDeprecatedRules":"122"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"122"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"122"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"122"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"122"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"122"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"122"},"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\index.js",[],["168","169"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\App.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\reportWebVitals.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\Mint.js",["170","171","172","173","174","175","176"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Contact\\Contact.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\ConnectWallet\\ConnectWallet.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Home\\Home.js",["177","178","179","180","181","182","183","184","185","186"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\NFTDetail\\NFTdetail.js",["187","188","189","190"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\Header.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\MultiRangeInput.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\core\\web3.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\utils\\Utils.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\loader\\Loader.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\Profile.js",["191","192","193","194","195","196","197","198","199","200","201","202","203"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\IPFSUtils.js",["204"],"import { create, urlSource } from 'ipfs-http-client'\r\nimport axios from 'axios';\r\n//import IPFS from 'nano-ipfs-store'\r\nlet all = require('it-all')\r\n\r\nlet client = create('https://ipfs.infura.io:5001/api/v0');\r\n\r\nconst uploadFileToIPFS = async (files) => {\r\n    console.log(\"enter uploadFileToIPFS\", files);\r\n    let lists = [];\r\n    try {\r\n        for (let i = 0; i < files.length; i++) {\r\n            const added = await client.add(files[i])\r\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n            console.log(\"[GD], FileName = \", files[i].name, \", Hash: \", added.path)\r\n            lists.push(url)\r\n        }\r\n        return lists\r\n    } catch (err) {\r\n        console.log(\"Error uploading file: \", err)\r\n        return []\r\n    }\r\n}\r\n\r\nconst uploadFolderToIPFS = async (files) => {\r\n    try {\r\n        /*let fileObjectsArray = Array.from(files).map((file) => {\r\n            return {\r\n                path: file.name,\r\n                content: file\r\n            }\r\n        })*/\r\n        const results = await all(\r\n            client.addAll(files, { wrapWithDirectory: true })\r\n        )\r\n        const length = results.length\r\n        const filesHash = results[length - 1].cid._baseCache.get('z')\r\n        const filesUrl = 'https://ipfs.infura.io/ipfs/' + filesHash\r\n        return filesUrl\r\n    } catch (err) {\r\n        console.log(\"[GD], Error uploading file: \", err)\r\n        return \"\"\r\n    }\r\n}\r\n\r\nconst uploadTextToIPFS = async (data) => {\r\n    try {\r\n        let doc = JSON.stringify(data)\r\n        const added = await client.add(doc)\r\n        const filesUrl = 'https://ipfs.infura.io/ipfs/' + added.path;\r\n        return filesUrl\r\n    } catch (err) {\r\n        //console.log(\"Error: \", err)\r\n        return null\r\n    }\r\n}\r\n\r\nconst loadFromIPFS = async (url) => {\r\n    let res = await axios.get(`https://ipfs.infura.io/ipfs/${url}`)\r\n    return res;\r\n}\r\n\r\n\r\nconst IPFSUtils = {\r\n    uploadFileToIPFS,\r\n    uploadFolderToIPFS,\r\n    uploadTextToIPFS,\r\n    loadFromIPFS\r\n}\r\n\r\n\r\nexport default IPFSUtils;","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\updateModal\\UpdateModal.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\accordian\\Accordian.js",["205","206","207","208"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./accordian.css\";\r\nfunction Accordian({ title, content, setSingleSelectedProperty }) {\r\n  const [contentArray, setContentArray] = useState(content);\r\n  const [searchInput, setsearchInput] = useState(\"\");\r\n  const [resultsArray, setResultsArray] = useState(contentArray);\r\n  const [showContent, setShowContent] = useState(false);\r\n  const [selectedProperties, setSelectedProperties] = useState({\r\n    type: \"\",\r\n    values: [],\r\n  });\r\n\r\n  const onChange = (e) => {\r\n    setsearchInput(e.target.value);\r\n    if (e.target.value == \"\") {\r\n      setResultsArray(contentArray);\r\n    } else {\r\n      var resultArray = contentArray.filter((text) =>\r\n        text.includes(searchInput.toLowerCase())\r\n      );\r\n      setResultsArray(resultArray);\r\n    }\r\n  };\r\n\r\n  const alreadyPresent = (data) => {\r\n    return selectedProperties && selectedProperties.values.includes(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(selectedProperties);\r\n    setSingleSelectedProperty(selectedProperties);\r\n  }, [selectedProperties]);\r\n\r\n  return (\r\n    <div className=\"accordian-div\">\r\n      <div className=\"accordian-header\">\r\n        <h4>{title}</h4>\r\n        {showContent ? (\r\n          <i\r\n            class=\"fa-solid fa-caret-up\"\r\n            onClick={() => setShowContent(false)}\r\n          ></i>\r\n        ) : (\r\n          <i\r\n            class=\"fa-solid fa-caret-down\"\r\n            onClick={() => setShowContent(true)}\r\n          ></i>\r\n        )}\r\n      </div>\r\n      <div className=\"accordian-content\">\r\n        {showContent && (\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              className=\"select-search-input\"\r\n              placeholder=\"Search\"\r\n              value={searchInput}\r\n              onChange={onChange}\r\n            />\r\n            <ul>\r\n              <div className=\"checkbox\">\r\n                {resultsArray &&\r\n                  resultsArray.map((data, index) => {\r\n                    return (\r\n                      <label className=\"checkbox-wrap\" key={index}>\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          checked={\r\n                            selectedProperties &&\r\n                            selectedProperties.values.includes(data)\r\n                          }\r\n                          onChange={() => {\r\n                            if (alreadyPresent(data)) {\r\n                              var remainingValues =\r\n                                selectedProperties.values.filter(\r\n                                  (x) => x != data\r\n                                );\r\n                              setSelectedProperties({\r\n                                type: title,\r\n                                values: remainingValues,\r\n                              });\r\n                            } else {\r\n                              setSelectedProperties((prev) => ({\r\n                                type: title,\r\n                                values: [...prev.values, data],\r\n                              }));\r\n                            }\r\n                          }}\r\n                        />\r\n                        <span className=\"checkmark\"></span>\r\n                        {data}\r\n                      </label>\r\n                    );\r\n                  })}\r\n              </div>\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Accordian;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\accordian\\AccordianData.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\addPropertyModal.js\\AddPropertyModal.js",["209","210"],"D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\index.js",[],["211","212"],"D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\App.js",[],"D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\reportWebVitals.js",[],"D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\pages\\NFTDetail\\NFTdetail.js",["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport Header from \"../../components/Header\";\r\nimport NFTimg from \"../../assets/img/nftimg.png\";\r\nimport coinIcon from \"../../assets/img/coinicon.png\";\r\nimport Icon from \"../../assets/img/icon_stat.png\";\r\nimport Loader from \"../../components/loader/Loader\";\r\nimport SwordIcon from \"../../assets/img/sword.png\";\r\nimport \"./nftdetail.css\";\r\nimport axios from \"axios\";\r\nimport { BASEURL } from \"../../utils/Utils\";\r\nimport {\r\n  loadWeb3,\r\n  connectWallet,\r\n  getCurrentWallet,\r\n  buyNFTWithBNB,\r\n  buyNFTWithBUSD,\r\n  buyNFTWithGHSP,\r\n  putTokenOnSale,\r\n} from \"../../core/web3\";\r\n\r\nconst NFTdetail = ({ setShowModal }) => {\r\n  const [nftDetail, setNftDetail] = useState(null);\r\n  const [walletAddress, setWalletAddress] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const initWeb3 = async () => {\r\n      await loadWeb3();\r\n      let addr = await connectWallet();\r\n      setWalletAddress(addr.address);\r\n    };\r\n\r\n    initWeb3();\r\n  }, []);\r\n\r\n  const { nftId, tokenId } = useParams();\r\n  // console.log(nftId);\r\n  // console.log(tokenId);\r\n  useEffect(() => {\r\n    // console.log(nftId);\r\n    loadNftById(nftId);\r\n  }, [nftId]);\r\n\r\n  const loadNftById = async (id) => {\r\n    setIsLoading(true);\r\n    axios\r\n      .get(`${BASEURL}/nft/${id}`)\r\n      .then((response) => {\r\n        // console.log(\"detail data\", response.data.data);\r\n        setNftDetail(response.data.data);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((e) => {\r\n        setIsLoading(false);\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const changeOwner = async () => {\r\n    let curWallet = await getCurrentWallet();\r\n    if (!curWallet.success) {\r\n      alert(\"No wallet\");\r\n      return;\r\n    }\r\n\r\n    setWalletAddress(curWallet.account);\r\n\r\n    await buyNFT();\r\n\r\n    let tmpWallet = curWallet.account;\r\n\r\n    setIsLoading(true);\r\n    axios\r\n      .put(`${BASEURL}/nft/${nftId}`, {\r\n        tmpWallet,\r\n      })\r\n      .then((response) => {\r\n        console.log(\"owner changed\", response.data.data);\r\n        setNftDetail(response.data.data);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((e) => {\r\n        setIsLoading(false);\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const buyNFT = async () => {\r\n    if (tokenId) {\r\n      let tokenType = 0;\r\n      if (nftDetail.currency == \"ghsp\") {\r\n        tokenType = 0;\r\n      } else if (nftDetail.currency == \"busd\") {\r\n        tokenType = 1;\r\n      } else {\r\n        tokenType = 2;\r\n      }\r\n\r\n      if (tokenType === 0) {\r\n        await buyNFTWithGHSP(tokenId);\r\n      } else if (tokenType === 1) {\r\n        await buyNFTWithBUSD(tokenId);\r\n      } else {\r\n        await buyNFTWithBNB(tokenId, nftDetail.price);\r\n      }\r\n    }\r\n  };\r\n\r\n  const sellNFT = async (event) => {\r\n    event.preventDefault();\r\n\r\n    let tokenType = 0;\r\n    if (nftDetail.currency == \"ghsp\") {\r\n      tokenType = 0;\r\n    } else if (nftDetail.currency == \"busd\") {\r\n      tokenType = 1;\r\n    } else {\r\n      tokenType = 2;\r\n    }\r\n\r\n    console.log('sellNFT info', nftDetail);\r\n    putTokenOnSale(tokenId, nftDetail.price, tokenType)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header setShowModal={setShowModal} />\r\n\r\n      {isLoading ? (\r\n        <Loader />\r\n      ) : nftDetail ? (\r\n        <section className=\"nft\">\r\n          <div className=\"container\">\r\n            <div className=\"home-btn\">\r\n              <Link to=\"/\">Back to home</Link>\r\n            </div>\r\n            <div className=\"nft-detail-container\">\r\n              <div className=\"nft-img\">\r\n                <img\r\n                  src={nftDetail && `${nftDetail.imageUrl}`}\r\n                  alt=\"nft_image\"\r\n                />\r\n              </div>\r\n              <div className=\"nft-detail\">\r\n                <div className=\"nft-titles\">\r\n                  <div className=\"title\">\r\n                    <h1>{nftDetail && nftDetail.title} </h1>\r\n                    <p>{nftDetail && nftDetail.description} </p>\r\n                  </div>\r\n                  <div className=\"title-right\">\r\n                    <div className=\"head\">\r\n                      <p>Rarity</p>\r\n                      <span>{nftDetail?.type}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {nftDetail?.walletAddress && (\r\n                  <p className=\"view-owner\"> View Owner</p>\r\n                )}\r\n\r\n                <div className=\"nft-data\">\r\n                  <ul className=\"tags\">\r\n                    <li>\r\n                      <p\r\n                        onClick={() => setSelectedTabIndex(0)}\r\n                        className={\r\n                          selectedTabIndex === 0 ? \"active-tag\" : \"inactive-tag\"\r\n                        }\r\n                      >\r\n                        P2E Info\r\n                      </p>\r\n                    </li>\r\n                    <li>\r\n                      <p\r\n                        onClick={() => setSelectedTabIndex(1)}\r\n                        className={\r\n                          selectedTabIndex === 1 ? \"active-tag\" : \"inactive-tag\"\r\n                        }\r\n                      >\r\n                        Traits\r\n                      </p>\r\n                    </li>\r\n                  </ul>\r\n\r\n                  {/* <div className=\"nft-reward\">\r\n                  <div className=\"icon\">\r\n                    <img src={coinIcon} alt=\"coinIcon\" />\r\n                  </div>\r\n                  <div className=\"rewards\">\r\n                    <p>Basic Battle Rewards:</p>\r\n                    <div className=\"reward-data\">\r\n                      <div className=\"reward\">\r\n                        <span>Win:</span>\r\n                        <span>+6</span>\r\n                      </div>\r\n                      <div className=\"reward\">\r\n                        <span>Draw:</span>\r\n                        <span>+2</span>\r\n                      </div>\r\n                      <div className=\"reward\">\r\n                        <span>Lose:</span>\r\n                        <span>+1</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div> */}\r\n                  {selectedTabIndex === 1 ? (\r\n                    <div className=\"detail-card-flex\">\r\n                      {nftDetail &&\r\n                        nftDetail.properties.map((property) => {\r\n                          return (\r\n                            <div className=\"detail-card\">\r\n                              <p className=\"type\">{property.type}</p>\r\n                              <p className=\"value\">{property.value}</p>\r\n                              <p className=\"percentage\">\r\n                                {(\r\n                                  (property.valueTotal / property.typeTotal) *\r\n                                  100\r\n                                ).toFixed(1)}\r\n                                % have this trait\r\n                              </p>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                    </div>\r\n                  ) : (\r\n                    <>\r\n                      <div className=\"nft-stats\">\r\n                        <div className=\"stat\">\r\n                          {/* <img src={Icon} alt=\"icon\" /> */}\r\n                          <p>Win Bonus</p>\r\n                        </div>\r\n                        <p>\r\n                          {nftDetail &&\r\n                            (nftDetail.type == \"common\"\r\n                              ? \"0.25\"\r\n                              : nftDetail.type == \"rare\"\r\n                                ? \"0.5\"\r\n                                : nftDetail.type == \"epic\"\r\n                                  ? \"0.75\"\r\n                                  : \"1.0\")}\r\n                        </p>\r\n                      </div>\r\n                      <div className=\"nft-stats\">\r\n                        <div className=\"stat\">\r\n                          {/* <img src={SwordIcon} alt=\"icon\" /> */}\r\n                          <p>GHSP Battles</p>\r\n                        </div>\r\n                        <p>#/Infinite</p>\r\n                      </div>\r\n                      <div className=\"nft-stats\">\r\n                        <div className=\"stat\">\r\n                          {/* <img src={SwordIcon} alt=\"icon\" /> */}\r\n                          <p>Daily GHSP Battles</p>\r\n                        </div>\r\n                        <p>\r\n                          {nftDetail &&\r\n                            (nftDetail.type == \"common\"\r\n                              ? \"5\"\r\n                              : nftDetail.type == \"rare\"\r\n                                ? \"10\"\r\n                                : nftDetail.type == \"epic\"\r\n                                  ? \"15\"\r\n                                  : \"20\")}\r\n                        </p>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n                <div className=\"nft-price\">\r\n                  <h1>\r\n                    {nftDetail && nftDetail.price}{\" \"}\r\n                    {nftDetail?.currency?.toUpperCase()}\r\n                  </h1>\r\n                  {/* <p>{nftDetail && nftDetail.price} USD</p> */}\r\n                </div>\r\n                <div className=\"buy-btn\">\r\n                  <a\r\n                    // href=\"/\"\r\n                    // onClick={buyNFT}\r\n                    onClick={changeOwner}\r\n                  >\r\n                    BUY NOW\r\n                  </a>\r\n                </div>\r\n                {nftDetail && walletAddress === nftDetail.walletAddress && (\r\n                  <div className=\"buy-btn\">\r\n                    <a href=\"/\" onClick={sellNFT}>\r\n                      SELL\r\n                    </a>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      ) : (\r\n        <h1 style={{ marginTop: \"40px\", textAlign: \"center\" }}>No NFT found</h1>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NFTdetail;\r\n","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\pages\\mint\\Mint.js",["228","229","230","231","232","233","234","235"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./mint.css\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport IPFSUtils from \"./IPFSUtils\";\r\nimport axios from \"axios\";\r\nimport { BASEURL, Error, Success } from \"../../utils/Utils\";\r\n\r\nimport {\r\n  loadWeb3,\r\n  connectWallet,\r\n  createNFT,\r\n  getCurrentWallet,\r\n} from \"../../core/web3\";\r\nimport Header from \"../../components/Header\";\r\nimport AddPropertyModal from \"./addPropertyModal.js/AddPropertyModal\";\r\nimport LoaderModal from \"./LoaderModal\";\r\nimport { NotificationManager } from \"react-notifications\";\r\n\r\nfunction Mint({ setShowModal }) {\r\n  const fileTypes = [\"JPEG\", \"PNG\", \"GIF\", \"JPG\"];\r\n\r\n  const handleChange = (file) => {\r\n    setImage(file);\r\n  };\r\n\r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [tokenId, setTokenId] = useState(\"xyz\");\r\n  const [showPropertyModal, setShowPropertyModal] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [ipfs, setIpfs] = useState(\"test\");\r\n  const [price, setPrice] = useState(\"\");\r\n  const [currency, setCurrency] = useState(\"ghsp\");\r\n  const [image, setImage] = useState(\"\");\r\n  const [selectedType, setSelectedType] = useState(\"\");\r\n  const [level, setLevel] = useState(\"\");\r\n  const [properties, setProperties] = useState(null);\r\n  // const [traitsArray, setTraitsArray] = useState([\r\n  //   \"tank\",\r\n  //   \"marksman\",\r\n  //   \"assassin\",\r\n  // ]);\r\n\r\n  const [typeArray, setTypeArray] = useState([\r\n    \"common\",\r\n    \"rare\",\r\n    \"epic\",\r\n    \"legendary\",\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const initWeb3 = async () => {\r\n      await loadWeb3();\r\n      await connectWallet();\r\n    };\r\n\r\n    initWeb3();\r\n  }, []);\r\n\r\n  const saveNft = async (e) => {\r\n    setIsLoading(true);\r\n    // NotificationManager.info(\"Please wait for a minutes.\");\r\n    IPFSUtils.uploadFileToIPFS([image]).then((lists) => {\r\n      if (lists.length > 0) {\r\n        const content_uri1 = {\r\n          name: title,\r\n          symbol: title,\r\n          image: lists[0],\r\n          properties: {\r\n            files: [{ uri: \"image.png\", type: \"image/png\" }],\r\n            category: \"image\",\r\n          },\r\n        };\r\n\r\n        IPFSUtils.uploadTextToIPFS(content_uri1).then((path) => {\r\n          try {\r\n            createNFT(path).then((res) => {\r\n              console.log(\r\n                \"********** minted token id ***********\",\r\n                res?.tokenId\r\n              );\r\n              if (res && res.tokenId) {\r\n                var formData = new FormData();\r\n                formData.append(\"title\", title);\r\n                formData.append(\"description\", description);\r\n                formData.append(\"price\", price);\r\n                formData.append(\"nftImage\", image);\r\n                formData.append(\"currency\", currency);\r\n                formData.append(\"walletAddress\", res.wallet);\r\n                formData.append(\"type\", selectedType);\r\n                formData.append(\"tokenId\", res.tokenId);\r\n                formData.append(\"ipfs\", ipfs);\r\n                formData.append(\"properties\", JSON.stringify(properties));\r\n                formData.append(\"level\", level);\r\n\r\n                console.log(...formData);\r\n\r\n                axios\r\n                  .post(BASEURL + \"/nft/save\", formData)\r\n                  .then((response) => {\r\n                    console.log(response);\r\n                    setCurrency(\"ghsp\");\r\n                    setTitle(\"\");\r\n                    setDescription(\"\");\r\n                    setPrice(\"\");\r\n                    setSelectedType(null);\r\n                    setImage(\"\");\r\n                    setProperties(null);\r\n                    setLevel(\"\");\r\n                    setIsLoading(false);\r\n                    NotificationManager.success(\"Nft Created Successfully\");\r\n                    window.location.reload();\r\n                  })\r\n                  .catch((e) => {\r\n                    console.log(e.response.data.message);\r\n                    NotificationManager.error(\"Error Writing to DB\");\r\n                    NotificationManager.error(e.response.data.message);\r\n                    console.log(e);\r\n                    setIsLoading(false);\r\n                    window.location.reload();\r\n                  });\r\n              } else {\r\n                setIsLoading(false);\r\n\r\n                NotificationManager.error(\"Not Created Token ID from contract\");\r\n              }\r\n            });\r\n          } catch (error) {\r\n            setIsLoading(false);\r\n\r\n            NotificationManager.error(\"Transaction Error\");\r\n          }\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const validateFields = () => {\r\n    if (!title || !price || !level) return false;\r\n    return true;\r\n  };\r\n\r\n  const mintNFT = async (event) => {\r\n    // const tokenID = await createNFT(\"\");\r\n    // console.log('minted token ID : ', tokenID);\r\n    // if (tokenID) {\r\n    // \tsetSampleNFTTokenID(tokenID);\r\n    // \tupdateTokenIds();\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header setShowModal={setShowModal} />\r\n      <div className=\"mint-container\">\r\n        {isLoading && <LoaderModal />}\r\n        <div className=\"file-div\">\r\n          <p>PNG, GIF, WEBP, MP4 or MP3. Max 100mb.</p>\r\n          <FileUploader\r\n            multiple={false}\r\n            handleChange={handleChange}\r\n            name=\"nftImage\"\r\n            classes=\"drag-zone\"\r\n            types={fileTypes}\r\n          />\r\n\r\n          {image && (\r\n            <>\r\n              <p className=\"preview-text\">Image Preview</p>\r\n              <img\r\n                className=\"preview-img\"\r\n                src={URL.createObjectURL(image)}\r\n                alt=\"\"\r\n              />\r\n            </>\r\n          )}\r\n        </div>\r\n        <div className=\"inputs-div\">\r\n          <div>\r\n            <label htmlFor=\"\">Title</label>\r\n            <input\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n              type=\"text\"\r\n              className=\"mint-input\"\r\n              placeholder=\"example: gaming art design\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"\">Description (Optional)</label>\r\n            <input\r\n              value={description}\r\n              onChange={(e) => setDescription(e.target.value)}\r\n              type=\"text\"\r\n              className=\"mint-input\"\r\n              placeholder=\"example: gaming art design\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"\">Price</label>\r\n            <div className=\"price-flex\">\r\n              <input\r\n                onKeyDown={(evt) => evt.key === \"e\" && evt.preventDefault()}\r\n                value={price}\r\n                onChange={(e) => {\r\n                  if (e.target.value < 0) {\r\n                    setPrice(0);\r\n                  } else if (e.target.value > 100000000) {\r\n                    setPrice(100000000);\r\n                  } else setPrice(e.target.value);\r\n                }}\r\n                type=\"number\"\r\n                min={0}\r\n                max=\"10\"\r\n                className=\"mint-input\"\r\n                placeholder=\"0.0\"\r\n              />\r\n              <select\r\n                onChange={(e) => setCurrency(e.target.value)}\r\n                value={currency}\r\n              >\r\n                <option selected value=\"ghsp\">\r\n                  GHSP\r\n                </option>\r\n                <option value=\"bnb\">BNB</option>\r\n                <option value=\"busd\">BUSD</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"\">Level</label>\r\n            <input\r\n              value={level}\r\n              max=\"20\"\r\n              min=\"0\"\r\n              onKeyDown={(evt) => evt.key === \"e\" && evt.preventDefault()}\r\n              onChange={(e) => {\r\n                if (e.target.value < 0) {\r\n                  setLevel(0);\r\n                } else if (e.target.value > 20) {\r\n                  setLevel(20);\r\n                } else setLevel(e.target.value);\r\n              }}\r\n              type=\"number\"\r\n              className=\"mint-input\"\r\n              placeholder=\"Level\"\r\n            />\r\n          </div>\r\n          <button onClick={() => setShowPropertyModal(true)}>\r\n            Add Properties\r\n          </button>\r\n          <div className=\"checkbox\">\r\n            <label htmlFor=\"\">Type</label>\r\n            <div className=\"mint-types\">\r\n              {typeArray.map((t) => {\r\n                return (\r\n                  <label key={t} className=\"checkbox-wrap mint-wrap\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={selectedType === t}\r\n                      onChange={() => {\r\n                        if (selectedType === t) {\r\n                          setSelectedType(null);\r\n                        } else setSelectedType(t);\r\n                      }}\r\n                    />\r\n                    <span className=\"checkmark\"></span>\r\n                    {t}\r\n                  </label>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n          <button onClick={saveNft} disabled={!validateFields()}>\r\n            Create Item\r\n          </button>\r\n        </div>\r\n        <AddPropertyModal\r\n          setProperties={setProperties}\r\n          properties={properties}\r\n          showModal={showPropertyModal}\r\n          setShowModal={setShowPropertyModal}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Mint;\r\n","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\pages\\Home\\Home.js",["236","237","238","239","240","241","242","243","244"],"import React, { useEffect, useState } from \"react\";\r\nimport Header from \"../../components/Header\";\r\nimport MultiRangeInput from \"../../components/MultiRangeInput\";\r\n// import Card1 from \"../../assets/img/card1.png\";\r\n// import Card2 from \"../../assets/img/card2.png\";\r\nimport LeftIcon from \"../../assets/img/lefticon.png\";\r\nimport RightIcon from \"../../assets/img/righticon.png\";\r\nimport axios from \"axios\";\r\nimport \"./home.css\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n// import { Data } from \"../../components/accordian/AccordianData\";\r\nimport {\r\n  loadWeb3,\r\n  connectWallet,\r\n  // putTokenOnSale,\r\n  getTokenIds,\r\n  getSaleItems,\r\n} from \"../../core/web3\";\r\nimport { BASEURL } from \"../../utils/Utils\";\r\nimport Loader from \"../../components/loader/Loader\";\r\nimport Accordian from \"../../components/accordian/Accordian\";\r\n\r\nconst Home = ({ setShowModal }) => {\r\n  const [sidebar, setSidebar] = useState(false);\r\n  const openSidebar = (e) => {\r\n    console.log(\"sidebar\");\r\n    e.preventDefault();\r\n    setSidebar((prev) => !prev);\r\n  };\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [typeArray] = useState([\"common\", \"rare\", \"epic\", \"legendary\"]);\r\n\r\n  const loadNfts = async (e) => {\r\n    console.log(selectedProperties);\r\n\r\n    setIsLoading(true);\r\n\r\n    axios\r\n      .post(BASEURL + \"/nft/all/\", {\r\n        min,\r\n        max,\r\n        page,\r\n        size,\r\n        minlevel,\r\n        currency,\r\n        properties: selectedProperties,\r\n        maxlevel,\r\n        type: selectedType,\r\n      })\r\n      .then((response) => {\r\n        setTotalRecords(response.data.data[1].totalRecords);\r\n        setNftsArray(response.data.data[0]);\r\n\r\n        setIsLoading(false);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  const buyNft = async (e, nftId) => {\r\n    e.stopPropagation();\r\n    console.log(walletAddress);\r\n    axios\r\n      .put(`${BASEURL}/nft/${nftId}`, {\r\n        walletAddress,\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n\r\n  // const [sampleNFTTokenID, setSampleNFTTokenID] = useState(null);\r\n  const [setTokenIds] = useState([1, 2, 3, 5]);\r\n  const [saleItems, setSaleItems] = useState([]);\r\n  const [nftsArray, setNftsArray] = useState(null);\r\n  const [page, setPage] = useState(1);\r\n  const [size, setSize] = useState(6);\r\n  const [totalRecords, setTotalRecords] = useState(null);\r\n  //   filters\r\n  const [min, setMin] = useState(null);\r\n  const [minlevel, setMinlevel] = useState(0);\r\n  const [maxlevel, setMaxlevel] = useState(100);\r\n  const [selectedType, setSelectedType] = useState(null);\r\n  const [max, setMax] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [currency, setCurrency] = useState(null);\r\n  const [walletAddress, setWalletAddress] = useState(\"xyz\");\r\n  const [properties, setProperties] = useState(null);\r\n  const [selectedProperties, setSelectedProperties] = useState([]);\r\n  const [singleSelectedProperty, setSingleSelectedProperty] = useState(null);\r\n\r\n  useEffect(() => {\r\n    console.log(singleSelectedProperty);\r\n    if (\r\n      singleSelectedProperty &&\r\n      singleSelectedProperty.values &&\r\n      singleSelectedProperty.type\r\n    ) {\r\n      var index = selectedProperties.findIndex(\r\n        (x) => x.type === singleSelectedProperty.type\r\n      );\r\n      if (index !== -1) {\r\n        setSelectedProperties((prev) =>\r\n          Object.values({\r\n            ...prev,\r\n            [index]: {\r\n              ...prev[index],\r\n              values: [...singleSelectedProperty.values],\r\n            },\r\n          })\r\n        );\r\n      } else {\r\n        setSelectedProperties((prev) => [...prev, singleSelectedProperty]);\r\n      }\r\n      console.log(selectedProperties);\r\n    }\r\n  }, [singleSelectedProperty]);\r\n\r\n  const updateTokenIds = async () => {\r\n    let res = await getTokenIds();\r\n    setTokenIds(res);\r\n    console.log(\"======= getTokenIds ========== \", res);\r\n\r\n    res = await getSaleItems(res);\r\n    setSaleItems(res);\r\n  };\r\n\r\n  const loadProperties = () => {\r\n    axios\r\n      .get(BASEURL + \"/property/all\")\r\n      .then((response) => {\r\n        console.log(response.data.data);\r\n        setProperties(response.data.data);\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const initWeb3 = async () => {\r\n      await loadWeb3();\r\n      let res = await connectWallet();\r\n      setWalletAddress(res.address);\r\n    };\r\n    loadProperties();\r\n\r\n    initWeb3();\r\n\r\n    // updateTokenIds();\r\n  }, []);\r\n\r\n  const mintNFT = () => {\r\n    console.log(\"mint nft called\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadNfts();\r\n    // updateTokenIds();\r\n  }, [\r\n    min,\r\n    max,\r\n    page,\r\n    size,\r\n    minlevel,\r\n    currency,\r\n    selectedType,\r\n    maxlevel,\r\n    selectedProperties,\r\n  ]);\r\n\r\n  const clearAll = (e) => {\r\n    e.preventDefault();\r\n    setSelectedType(null);\r\n    setMinlevel(0);\r\n    setMax(null);\r\n    setMin(null);\r\n    setCurrency(null);\r\n    setMaxlevel(100);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header setShowModal={setShowModal} setWalletAddress={setWalletAddress} />\r\n      <section className=\"root\">\r\n        <div className=\"fitermob\">\r\n          <a href=\"/\" className=\"filter-btn\" onClick={openSidebar}>\r\n            Filter\r\n          </a>\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className={sidebar ? \"sidebar sidebar-active\" : \"sidebar\"}>\r\n            <div className=\"filter\">\r\n              <h4>FILTERS</h4>\r\n              <a href=\"/\" onClick={clearAll}>\r\n                CLEAR ALL\r\n              </a>\r\n            </div>\r\n            {/* <div className=\"hero\">\r\n              <h4>GHOSPERS</h4>\r\n              <p>No Ghosper selected</p>\r\n              <a onClick={loadNfts}>Choose Ghospers</a>\r\n            </div> */}\r\n            <div className=\"hero\">\r\n              <h4>GHOSPERS</h4>\r\n              <div className=\"checkbox\">\r\n                {typeArray.map((t) => {\r\n                  return (\r\n                    <label key={t} className=\"checkbox-wrap\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={selectedType === t}\r\n                        onChange={() => {\r\n                          if (selectedType === t) {\r\n                            setSelectedType(null);\r\n                          } else setSelectedType(t);\r\n                        }}\r\n                      />\r\n                      <span className=\"checkmark\"></span>\r\n                      {t}\r\n                    </label>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n            <div className=\"hero\">\r\n              <h4>PRICE</h4>\r\n              <div className=\"price\">\r\n                <div className=\"price-inpt\">\r\n                  <input\r\n                    type=\"number\"\r\n                    max=\"100000000\"\r\n                    min=\"0\"\r\n                    onKeyDown={(evt) => evt.key === \"e\" && evt.preventDefault()}\r\n                    placeholder=\"Min\"\r\n                    onChange={(e) => {\r\n                      if (e.target.value < 0) {\r\n                        setMin(0);\r\n                      } else if (e.target.value > 100000000) {\r\n                        setMin(100000000);\r\n                      } else setMin(e.target.value);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <span></span>\r\n                <div className=\"price-inpt\">\r\n                  <input\r\n                    max=\"100000000\"\r\n                    min=\"0\"\r\n                    placeholder=\"Max\"\r\n                    type=\"number\"\r\n                    onKeyDown={(evt) => evt.key === \"e\" && evt.preventDefault()}\r\n                    onChange={(e) => {\r\n                      if (e.target.value < 0) {\r\n                        setMax(0);\r\n                      } else if (e.target.value > 100000000) {\r\n                        setMax(100000000);\r\n                      } else setMax(e.target.value);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"hero\">\r\n              <h4>Currency</h4>\r\n              <div className=\"levels\">\r\n                <select\r\n                  onChange={(e) => setCurrency(e.target.value)}\r\n                  value={currency}\r\n                >\r\n                  <option selected>Select Currency</option>\r\n                  <option value=\"ghsp\">GHSP</option>\r\n                  <option value=\"bnb\">BNB</option>\r\n                  <option value=\"busd\">BUSD</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div className=\"hero\">\r\n              <h4>LEVEL</h4>\r\n              <div className=\"levels\">\r\n                <MultiRangeInput\r\n                  min={0}\r\n                  max={20}\r\n                  onChange={({ min, max }) => {\r\n                    setMinlevel(min);\r\n                    setMaxlevel(max);\r\n                    console.log(`min = ${min}, max = ${max}`);\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            {properties &&\r\n              properties.map((data) => {\r\n                return (\r\n                  <div className=\"hero\">\r\n                    <Accordian\r\n                      setSingleSelectedProperty={setSingleSelectedProperty}\r\n                      title={data.type}\r\n                      content={data.values}\r\n                    />\r\n                  </div>\r\n                );\r\n              })}\r\n\r\n            {/* <div className=\"hero skin\">\r\n\t\t\t\t\t\t\t<h4>SKINS</h4>\r\n\t\t\t\t\t\t\t<p>No skin selected</p>\r\n\t\t\t\t\t\t\t<a href=\"/\">Choose Skin</a>\r\n\t\t\t\t\t\t</div> */}\r\n          </div>\r\n          <div style={{ marginLeft: \"60px\", width: \"100%\" }}>\r\n            <div style={{ display: \"flex\", marginBottom: \"20px\" }}>\r\n              <div className=\"nav-btn\">\r\n                <a href=\"/mint\">Mint</a>\r\n              </div>\r\n            </div>\r\n            <div className=\"nft-collections\">\r\n              {isLoading ? (\r\n                <Loader />\r\n              ) : (\r\n                <>\r\n                  {nftsArray && nftsArray.length > 0 ? (\r\n                    nftsArray.map((elem, i) => {\r\n                      return (\r\n                        <div\r\n                          className=\"card\"\r\n                          key={i}\r\n                          onClick={() => {\r\n                            navigate(\r\n                              `/trending/${elem._id}/tokenid/${elem.tokenId}`\r\n                            );\r\n                          }}\r\n                        >\r\n                          <div className=\"card-img\">\r\n                            <img src={`${elem.imageUrl}`} alt=\"Card1\" />\r\n                          </div>\r\n                          <div className=\"card-title\">\r\n                            <h4>\r\n                              {elem.title}{\" \"}\r\n                              {saleItems[i] && saleItems[i].onSale == true\r\n                                ? \"OnSale\"\r\n                                : \"\"}\r\n                            </h4>\r\n                            {/* <span>{elem.description}</span> */}\r\n                            <button\r\n                              className=\"custom-btn\"\r\n                              onClick={(e) =>\r\n                                // navigate(\r\n                                //   `/trending/${elem._id}/tokenid/${elem.tokenId}`\r\n                                // )\r\n                                {\r\n                                  buyNft(e, elem._id);\r\n                                }\r\n                              }\r\n                            >\r\n                              OPEN\r\n                            </button>\r\n                          </div>\r\n                          <div className=\"card-price\">\r\n                            {/* <div>\r\n                          <span>gTHC</span>\r\n                          <p>21/219</p>\r\n                        </div> */}\r\n                            <div>\r\n                              <span>Price</span>\r\n                              {/* <p>900 {elem.currency?.toUpperCase()}</p> */}\r\n                              <p>\r\n                                {elem.price} {elem.currency?.toUpperCase()}\r\n                              </p>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      );\r\n                    })\r\n                  ) : (\r\n                    <div\r\n                      style={{\r\n                        width: \"100%\",\r\n                        marginTop: \"20px\",\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                      }}\r\n                    >\r\n                      <h2>No Data Found!</h2>\r\n                    </div>\r\n                  )}\r\n\r\n                  {nftsArray && nftsArray.length > 0 && !isLoading && (\r\n                    <div className=\"pagination-wrap\">\r\n                      <div className=\"pagination\">\r\n                        <div\r\n                          className=\"icon\"\r\n                          onClick={() => {\r\n                            if (page != 1) {\r\n                              setPage(page - 1);\r\n                              window.scrollTo(0, 0);\r\n                            }\r\n                          }}\r\n                        >\r\n                          <a>\r\n                            <img src={LeftIcon} alt=\"\" />\r\n                          </a>\r\n                        </div>\r\n                        <div className=\"number\">\r\n                          <span>\r\n                            {page * size > totalRecords\r\n                              ? totalRecords\r\n                              : size * page}\r\n                          </span>\r\n                          of {totalRecords && totalRecords}\r\n                        </div>\r\n                        <div\r\n                          className=\"icon\"\r\n                          onClick={() => {\r\n                            if (page * size < totalRecords) {\r\n                              window.scrollTo(0, 0);\r\n\r\n                              setPage(page + 1);\r\n                            }\r\n                          }}\r\n                        >\r\n                          <a>\r\n                            <img src={RightIcon} alt=\"\" />\r\n                          </a>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\pages\\profile\\Profile.js",["245","246","247","248","249","250","251","252","253","254","255","256"],"import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport MultiRangeInput from \"../../components/MultiRangeInput\";\r\nimport { BASEURL } from \"../../utils/Utils\";\r\nimport LeftIcon from \"../../assets/img/lefticon.png\";\r\nimport RightIcon from \"../../assets/img/righticon.png\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./profile.css\";\r\nimport ProfileImg from \"../../assets/img/card1.png\";\r\nimport UpdateModal from \"./updateModal/UpdateModal\";\r\nimport Header from \"../../components/Header\";\r\nimport Loader from \"../../components/loader/Loader\";\r\nimport Accordian from \"../../components/accordian/Accordian\";\r\nfunction Profile() {\r\n  const navigate = useNavigate();\r\n\r\n  const [typeArray, setTypeArray] = useState([\r\n    \"common\",\r\n    \"rare\",\r\n    \"epic\",\r\n    \"legendary\",\r\n  ]);\r\n\r\n  const loadNfts = async (e) => {\r\n    setIsLoading(true);\r\n\r\n    axios\r\n      .post(BASEURL + \"/nft/all/\", {\r\n        min,\r\n        max,\r\n        walletAddress,\r\n        currency,\r\n        minlevel,\r\n        maxlevel,\r\n        type: selectedType,\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setTotalRecords(response.data.data[1].totalRecords);\r\n        setNftsArray(response.data.data[0]);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  const [sidebar, setSidebar] = useState(false);\r\n  const openSidebar = (e) => {\r\n    console.log(\"sidebar\");\r\n    e.preventDefault();\r\n    setSidebar((prev) => !prev);\r\n  };\r\n  const onClickItem = async (tokenID) => {\r\n    setSampleNFTTokenID(tokenID);\r\n  };\r\n\r\n  const clearAll = (e) => {\r\n    e.preventDefault();\r\n    setSelectedType(null);\r\n    setMinlevel(0);\r\n    setMax(null);\r\n    setMin(null);\r\n    setMaxlevel(100);\r\n  };\r\n\r\n  const [sampleNFTTokenID, setSampleNFTTokenID] = useState(null);\r\n  const [tokenIds, setTokenIds] = useState([1, 2, 3, 5]);\r\n  const [saleItems, setSaleItems] = useState([]);\r\n  const [nftsArray, setNftsArray] = useState(null);\r\n  const [page, setPage] = useState(1);\r\n  const [size, setSize] = useState(6);\r\n  const [totalRecords, setTotalRecords] = useState(null);\r\n  //   filters\r\n  const [min, setMin] = useState(null);\r\n  const [minlevel, setMinlevel] = useState(0);\r\n  const [maxlevel, setMaxlevel] = useState(100);\r\n  const [currency, setCurrency] = useState(null);\r\n\r\n  const [selectedType, setSelectedType] = useState(null);\r\n  const [max, setMax] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [walletAddress, setWalletAddress] = useState(\"abcd\");\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [userDetails, setUserDetails] = useState(null);\r\n  const [properties, setProperties] = useState(null);\r\n  const [selectedProperties, setSelectedProperties] = useState([]);\r\n  const [singleSelectedProperty, setSingleSelectedProperty] = useState(null);\r\n\r\n  useEffect(() => {\r\n    loadNfts();\r\n    // updateTokenIds();\r\n  }, [\r\n    min,\r\n    max,\r\n    page,\r\n    size,\r\n    minlevel,\r\n    currency,\r\n    selectedType,\r\n    maxlevel,\r\n    walletAddress,\r\n    selectedProperties,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    console.log(singleSelectedProperty);\r\n    if (\r\n      singleSelectedProperty &&\r\n      singleSelectedProperty.values &&\r\n      singleSelectedProperty.type\r\n    ) {\r\n      var index = selectedProperties.findIndex(\r\n        (x) => x.type === singleSelectedProperty.type\r\n      );\r\n      if (index !== -1) {\r\n        setSelectedProperties((prev) =>\r\n          Object.values({\r\n            ...prev,\r\n            [index]: {\r\n              ...prev[index],\r\n              values: [...singleSelectedProperty.values],\r\n            },\r\n          })\r\n        );\r\n      } else {\r\n        setSelectedProperties((prev) => [...prev, singleSelectedProperty]);\r\n      }\r\n      console.log(selectedProperties);\r\n    }\r\n  }, [singleSelectedProperty]);\r\n\r\n  useEffect(() => {\r\n    loadProperties();\r\n    loadUserDetails();\r\n  }, [walletAddress]);\r\n\r\n  const loadUserDetails = () => {\r\n    axios\r\n      .post(BASEURL + \"/user/get-user\", {\r\n        walletAddress,\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data.data);\r\n        setUserDetails(response.data.data);\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n  const loadProperties = () => {\r\n    axios\r\n      .get(BASEURL + \"/property/all\")\r\n      .then((response) => {\r\n        console.log(response.data.data);\r\n        setProperties(response.data.data);\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n\r\n  const sellNft = async (e, nftId) => {\r\n    e.stopPropagation();\r\n    axios\r\n      .put(`${BASEURL}/nft/sell/${nftId}`, {\r\n        walletAddress,\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header setShowModal={setShowModal} setWalletAddress={setWalletAddress} />\r\n      <div className=\"profile-content\">\r\n        <div className=\"profile-back-filter\">\r\n          <button\r\n            className=\"custom-btn back-btn\"\r\n            onClick={() => {\r\n              navigate(\"/\");\r\n            }}\r\n          >\r\n            Back to home\r\n          </button>\r\n          <div className=\"fitermob profile-filters\">\r\n            <a href=\"/\" className=\"filter-btn\" onClick={openSidebar}>\r\n              Filters\r\n            </a>\r\n          </div>\r\n        </div>\r\n        {walletAddress ? (\r\n          <div className=\"profile-flex\">\r\n            {userDetails && userDetails.facebook ? (\r\n              <div className=\"profile-div\">\r\n                <div className=\"red-div\">\r\n                  <img\r\n                    src={\r\n                      userDetails &&\r\n                      `${userDetails.imageUrl}`\r\n                    }\r\n                    alt=\"\"\r\n                  />\r\n                </div>\r\n                <button\r\n                  className=\"custom-btn\"\r\n                  onClick={() => setShowModal(true)}\r\n                >\r\n                  Edit Profile\r\n                </button>\r\n                <h2>{userDetails && userDetails.name}</h2>\r\n                <p>{userDetails && userDetails.walletAddress}</p>{\" \"}\r\n                <div className=\"profile-about\">\r\n                  <p>About me</p>\r\n                  <p>{userDetails && userDetails.introduction}</p>\r\n                  <div className=\"profile-social\">\r\n                    <a\r\n                      target=\"_blank\"\r\n                      href={userDetails && userDetails.facebook}\r\n                    >\r\n                      <div className=\"white-round-div\">\r\n                        <i className=\"fa-brands fa-facebook-f\"></i>\r\n                      </div>\r\n                    </a>\r\n                    <a\r\n                      target=\"_blank\"\r\n                      href={userDetails && userDetails.instagram}\r\n                    >\r\n                      <div className=\"white-round-div\">\r\n                        <i className=\"fa-brands fa-instagram\"></i>\r\n                      </div>\r\n                    </a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"overlay-blue\">\r\n                <div>\r\n                  <h3>Profile is not updated</h3>\r\n                  <button\r\n                    className=\"custom-btn\"\r\n                    onClick={() => setShowModal(true)}\r\n                  >\r\n                    Edit Profile\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            <div\r\n              className=\"profile-nft-div\"\r\n              style={{ marginLeft: \"60px\", width: \"100%\" }}\r\n            >\r\n              <div className=\"nft-collections\">\r\n                {isLoading ? (\r\n                  <Loader />\r\n                ) : (\r\n                  nftsArray &&\r\n                  nftsArray.map((elem, i) => {\r\n                    return (\r\n                      <div\r\n                        className=\"card\"\r\n                        key={i}\r\n                        onClick={() => {\r\n                          onClickItem(i);\r\n                          navigate(`/trending/${elem._id}`);\r\n                        }}\r\n                      >\r\n                        <div className=\"card-img\">\r\n                          <img\r\n                            src={`${elem.imageUrl}`}\r\n                            alt=\"Card1\"\r\n                          />\r\n                        </div>\r\n                        <div className=\"card-title\">\r\n                          <h4>\r\n                            {elem.title}\r\n                            {Number(sampleNFTTokenID) === Number(i) ? (\r\n                              <span>&#10003;</span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}{\" \"}\r\n                            {saleItems[i] && saleItems[i].onSale === true\r\n                              ? \"OnSale\"\r\n                              : \"\"}\r\n                          </h4>\r\n                          {/* <span>{elem.description}</span> */}\r\n                          <button\r\n                            className=\"custom-btn\"\r\n                            onClick={(e) => sellNft(e, elem._id)}\r\n                          >\r\n                            SELL\r\n                          </button>\r\n                        </div>\r\n                        <div className=\"card-price\">\r\n                          {/* <div>\r\n                  <span>gTHC</span>\r\n                  <p>21/219</p>\r\n                </div> */}\r\n                          <div>\r\n                            <span>Price</span>\r\n                            <p>{elem.price}&nbsp;{elem.currency?.toUpperCase()}</p>\r\n                            <small>${elem.price} USD</small>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })\r\n                )}\r\n\r\n                {nftsArray && nftsArray.length > 0 && !isLoading ? (\r\n                  <div className=\"pagination-wrap\">\r\n                    <div className=\"pagination\">\r\n                      <div className=\"icon\">\r\n                        <a href=\"/\">\r\n                          <img src={LeftIcon} alt=\"\" />\r\n                        </a>\r\n                      </div>\r\n                      <div className=\"number\">\r\n                        <span>{size > totalRecords ? totalRecords : size}</span>\r\n                        of {totalRecords && totalRecords}\r\n                      </div>\r\n                      <div className=\"icon\">\r\n                        <a href=\"/\">\r\n                          <img src={RightIcon} alt=\"\" />\r\n                        </a>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <div\r\n                    style={{\r\n                      width: \"100%\",\r\n                      marginTop: \"20px\",\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    <h2>No Data Found!</h2>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n            <div className={sidebar ? \"sidebar sidebar-active\" : \"sidebar\"}>\r\n              <div className=\"filter\">\r\n                <h4>FILTERS</h4>\r\n                <a href=\"/\" onClick={clearAll}>\r\n                  CLEAR ALL\r\n                </a>\r\n              </div>\r\n              {/* <div className=\"hero\">\r\n                <h4>GHOSPERS</h4>\r\n                <p>No Ghosper selected</p>\r\n                <a onClick={loadNfts}>Choose Ghospers</a>\r\n              </div> */}\r\n              <div className=\"hero\">\r\n                <h4>GHOSPERS</h4>\r\n                <div className=\"checkbox\">\r\n                  {typeArray.map((t) => {\r\n                    return (\r\n                      <label key={t} className=\"checkbox-wrap\">\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          checked={selectedType === t}\r\n                          onChange={() => {\r\n                            if (selectedType === t) {\r\n                              setSelectedType(null);\r\n                            } else setSelectedType(t);\r\n                          }}\r\n                        />\r\n                        <span className=\"checkmark\"></span>\r\n                        {t}\r\n                      </label>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </div>\r\n              <div className=\"hero\">\r\n                <h4>PRICE</h4>\r\n                <div className=\"price\">\r\n                  <div className=\"price-inpt\">\r\n                    <input\r\n                      type=\"number\"\r\n                      onKeyDown={(evt) =>\r\n                        evt.key === \"e\" && evt.preventDefault()\r\n                      }\r\n                      onChange={(e) => {\r\n                        if (e.target.value < 0) {\r\n                          setMin(0);\r\n                        } else if (e.target.value > 100000000) {\r\n                          setMin(100000000);\r\n                        } else setMin(e.target.value);\r\n                      }}\r\n                      placeholder=\"Min\"\r\n                    />\r\n                  </div>\r\n                  <span></span>\r\n                  <div className=\"price-inpt\">\r\n                    <input\r\n                      placeholder=\"Max\"\r\n                      type=\"number\"\r\n                      onKeyDown={(evt) =>\r\n                        evt.key === \"e\" && evt.preventDefault()\r\n                      }\r\n                      onChange={(e) => {\r\n                        if (e.target.value < 0) {\r\n                          setMax(0);\r\n                        } else if (e.target.value > 100000000) {\r\n                          setMax(100000000);\r\n                        } else setMax(e.target.value);\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"hero\">\r\n                <h4>Currency</h4>\r\n                <div className=\"levels\">\r\n                  <select\r\n                    onChange={(e) => setCurrency(e.target.value)}\r\n                    value={currency}\r\n                  >\r\n                    <option selected>Select Currency</option>\r\n                    <option value=\"ghsp\">GHSP</option>\r\n                    <option value=\"bnb\">BNB</option>\r\n                    <option value=\"busd\">BUSD</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n              <div className=\"hero\">\r\n                <h4>LEVEL</h4>\r\n                <div className=\"levels\">\r\n                  <MultiRangeInput\r\n                    min={0}\r\n                    max={20}\r\n                    onChange={({ min, max }) => {\r\n                      setMinlevel(min);\r\n                      setMaxlevel(max);\r\n                      console.log(`min = ${min}, max = ${max}`);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n              {properties &&\r\n                properties.map((data) => {\r\n                  return (\r\n                    <div className=\"hero\">\r\n                      <Accordian\r\n                        setSingleSelectedProperty={setSingleSelectedProperty}\r\n                        title={data.type}\r\n                        content={data.values}\r\n                      />\r\n                    </div>\r\n                  );\r\n                })}\r\n              {/* <div className=\"hero skin\">\r\n      <h4>SKINS</h4>\r\n      <p>No skin selected</p>\r\n      <a href=\"/\">Choose Skin</a>\r\n    </div> */}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <h2 style={{ textAlign: \"center\", marginTop: \"40px\" }}>\r\n            You are not registered with Ghospers\r\n          </h2>\r\n        )}\r\n        {userDetails && (\r\n          <UpdateModal\r\n            setUserDetails={setUserDetails}\r\n            userDetails={userDetails}\r\n            walletAddress={walletAddress}\r\n            showModal={showModal}\r\n            setShowModal={setShowModal}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\pages\\Contact\\Contact.js",[],"D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\pages\\ConnectWallet\\ConnectWallet.js",[],"D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\pages\\mint\\IPFSUtils.js",["257"],"D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\utils\\Utils.js",[],"D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\components\\Header.js",["258"],"import React, { useEffect, useState } from \"react\";\r\nimport { NavLink, Link } from \"react-router-dom\";\r\nimport logo from \"../assets/img/logo.6eaa2fdb.png\";\r\nimport \"./header.css\";\r\nimport { NotificationManager } from \"react-notifications\";\r\n\r\nimport { loadWeb3, connectWallet, getCurrentWallet } from \"../core/web3\";\r\nimport axios from \"axios\";\r\nimport { BASEURL } from \"../utils/Utils\";\r\n\r\nconst Header = ({ setShowModal, setWalletAddress }) => {\r\n  const [navActive, isnavActive] = useState(false);\r\n  const [curWallet, setCurWallet] = useState(\"\");\r\n\r\n  const onConnectWallet = async () => {\r\n    if (curWallet !== \"\") {\r\n      return;\r\n    }\r\n    await loadWeb3();\r\n    let res = await connectWallet();\r\n    setCurWallet(res.address);\r\n    // console.log(res.address);\r\n    // setWalletAddress(res.address);\r\n    // setWalletAddress(\"xyz\");\r\n  };\r\n\r\n  const saveUser = (e) => {\r\n    axios\r\n      .post(BASEURL + \"/user/save\", {\r\n        // walletAddress: curWallet,\r\n        walletAddress: curWallet,\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n        //NotificationManager.success(\"User Created Successfully\");\r\n      })\r\n      .catch((e) => {\r\n        if (e.response?.status !== 400) {\r\n          NotificationManager.error(e.response.data.message);\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (curWallet) {\r\n      saveUser();\r\n    }\r\n  }, [curWallet]);\r\n\r\n  const openModal = (e) => {\r\n    // console.log(\"hwllo\");\r\n    e.preventDefault();\r\n    // setShowModal((prev) => !prev);\r\n\r\n    onConnectWallet();\r\n  };\r\n\r\n  const getWallet = async () => {\r\n    let res = await getCurrentWallet();\r\n    if (res.success) {\r\n      // console.log(res.account);\r\n      setCurWallet(res.account);\r\n      // setWalletAddress(res.account);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getWallet();\r\n  });\r\n\r\n  return (\r\n    <header>\r\n      <div className=\"container\">\r\n        <Link to=\"/\">\r\n          <div className=\"logo\">\r\n            <img src={logo} alt=\"logo\" />\r\n          </div>\r\n        </Link>\r\n        <div className={navActive ? \"links nav-active\" : \"links\"}>\r\n          <ul className=\"navigations\">\r\n            <li>\r\n              <Link to=\"https://ghospers.com/\" activeclassname=\"active\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/\" activeclassname=\"active\">\r\n                Marketplace\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <Link to=\"https://staking.ghospers.com/\" activeclassname=\"active\">\r\n                Staking\r\n              </Link>\r\n            </li>\r\n            {/* <li>\r\n\t\t\t\t\t\t\t<NavLink to=\"/contact\" activeclassname=\"active\">\r\n\t\t\t\t\t\t\t\tContact Us\r\n\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t</li> */}\r\n          </ul>\r\n          <div className=\"nav-btn\">\r\n            <a href=\"/\" onClick={openModal}>\r\n              {curWallet === \"\"\r\n                ? \"Connect Wallet\"\r\n                : curWallet.slice(0, 5) + \"...\" + curWallet.slice(-4)}\r\n            </a>\r\n            <a href=\"/profile\">Profile</a>\r\n          </div>\r\n        </div>\r\n        <div className=\"hamburger\" onClick={() => isnavActive(!navActive)}>\r\n          <div className=\"line1\"></div>\r\n          <div className=\"line2\"></div>\r\n          <div className=\"line3\"></div>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\pages\\mint\\addPropertyModal.js\\AddPropertyModal.js",["259","260","261","262"],"import React, { Component, useEffect, useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport { BASEURL } from \"../../../utils/Utils\";\r\nimport \"./addPropertyModal.css\";\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction AddPropertyModal({\r\n  setShowModal,\r\n  showModal,\r\n  setProperties,\r\n  properties,\r\n}) {\r\n  console.log(showModal);\r\n  function closeModal() {\r\n    setShowModal(false);\r\n  }\r\n\r\n  const [rows, setRows] = useState([\r\n    {\r\n      type: \"\",\r\n      value: \"\",\r\n    },\r\n  ]);\r\n\r\n  const onChange = (e, index) => {\r\n    setRows((prev) =>\r\n      Object.values({\r\n        ...prev,\r\n        [index]: { ...prev[index], [e.target.name]: e.target.value },\r\n      })\r\n    );\r\n  };\r\n\r\n  const removeRow = (index) => {\r\n    console.log(index);\r\n    if (rows.length !== 1) {\r\n      console.log(rows);\r\n      console.log(rows[index]);\r\n      var rowsTemp = [...rows];\r\n      console.log(rowsTemp);\r\n      rowsTemp.splice(index, 1);\r\n      console.log(rowsTemp);\r\n      setRows(rowsTemp);\r\n    }\r\n  };\r\n\r\n  const AddRows = () => {\r\n    var rowsTemp = rows.filter((r) => r.type != \"\" && r.value != \"\");\r\n    setProperties(rowsTemp);\r\n    setShowModal(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(properties);\r\n    if (!properties) {\r\n      setRows([\r\n        {\r\n          type: \"\",\r\n          value: \"\",\r\n        },\r\n      ]);\r\n    }\r\n  }, [properties]);\r\n\r\n  return (\r\n    <div className=\"scrollable-modal\">\r\n      <Modal\r\n        isOpen={showModal}\r\n        shouldCloseOnOverlayClick={false}\r\n        // onAfterOpen={afterOpenModal}\r\n        onRequestClose={closeModal}\r\n        // style={customStyles}\r\n        // className=\"scrollable-modal\"\r\n        contentLabel=\"Example Modal\"\r\n      >\r\n        <div className=\"properties-modal-content\">\r\n          <h2>Add Properties </h2>\r\n          <div className=\"property-rows\">\r\n            {rows &&\r\n              rows.map((row, index) => {\r\n                return (\r\n                  <div key={index} className=\"inputs-div\">\r\n                    <div>\r\n                      <label htmlFor=\"\">Type</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"type\"\r\n                        value={row.type}\r\n                        onChange={(e) => onChange(e, index)}\r\n                        className=\"mint-input\"\r\n                        placeholder=\"Hair\"\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <label htmlFor=\"\">Value</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"value\"\r\n                        value={row.value}\r\n                        onChange={(e) => onChange(e, index)}\r\n                        className=\"mint-input\"\r\n                        placeholder=\"Blonde\"\r\n                      />\r\n                    </div>\r\n                    <button\r\n                      onClick={() => removeRow(index)}\r\n                      className=\"remove-btn\"\r\n                    >\r\n                      Remove\r\n                    </button>\r\n                  </div>\r\n                );\r\n              })}\r\n          </div>\r\n          <button\r\n            className=\"add-btn\"\r\n            onClick={() => {\r\n              setRows((prev) => [\r\n                ...prev,\r\n                {\r\n                  type: \"\",\r\n                  value: \"\",\r\n                },\r\n              ]);\r\n            }}\r\n          >\r\n            Add\r\n          </button>\r\n\r\n          <button onClick={AddRows}>Save</button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddPropertyModal;\r\n","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\components\\MultiRangeInput.js",[],"D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\components\\loader\\Loader.js",[],"D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\components\\accordian\\Accordian.js",["263"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./accordian.css\";\r\nfunction Accordian({ title, content, setSingleSelectedProperty }) {\r\n  const [contentArray] = useState(content);\r\n  const [searchInput, setsearchInput] = useState(\"\");\r\n  const [resultsArray, setResultsArray] = useState(contentArray);\r\n  const [showContent, setShowContent] = useState(false);\r\n  const [selectedProperties, setSelectedProperties] = useState({\r\n    type: \"\",\r\n    values: [],\r\n  });\r\n\r\n  const onChange = (e) => {\r\n    setsearchInput(e.target.value);\r\n    if (e.target.value === \"\") {\r\n      setResultsArray(contentArray);\r\n    } else {\r\n      var resultArray = contentArray.filter((text) =>\r\n        text.includes(searchInput.toLowerCase())\r\n      );\r\n      setResultsArray(resultArray);\r\n    }\r\n  };\r\n\r\n  const alreadyPresent = (data) => {\r\n    return selectedProperties && selectedProperties.values.includes(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(selectedProperties);\r\n    setSingleSelectedProperty(selectedProperties);\r\n  }, [selectedProperties]);\r\n\r\n  return (\r\n    <div className=\"accordian-div\">\r\n      <div\r\n        className=\"accordian-header\"\r\n        onClick={() => setShowContent((prev) => !prev)}\r\n      >\r\n        <h4>{title}</h4>\r\n        {showContent ? (\r\n          <i\r\n            class=\"fa-solid fa-caret-up\"\r\n            onClick={() => setShowContent(false)}\r\n          ></i>\r\n        ) : (\r\n          <i\r\n            class=\"fa-solid fa-caret-down\"\r\n            onClick={() => setShowContent(true)}\r\n          ></i>\r\n        )}\r\n      </div>\r\n      <div className=\"accordian-content\">\r\n        {showContent && (\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              className=\"select-search-input\"\r\n              placeholder=\"Search\"\r\n              value={searchInput}\r\n              onChange={onChange}\r\n            />\r\n            <ul>\r\n              <div className=\"checkbox\">\r\n                {resultsArray &&\r\n                  resultsArray.map((data, index) => {\r\n                    return (\r\n                      <label className=\"checkbox-wrap\" key={index}>\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          checked={\r\n                            selectedProperties &&\r\n                            selectedProperties.values.includes(data)\r\n                          }\r\n                          onChange={() => {\r\n                            if (alreadyPresent(data)) {\r\n                              var remainingValues =\r\n                                selectedProperties.values.filter(\r\n                                  (x) => x !== data\r\n                                );\r\n                              setSelectedProperties({\r\n                                type: title,\r\n                                values: remainingValues,\r\n                              });\r\n                            } else {\r\n                              setSelectedProperties((prev) => ({\r\n                                type: title,\r\n                                values: [...prev.values, data],\r\n                              }));\r\n                            }\r\n                          }}\r\n                        />\r\n                        <span className=\"checkmark\"></span>\r\n                        {data}\r\n                      </label>\r\n                    );\r\n                  })}\r\n              </div>\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Accordian;\r\n","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\pages\\profile\\updateModal\\UpdateModal.js",[],"D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\core\\web3.js",["264"],"\r\nimport { NotificationManager } from 'react-notifications';\r\nimport Web3 from 'web3';\r\n\r\n// const busdAbi = require('./abi/busd.json');\r\n// const ghospAbi = require('./abi/ghosp.json');\r\nconst marketAbi = require('./abi/marketplace.json');\r\nconst minterAbi = require('./abi/minter.json');\r\n\r\n\r\nconst MINTER_ADDRESS = \"0xfA9bB2B3119A7b9d40235F9e92052AB6Fd6DaD12\"\r\nconst MARKETPLACE_ADDRESS = \"0xC4d193F224Ec31c7BDc959D2D1b9Eb9d16E97A78\"\r\n// const GHOSP_ADDRESS = \"0x91c70ba82a8ed676c5a09ce1cd94cc18923e8371\"\r\n// const BUSD_ADDRESS = \"0x8301f2213c0eed49a7e28ae4c3e91722919b8b47\"   // Faucet Token\r\nlet market_contract = null;\r\nlet minter_contract = null;\r\n//let ghosp_contract = null;\r\n//let busd_contract = null;\r\n\r\nconst NETWORK_ID = 97;\r\n\r\nconst checkConnectedNetwork = async (chainId) => {\r\n    if (chainId != NETWORK_ID) {\r\n        let wallet = await getCurrentWallet();\r\n        if (wallet.success) {\r\n            NotificationManager.error(\"Please select BSC network\");\r\n        }\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const loadWeb3 = async () => {\r\n    if (window.ethereum) {\r\n        window.web3 = new Web3(window.ethereum);\r\n        window.web3.eth.handleRevert = true;\r\n    } else if (window.web3) {\r\n        window.web3 = new Web3(window.web3.currentProvider);\r\n        window.web3.eth.handleRevert = true\r\n    } else {\r\n        window.alert(\r\n            \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n        );\r\n        return;\r\n    }\r\n\r\n    minter_contract = new window.web3.eth.Contract(minterAbi, MINTER_ADDRESS);\r\n    market_contract = new window.web3.eth.Contract(marketAbi, MARKETPLACE_ADDRESS);\r\n    //    ghosp_contract = new window.web3.eth.Contract(ghospAbi, GHOSP_ADDRESS);\r\n    //    busd_contract = new window.web3.eth.Contract(busdAbi, BUSD_ADDRESS);\r\n\r\n    window.ethereum.on('chainChanged', function (chainId) {\r\n        console.log('chain chainged with this chain id : ', chainId);\r\n        checkConnectedNetwork(chainId);\r\n    });\r\n};\r\n\r\n\r\nexport const connectWallet = async () => {\r\n    // const chainId = await getConnectedNetworkId();\r\n    // if (checkConnectedNetwork(chainId) == false) {\r\n    //     return  {\r\n    //         address: \"\",\r\n    //         status: \"Network connection error\",\r\n    //         res: 3,\r\n    //     };\r\n    // }\r\n\r\n    if (window.ethereum) {\r\n        try {\r\n            const addressArray = await window.ethereum.request({\r\n                method: \"eth_requestAccounts\",\r\n            });\r\n            const obj = {\r\n                status: \"Metamask successfuly connected.\",\r\n                address: addressArray[0],\r\n            };\r\n            return obj;\r\n        } catch (err) {\r\n            return {\r\n                address: \"\",\r\n                status: \"Something went wrong: \" + err.message,\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        return {\r\n            address: \"\",\r\n            status: (\r\n                <span>\r\n                    <p>\r\n                        {\" \"}\r\n                        🦊{\" \"}\r\n                        <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\r\n                            You must install Metamask, a virtual BSC wallet, in your\r\n                            browser.\r\n                        </a>\r\n                    </p>\r\n                </span>\r\n            ),\r\n        };\r\n    }\r\n};\r\n\r\nexport const getConnectedNetworkId = async () => {\r\n    if (window.web3 && window.web3.eth) {\r\n        return await window.web3.eth.getChainId();\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\nexport const getCurrentWallet = async () => {\r\n    const web3 = window.web3;\r\n    try {\r\n        let accounts = await web3.eth.getAccounts();\r\n        let accountBalance = await web3.eth.getBalance(accounts[0]);\r\n        accountBalance = web3.utils.fromWei(accountBalance);\r\n        return {\r\n            success: true,\r\n            account: accounts[0],\r\n            balance: accountBalance\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            result: \"Something went wrong: \" + error.message\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const buyNFTWithBNB = async (tokenID, amount) => {\r\n\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        let bnAmount = window.web3.utils.toWei(\"\" + amount);\r\n        await market_contract.methods.buyNFTWithBNB(tokenID, wallet.account).send({ from: wallet.account, value: bnAmount });\r\n    } catch (error) {\r\n        console.log('buyNFTWithBNB error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const buyNFTWithGHSP = async (tokenID) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        await market_contract.methods.buyNFTWithGHSP(tokenID, wallet.account).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('buyNFTWithGHSP error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const buyNFTWithBUSD = async (tokenID) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        await market_contract.methods.buyNFTWithBUSD(tokenID, wallet.account).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('buyNFTWithBUSD error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const removeTokenFromSale = async (tokenID) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        await market_contract.methods.removeTokenFromSale(tokenID, wallet.account).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('removeTokenFromSale error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const putTokenOnSale = async (tokenID, price, saleTokenType) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        await minter_contract.methods.setApprovalForAll(MARKETPLACE_ADDRESS, true).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('setApprovalForAll error', error);\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        let bnPrice = window.web3.utils.toWei(\"\" + price);\r\n        await market_contract.methods.putTokenOnSale(tokenID, bnPrice, saleTokenType).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('putTokenOnSale error', error);\r\n        return false;\r\n    }\r\n\r\n    console.log('putTokenOnSale ok');\r\n\r\n    return true;\r\n}\r\n\r\nexport const getSaleItems = async (tokenIds) => {\r\n\r\n    let saleItems = {};\r\n    for (let i = 0; i < tokenIds.length; i++) {\r\n        let item = await market_contract.methods.saleItems(tokenIds[i]).call();\r\n        saleItems[tokenIds[i]] = item;\r\n    }\r\n\r\n    console.log(\"Sale Items : \", saleItems);\r\n\r\n    return saleItems;\r\n}\r\n\r\nexport const createNFT = async (tokenURI) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return null;\r\n    }\r\n\r\n    try {\r\n        let tokenID = 0;\r\n        let tx = await minter_contract.methods.createNFT(tokenURI).send({ from: wallet.account });\r\n        tokenID = tx.events.Transfer.returnValues.tokenId;\r\n        return { tokenId: tokenID, wallet: wallet.account };\r\n    } catch (error) {\r\n        console.log('createNFT error', error);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nexport const getCreator = async (tokenID) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        await minter_contract.methods.getCreator(tokenID).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('getCreator error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const getTokenIds = async () => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return [];\r\n    }\r\n\r\n    try {\r\n        let tokenIds = await minter_contract.methods.getTokenIds(wallet.account).call();\r\n        return tokenIds;\r\n    } catch (error) {\r\n        console.log('getTokenIds error', error);\r\n        return [];\r\n    }\r\n}","D:\\Dev\\Projects\\Yogesh\\bsc-marketplace\\ghospers_marketplace\\src\\pages\\mint\\LoaderModal.js",["265","266"],"import React, { Component, useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport Loader from \"../../components/loader/Loader\";\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction LoaderModal() {\r\n  return (\r\n    <div className=\"\">\r\n      <Modal isOpen={true} contentLabel=\"Example Modal\">\r\n        <div style={{ width: \"400px\", margin: \"auto\" }}>\r\n          <h2 style={{ textAlign: \"center\", marginTop: \"40px\" }}>Loading.. </h2>\r\n          <Loader />\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoaderModal;\r\n",{"ruleId":"267","replacedBy":"268"},{"ruleId":"269","replacedBy":"270"},{"ruleId":"271","severity":1,"message":"272","line":12,"column":3,"nodeType":"273","messageId":"274","endLine":12,"endColumn":19},{"ruleId":"271","severity":1,"message":"275","line":26,"column":10,"nodeType":"273","messageId":"274","endLine":26,"endColumn":17},{"ruleId":"271","severity":1,"message":"276","line":26,"column":19,"nodeType":"273","messageId":"274","endLine":26,"endColumn":29},{"ruleId":"271","severity":1,"message":"277","line":29,"column":16,"nodeType":"273","messageId":"274","endLine":29,"endColumn":23},{"ruleId":"271","severity":1,"message":"278","line":37,"column":23,"nodeType":"273","messageId":"274","endLine":37,"endColumn":37},{"ruleId":"271","severity":1,"message":"279","line":43,"column":21,"nodeType":"273","messageId":"274","endLine":43,"endColumn":33},{"ruleId":"271","severity":1,"message":"280","line":166,"column":9,"nodeType":"273","messageId":"274","endLine":166,"endColumn":16},{"ruleId":"271","severity":1,"message":"281","line":85,"column":16,"nodeType":"273","messageId":"274","endLine":85,"endColumn":23},{"ruleId":"282","severity":1,"message":"283","line":127,"column":6,"nodeType":"284","endLine":127,"endColumn":30,"suggestions":"285"},{"ruleId":"271","severity":1,"message":"286","line":129,"column":9,"nodeType":"273","messageId":"274","endLine":129,"endColumn":23},{"ruleId":"271","severity":1,"message":"280","line":161,"column":9,"nodeType":"273","messageId":"274","endLine":161,"endColumn":16},{"ruleId":"282","severity":1,"message":"287","line":168,"column":6,"nodeType":"284","endLine":180,"endColumn":4,"suggestions":"288"},{"ruleId":"289","severity":1,"message":"290","line":213,"column":15,"nodeType":"291","endLine":213,"endColumn":37},{"ruleId":"292","severity":1,"message":"293","line":370,"column":68,"nodeType":"294","messageId":"295","endLine":370,"endColumn":70},{"ruleId":"292","severity":1,"message":"296","line":423,"column":38,"nodeType":"294","messageId":"295","endLine":423,"endColumn":40},{"ruleId":"289","severity":1,"message":"290","line":428,"column":27,"nodeType":"291","endLine":428,"endColumn":30},{"ruleId":"289","severity":1,"message":"290","line":449,"column":27,"nodeType":"291","endLine":449,"endColumn":30},{"ruleId":"271","severity":1,"message":"297","line":4,"column":8,"nodeType":"273","messageId":"274","endLine":4,"endColumn":14},{"ruleId":"271","severity":1,"message":"298","line":5,"column":8,"nodeType":"273","messageId":"274","endLine":5,"endColumn":16},{"ruleId":"271","severity":1,"message":"299","line":6,"column":8,"nodeType":"273","messageId":"274","endLine":6,"endColumn":12},{"ruleId":"271","severity":1,"message":"300","line":7,"column":8,"nodeType":"273","messageId":"274","endLine":7,"endColumn":17},{"ruleId":"271","severity":1,"message":"279","line":15,"column":21,"nodeType":"273","messageId":"274","endLine":15,"endColumn":33},{"ruleId":"271","severity":1,"message":"278","line":22,"column":23,"nodeType":"273","messageId":"274","endLine":22,"endColumn":37},{"ruleId":"271","severity":1,"message":"301","line":76,"column":10,"nodeType":"273","messageId":"274","endLine":76,"endColumn":18},{"ruleId":"271","severity":1,"message":"302","line":76,"column":20,"nodeType":"273","messageId":"274","endLine":76,"endColumn":31},{"ruleId":"271","severity":1,"message":"303","line":77,"column":21,"nodeType":"273","messageId":"274","endLine":77,"endColumn":33},{"ruleId":"271","severity":1,"message":"304","line":79,"column":10,"nodeType":"273","messageId":"274","endLine":79,"endColumn":14},{"ruleId":"271","severity":1,"message":"305","line":79,"column":16,"nodeType":"273","messageId":"274","endLine":79,"endColumn":23},{"ruleId":"271","severity":1,"message":"281","line":80,"column":16,"nodeType":"273","messageId":"274","endLine":80,"endColumn":23},{"ruleId":"271","severity":1,"message":"306","line":86,"column":10,"nodeType":"273","messageId":"274","endLine":86,"endColumn":16},{"ruleId":"271","severity":1,"message":"307","line":86,"column":18,"nodeType":"273","messageId":"274","endLine":86,"endColumn":27},{"ruleId":"271","severity":1,"message":"308","line":93,"column":25,"nodeType":"273","messageId":"274","endLine":93,"endColumn":41},{"ruleId":"282","severity":1,"message":"287","line":98,"column":6,"nodeType":"284","endLine":98,"endColumn":8,"suggestions":"309"},{"ruleId":"289","severity":1,"message":"290","line":254,"column":13,"nodeType":"291","endLine":254,"endColumn":35},{"ruleId":"271","severity":1,"message":"310","line":1,"column":18,"nodeType":"273","messageId":"274","endLine":1,"endColumn":27},{"ruleId":"271","severity":1,"message":"311","line":4,"column":24,"nodeType":"273","messageId":"274","endLine":4,"endColumn":39},{"ruleId":"292","severity":1,"message":"293","line":15,"column":24,"nodeType":"294","messageId":"295","endLine":15,"endColumn":26},{"ruleId":"282","severity":1,"message":"312","line":32,"column":6,"nodeType":"284","endLine":32,"endColumn":26,"suggestions":"313"},{"ruleId":"292","severity":1,"message":"296","line":76,"column":44,"nodeType":"294","messageId":"295","endLine":76,"endColumn":46},{"ruleId":"271","severity":1,"message":"314","line":1,"column":17,"nodeType":"273","messageId":"274","endLine":1,"endColumn":26},{"ruleId":"271","severity":1,"message":"315","line":3,"column":10,"nodeType":"273","messageId":"274","endLine":3,"endColumn":17},{"ruleId":"267","replacedBy":"316"},{"ruleId":"269","replacedBy":"317"},{"ruleId":"271","severity":1,"message":"297","line":4,"column":8,"nodeType":"273","messageId":"274","endLine":4,"endColumn":14},{"ruleId":"271","severity":1,"message":"298","line":5,"column":8,"nodeType":"273","messageId":"274","endLine":5,"endColumn":16},{"ruleId":"271","severity":1,"message":"299","line":6,"column":8,"nodeType":"273","messageId":"274","endLine":6,"endColumn":12},{"ruleId":"271","severity":1,"message":"300","line":8,"column":8,"nodeType":"273","messageId":"274","endLine":8,"endColumn":17},{"ruleId":"292","severity":1,"message":"293","line":93,"column":30,"nodeType":"294","messageId":"295","endLine":93,"endColumn":32},{"ruleId":"292","severity":1,"message":"293","line":95,"column":37,"nodeType":"294","messageId":"295","endLine":95,"endColumn":39},{"ruleId":"292","severity":1,"message":"293","line":115,"column":28,"nodeType":"294","messageId":"295","endLine":115,"endColumn":30},{"ruleId":"292","severity":1,"message":"293","line":117,"column":35,"nodeType":"294","messageId":"295","endLine":117,"endColumn":37},{"ruleId":"292","severity":1,"message":"293","line":238,"column":45,"nodeType":"294","messageId":"295","endLine":238,"endColumn":47},{"ruleId":"292","severity":1,"message":"293","line":240,"column":48,"nodeType":"294","messageId":"295","endLine":240,"endColumn":50},{"ruleId":"292","severity":1,"message":"293","line":242,"column":50,"nodeType":"294","messageId":"295","endLine":242,"endColumn":52},{"ruleId":"292","severity":1,"message":"293","line":261,"column":45,"nodeType":"294","messageId":"295","endLine":261,"endColumn":47},{"ruleId":"292","severity":1,"message":"293","line":263,"column":48,"nodeType":"294","messageId":"295","endLine":263,"endColumn":50},{"ruleId":"292","severity":1,"message":"293","line":265,"column":50,"nodeType":"294","messageId":"295","endLine":265,"endColumn":52},{"ruleId":"289","severity":1,"message":"290","line":281,"column":19,"nodeType":"291","endLine":285,"endColumn":20},{"ruleId":"271","severity":1,"message":"318","line":6,"column":19,"nodeType":"273","messageId":"274","endLine":6,"endColumn":24},{"ruleId":"271","severity":1,"message":"319","line":6,"column":26,"nodeType":"273","messageId":"274","endLine":6,"endColumn":33},{"ruleId":"271","severity":1,"message":"272","line":12,"column":3,"nodeType":"273","messageId":"274","endLine":12,"endColumn":19},{"ruleId":"271","severity":1,"message":"275","line":28,"column":10,"nodeType":"273","messageId":"274","endLine":28,"endColumn":17},{"ruleId":"271","severity":1,"message":"276","line":28,"column":19,"nodeType":"273","messageId":"274","endLine":28,"endColumn":29},{"ruleId":"271","severity":1,"message":"277","line":31,"column":16,"nodeType":"273","messageId":"274","endLine":31,"endColumn":23},{"ruleId":"271","severity":1,"message":"279","line":44,"column":21,"nodeType":"273","messageId":"274","endLine":44,"endColumn":33},{"ruleId":"271","severity":1,"message":"280","line":143,"column":9,"nodeType":"273","messageId":"274","endLine":143,"endColumn":16},{"ruleId":"271","severity":1,"message":"281","line":83,"column":16,"nodeType":"273","messageId":"274","endLine":83,"endColumn":23},{"ruleId":"282","severity":1,"message":"283","line":123,"column":6,"nodeType":"284","endLine":123,"endColumn":30,"suggestions":"320"},{"ruleId":"271","severity":1,"message":"286","line":125,"column":9,"nodeType":"273","messageId":"274","endLine":125,"endColumn":23},{"ruleId":"271","severity":1,"message":"280","line":157,"column":9,"nodeType":"273","messageId":"274","endLine":157,"endColumn":16},{"ruleId":"282","severity":1,"message":"287","line":164,"column":6,"nodeType":"284","endLine":174,"endColumn":4,"suggestions":"321"},{"ruleId":"292","severity":1,"message":"293","line":344,"column":68,"nodeType":"294","messageId":"295","endLine":344,"endColumn":70},{"ruleId":"292","severity":1,"message":"296","line":399,"column":38,"nodeType":"294","messageId":"295","endLine":399,"endColumn":40},{"ruleId":"289","severity":1,"message":"290","line":405,"column":27,"nodeType":"291","endLine":405,"endColumn":30},{"ruleId":"289","severity":1,"message":"290","line":427,"column":27,"nodeType":"291","endLine":427,"endColumn":30},{"ruleId":"271","severity":1,"message":"322","line":9,"column":8,"nodeType":"273","messageId":"274","endLine":9,"endColumn":18},{"ruleId":"271","severity":1,"message":"279","line":17,"column":21,"nodeType":"273","messageId":"274","endLine":17,"endColumn":33},{"ruleId":"271","severity":1,"message":"301","line":69,"column":10,"nodeType":"273","messageId":"274","endLine":69,"endColumn":18},{"ruleId":"271","severity":1,"message":"302","line":69,"column":20,"nodeType":"273","messageId":"274","endLine":69,"endColumn":31},{"ruleId":"271","severity":1,"message":"303","line":70,"column":21,"nodeType":"273","messageId":"274","endLine":70,"endColumn":33},{"ruleId":"271","severity":1,"message":"305","line":72,"column":16,"nodeType":"273","messageId":"274","endLine":72,"endColumn":23},{"ruleId":"271","severity":1,"message":"281","line":73,"column":16,"nodeType":"273","messageId":"274","endLine":73,"endColumn":23},{"ruleId":"282","severity":1,"message":"287","line":94,"column":6,"nodeType":"284","endLine":105,"endColumn":4,"suggestions":"323"},{"ruleId":"282","severity":1,"message":"283","line":132,"column":6,"nodeType":"284","endLine":132,"endColumn":30,"suggestions":"324"},{"ruleId":"282","severity":1,"message":"325","line":137,"column":6,"nodeType":"284","endLine":137,"endColumn":21,"suggestions":"326"},{"ruleId":"327","severity":1,"message":"328","line":216,"column":21,"nodeType":"291","messageId":"329","endLine":219,"endColumn":22,"fix":"330"},{"ruleId":"327","severity":1,"message":"328","line":224,"column":21,"nodeType":"291","messageId":"329","endLine":227,"endColumn":22,"fix":"331"},{"ruleId":"271","severity":1,"message":"310","line":1,"column":18,"nodeType":"273","messageId":"274","endLine":1,"endColumn":27},{"ruleId":"282","severity":1,"message":"332","line":48,"column":6,"nodeType":"284","endLine":48,"endColumn":17,"suggestions":"333"},{"ruleId":"271","severity":1,"message":"314","line":1,"column":17,"nodeType":"273","messageId":"274","endLine":1,"endColumn":26},{"ruleId":"271","severity":1,"message":"315","line":3,"column":10,"nodeType":"273","messageId":"274","endLine":3,"endColumn":17},{"ruleId":"292","severity":1,"message":"296","line":48,"column":46,"nodeType":"294","messageId":"295","endLine":48,"endColumn":48},{"ruleId":"292","severity":1,"message":"296","line":48,"column":63,"nodeType":"294","messageId":"295","endLine":48,"endColumn":65},{"ruleId":"282","severity":1,"message":"312","line":32,"column":6,"nodeType":"284","endLine":32,"endColumn":26,"suggestions":"334"},{"ruleId":"292","severity":1,"message":"296","line":23,"column":17,"nodeType":"294","messageId":"295","endLine":23,"endColumn":19},{"ruleId":"271","severity":1,"message":"314","line":1,"column":17,"nodeType":"273","messageId":"274","endLine":1,"endColumn":26},{"ruleId":"271","severity":1,"message":"335","line":1,"column":28,"nodeType":"273","messageId":"274","endLine":1,"endColumn":36},"no-native-reassign",["336"],"no-negated-in-lhs",["337"],"no-unused-vars","'getCurrentWallet' is defined but never used.","Identifier","unusedVar","'tokenId' is assigned a value but never used.","'setTokenId' is assigned a value but never used.","'setIpfs' is assigned a value but never used.","'setTraitsArray' is assigned a value but never used.","'setTypeArray' is assigned a value but never used.","'mintNFT' is assigned a value but never used.","'setSize' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selectedProperties'. Either include it or remove the dependency array.","ArrayExpression",["338"],"'updateTokenIds' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadNfts'. Either include it or remove the dependency array.",["339"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'NFTimg' is defined but never used.","'coinIcon' is defined but never used.","'Icon' is defined but never used.","'SwordIcon' is defined but never used.","'tokenIds' is assigned a value but never used.","'setTokenIds' is assigned a value but never used.","'setSaleItems' is assigned a value but never used.","'page' is assigned a value but never used.","'setPage' is assigned a value but never used.","'traits' is assigned a value but never used.","'setTraits' is assigned a value but never used.","'setWalletAddress' is assigned a value but never used.",["340"],"'urlSource' is defined but never used.","'setContentArray' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setSingleSelectedProperty'. Either include it or remove the dependency array. If 'setSingleSelectedProperty' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["341"],"'Component' is defined but never used.","'BASEURL' is defined but never used.",["336"],["337"],"'Error' is defined but never used.","'Success' is defined but never used.",["342"],["343"],"'ProfileImg' is defined but never used.",["344"],["345"],"React Hook useEffect has a missing dependency: 'loadUserDetails'. Either include it or remove the dependency array.",["346"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"347","text":"348"},{"range":"349","text":"348"},"React Hook useEffect has a missing dependency: 'saveUser'. Either include it or remove the dependency array.",["350"],["351"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},{"desc":"356","fix":"357"},{"desc":"358","fix":"359"},{"desc":"352","fix":"360"},{"desc":"361","fix":"362"},{"desc":"363","fix":"364"},{"desc":"352","fix":"365"},{"desc":"366","fix":"367"},[6552,6552]," rel=\"noreferrer\"",[6887,6887],{"desc":"368","fix":"369"},{"desc":"358","fix":"370"},"Update the dependencies array to be: [selectedProperties, singleSelectedProperty]",{"range":"371","text":"372"},"Update the dependencies array to be: [min, max, page, size, minlevel, selectedProperties, currency, selectedType, maxlevel, selectedTraits, loadNfts]",{"range":"373","text":"374"},"Update the dependencies array to be: [loadNfts]",{"range":"375","text":"376"},"Update the dependencies array to be: [selectedProperties, setSingleSelectedProperty]",{"range":"377","text":"378"},{"range":"379","text":"372"},"Update the dependencies array to be: [min, max, page, size, minlevel, currency, selectedType, maxlevel, selectedProperties, loadNfts]",{"range":"380","text":"381"},"Update the dependencies array to be: [min, max, page, size, minlevel, currency, selectedType, maxlevel, walletAddress, selectedProperties, loadNfts]",{"range":"382","text":"383"},{"range":"384","text":"372"},"Update the dependencies array to be: [loadUserDetails, walletAddress]",{"range":"385","text":"386"},"Update the dependencies array to be: [curWallet, saveUser]",{"range":"387","text":"388"},{"range":"389","text":"378"},[4056,4080],"[selectedProperties, singleSelectedProperty]",[4960,5143],"[min, max, page, size, minlevel, selectedProperties, currency, selectedType, maxlevel, selectedTraits, loadNfts]",[2977,2979],"[loadNfts]",[1054,1074],"[selectedProperties, setSingleSelectedProperty]",[3812,3836],[4716,4853],"[min, max, page, size, minlevel, currency, selectedType, maxlevel, selectedProperties, loadNfts]",[3009,3166],"[min, max, page, size, minlevel, currency, selectedType, maxlevel, walletAddress, selectedProperties, loadNfts]",[3903,3927],[4006,4021],"[loadUserDetails, walletAddress]",[1389,1400],"[curWallet, saveUser]",[1038,1058]]
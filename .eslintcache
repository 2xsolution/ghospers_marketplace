[{"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\index.js":"1","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\App.js":"2","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\reportWebVitals.js":"3","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\Mint.js":"4","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Contact\\Contact.js":"5","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\ConnectWallet\\ConnectWallet.js":"6","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Home\\Home.js":"7","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\NFTDetail\\NFTdetail.js":"8","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\Header.js":"9","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\MultiRangeInput.js":"10","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\core\\web3.js":"11","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\utils\\Utils.js":"12","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\loader\\Loader.js":"13","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\Profile.js":"14","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\IPFSUtils.js":"15","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\updateModal\\UpdateModal.js":"16","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\accordian\\Accordian.js":"17","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\accordian\\AccordianData.js":"18","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\addPropertyModal.js\\AddPropertyModal.js":"19","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\LoaderModal.js":"20","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\loaderModal\\LoaderModal.js":"21"},{"size":747,"mtime":1648646337282,"results":"22","hashOfConfig":"23"},{"size":2010,"mtime":1649166718754,"results":"24","hashOfConfig":"23"},{"size":375,"mtime":1648115103768,"results":"25","hashOfConfig":"23"},{"size":9579,"mtime":1649182401894,"results":"26","hashOfConfig":"23"},{"size":1378,"mtime":1648115103760,"results":"27","hashOfConfig":"23"},{"size":2606,"mtime":1649233546520,"results":"28","hashOfConfig":"23"},{"size":15392,"mtime":1649347819920,"results":"29","hashOfConfig":"23"},{"size":12039,"mtime":1649268861193,"results":"30","hashOfConfig":"23"},{"size":3507,"mtime":1649232203462,"results":"31","hashOfConfig":"23"},{"size":2939,"mtime":1648880453344,"results":"32","hashOfConfig":"23"},{"size":8924,"mtime":1649233647111,"results":"33","hashOfConfig":"23"},{"size":341,"mtime":1649347393635,"results":"34","hashOfConfig":"23"},{"size":242,"mtime":1649233539853,"results":"35","hashOfConfig":"23"},{"size":20269,"mtime":1649263993325,"results":"36","hashOfConfig":"23"},{"size":2034,"mtime":1648210876491,"results":"37","hashOfConfig":"23"},{"size":4905,"mtime":1648806499962,"results":"38","hashOfConfig":"23"},{"size":3506,"mtime":1649262984349,"results":"39","hashOfConfig":"23"},{"size":2113,"mtime":1648453158027,"results":"40","hashOfConfig":"23"},{"size":3630,"mtime":1648881029145,"results":"41","hashOfConfig":"23"},{"size":548,"mtime":1649163026084,"results":"42","hashOfConfig":"23"},{"size":433,"mtime":1649254166538,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"17edddb",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":2,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"46"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\index.js",[],["97","98"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\App.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\reportWebVitals.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\Mint.js",["99","100","101","102","103","104","105","106"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./mint.css\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport IPFSUtils from \"./IPFSUtils\";\r\nimport axios from \"axios\";\r\nimport { BASEURL, Error, Success } from \"../../utils/Utils\";\r\n\r\nimport {\r\n  loadWeb3,\r\n  connectWallet,\r\n  createNFT,\r\n  getCurrentWallet,\r\n} from \"../../core/web3\";\r\nimport Header from \"../../components/Header\";\r\nimport AddPropertyModal from \"./addPropertyModal.js/AddPropertyModal\";\r\nimport LoaderModal from \"./LoaderModal\";\r\nimport { NotificationManager } from \"react-notifications\";\r\n\r\nfunction Mint({ setShowModal }) {\r\n  const fileTypes = [\"JPEG\", \"PNG\", \"GIF\", \"JPG\"];\r\n\r\n  const handleChange = (file) => {\r\n    setImage(file);\r\n  };\r\n\r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [tokenId, setTokenId] = useState(\"xyz\");\r\n  const [showPropertyModal, setShowPropertyModal] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [ipfs, setIpfs] = useState(\"test\");\r\n  const [price, setPrice] = useState(\"\");\r\n  const [currency, setCurrency] = useState(\"ghsp\");\r\n  const [image, setImage] = useState(\"\");\r\n  const [selectedType, setSelectedType] = useState(\"\");\r\n  const [level, setLevel] = useState(\"\");\r\n  const [properties, setProperties] = useState(null);\r\n  // const [traitsArray, setTraitsArray] = useState([\r\n  //   \"tank\",\r\n  //   \"marksman\",\r\n  //   \"assassin\",\r\n  // ]);\r\n\r\n  const [typeArray, setTypeArray] = useState([\r\n    \"common\",\r\n    \"rare\",\r\n    \"epic\",\r\n    \"legendary\",\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const initWeb3 = async () => {\r\n      await loadWeb3();\r\n      await connectWallet();\r\n    };\r\n\r\n    initWeb3();\r\n  }, []);\r\n\r\n  const saveNft = async (e) => {\r\n    setIsLoading(true);\r\n    // NotificationManager.info(\"Please wait for a minutes.\");\r\n    IPFSUtils.uploadFileToIPFS([image]).then((lists) => {\r\n      if (lists.length > 0) {\r\n        const content_uri1 = {\r\n          name: title,\r\n          symbol: title,\r\n          image: lists[0],\r\n          properties: {\r\n            files: [{ uri: \"image.png\", type: \"image/png\" }],\r\n            category: \"image\",\r\n          },\r\n        };\r\n\r\n        IPFSUtils.uploadTextToIPFS(content_uri1).then((path) => {\r\n          try {\r\n            createNFT(path).then((res) => {\r\n              console.log(\r\n                \"********** minted token id ***********\",\r\n                res?.tokenId\r\n              );\r\n              console.log(res);\r\n              if (res && res.tokenId && res.wallet) {\r\n                var formData = new FormData();\r\n                formData.append(\"title\", title);\r\n                formData.append(\"description\", description);\r\n                formData.append(\"price\", price);\r\n                formData.append(\"nftImage\", image);\r\n                formData.append(\"currency\", currency);\r\n                formData.append(\"walletAddress\", res.wallet);\r\n                formData.append(\"type\", selectedType);\r\n                formData.append(\"tokenId\", res.tokenId);\r\n                formData.append(\"ipfs\", ipfs);\r\n                formData.append(\"properties\", JSON.stringify(properties));\r\n                formData.append(\"level\", level);\r\n\r\n                console.log(...formData);\r\n\r\n                axios\r\n                  .post(BASEURL + \"/nft/save\", formData)\r\n                  .then((response) => {\r\n                    console.log(response);\r\n                    setCurrency(\"ghsp\");\r\n                    setTitle(\"\");\r\n                    setDescription(\"\");\r\n                    setPrice(\"\");\r\n                    setSelectedType(null);\r\n                    setImage(\"\");\r\n                    setProperties(null);\r\n                    setLevel(\"\");\r\n                    setIsLoading(false);\r\n                    NotificationManager.success(\"Nft Created Successfully\");\r\n                    // window.location.reload();\r\n                  })\r\n                  .catch((e) => {\r\n                    console.log(e.response.data.message);\r\n                    NotificationManager.error(\"Error Writing to DB\");\r\n                    NotificationManager.error(e.response.data.message);\r\n                    console.log(e);\r\n                    setIsLoading(false);\r\n                    // window.location.reload();\r\n                  });\r\n              } else {\r\n                setIsLoading(false);\r\n                NotificationManager.error(\"Not Created Token ID from contract\");\r\n              }\r\n            });\r\n          } catch (error) {\r\n            setIsLoading(false);\r\n            NotificationManager.error(\"Transaction Error\");\r\n          }\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const validateFields = () => {\r\n    if (!title || !price || !level || !selectedType || !image) return false;\r\n    return true;\r\n  };\r\n\r\n  const mintNFT = async (event) => {\r\n    // const tokenID = await createNFT(\"\");\r\n    // console.log('minted token ID : ', tokenID);\r\n    // if (tokenID) {\r\n    // \tsetSampleNFTTokenID(tokenID);\r\n    // \tupdateTokenIds();\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header setShowModal={setShowModal} />\r\n      <div className=\"mint-container\">\r\n        {isLoading && <LoaderModal />}\r\n        <div className=\"file-div\">\r\n          <p>PNG, GIF, WEBP, MP4 or MP3. Max 100mb.</p>\r\n          <FileUploader\r\n            multiple={false}\r\n            handleChange={handleChange}\r\n            name=\"nftImage\"\r\n            classes=\"drag-zone\"\r\n            types={fileTypes}\r\n          />\r\n\r\n          {image && (\r\n            <>\r\n              <p className=\"preview-text\">Image Preview</p>\r\n              <img\r\n                className=\"preview-img\"\r\n                src={URL.createObjectURL(image)}\r\n                alt=\"\"\r\n              />\r\n            </>\r\n          )}\r\n        </div>\r\n        <div className=\"inputs-div\">\r\n          <div>\r\n            <label htmlFor=\"\">Title</label>\r\n            <input\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n              type=\"text\"\r\n              className=\"mint-input\"\r\n              placeholder=\"example: gaming art design\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"\">Description (Optional)</label>\r\n            <input\r\n              value={description}\r\n              onChange={(e) => setDescription(e.target.value)}\r\n              type=\"text\"\r\n              className=\"mint-input\"\r\n              placeholder=\"example: gaming art design\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"\">Price</label>\r\n            <div className=\"price-flex\">\r\n              <input\r\n                onKeyDown={(evt) => evt.key === \"e\" && evt.preventDefault()}\r\n                value={price}\r\n                onChange={(e) => {\r\n                  if (e.target.value < 0) {\r\n                    setPrice(0);\r\n                  } else if (e.target.value > 100000000) {\r\n                    setPrice(100000000);\r\n                  } else setPrice(e.target.value);\r\n                }}\r\n                type=\"number\"\r\n                min={0}\r\n                max=\"10\"\r\n                className=\"mint-input\"\r\n                placeholder=\"0.0\"\r\n              />\r\n              <select\r\n                onChange={(e) => setCurrency(e.target.value)}\r\n                value={currency}\r\n              >\r\n                <option selected value=\"ghsp\">\r\n                  GHSP\r\n                </option>\r\n                <option value=\"bnb\">BNB</option>\r\n                <option value=\"busd\">BUSD</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"\">Level</label>\r\n            <input\r\n              value={level}\r\n              max=\"20\"\r\n              min=\"0\"\r\n              onKeyDown={(evt) => evt.key === \"e\" && evt.preventDefault()}\r\n              onChange={(e) => {\r\n                if (e.target.value < 0) {\r\n                  setLevel(0);\r\n                } else if (e.target.value > 20) {\r\n                  setLevel(20);\r\n                } else setLevel(e.target.value);\r\n              }}\r\n              type=\"number\"\r\n              className=\"mint-input\"\r\n              placeholder=\"Level\"\r\n            />\r\n          </div>\r\n          <button onClick={() => setShowPropertyModal(true)}>\r\n            Add Properties\r\n          </button>\r\n          <div className=\"checkbox\">\r\n            <label htmlFor=\"\">Type</label>\r\n            <div className=\"mint-types\">\r\n              {typeArray.map((t) => {\r\n                return (\r\n                  <label key={t} className=\"checkbox-wrap mint-wrap\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={selectedType === t}\r\n                      onChange={() => {\r\n                        if (selectedType === t) {\r\n                          setSelectedType(null);\r\n                        } else setSelectedType(t);\r\n                      }}\r\n                    />\r\n                    <span className=\"checkmark\"></span>\r\n                    {t}\r\n                  </label>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n          <button onClick={saveNft} disabled={!validateFields()}>\r\n            Create Item\r\n          </button>\r\n        </div>\r\n        <AddPropertyModal\r\n          setProperties={setProperties}\r\n          properties={properties}\r\n          showModal={showPropertyModal}\r\n          setShowModal={setShowPropertyModal}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Mint;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Contact\\Contact.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\ConnectWallet\\ConnectWallet.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Home\\Home.js",["107","108","109","110","111","112","113","114","115","116","117","118"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\NFTDetail\\NFTdetail.js",["119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link, Navigate, useNavigate, useParams } from \"react-router-dom\";\r\nimport Header from \"../../components/Header\";\r\nimport NFTimg from \"../../assets/img/nftimg.png\";\r\nimport coinIcon from \"../../assets/img/coinicon.png\";\r\nimport Icon from \"../../assets/img/icon_stat.png\";\r\nimport Loader from \"../../components/loader/Loader\";\r\nimport SwordIcon from \"../../assets/img/sword.png\";\r\nimport \"./nftdetail.css\";\r\nimport Skeleton, { SkeletonTheme } from \"react-loading-skeleton\";\r\n\r\nimport axios from \"axios\";\r\nimport { BASEURL } from \"../../utils/Utils\";\r\nimport {\r\n  loadWeb3,\r\n  connectWallet,\r\n  getCurrentWallet,\r\n  buyNFTWithBNB,\r\n  buyNFTWithBUSD,\r\n  buyNFTWithGHSP,\r\n  putTokenOnSale,\r\n  removeTokenFromSale,\r\n} from \"../../core/web3\";\r\nimport LoaderModal from \"../../components/loaderModal/LoaderModal\";\r\n\r\nconst NFTdetail = ({ setShowModal }) => {\r\n  const [nftDetail, setNftDetail] = useState(null);\r\n  const [walletAddress, setWalletAddress] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\r\n  const [showLoadingModal, setShowLoadingModal] = useState(false);\r\n  useEffect(() => {\r\n    const initWeb3 = async () => {\r\n      await loadWeb3();\r\n      let addr = await connectWallet();\r\n      setWalletAddress(addr.address);\r\n    };\r\n\r\n    initWeb3();\r\n  }, []);\r\n\r\n  const { nftId, tokenId } = useParams();\r\n  // console.log(nftId);\r\n  // console.log(tokenId);\r\n  useEffect(() => {\r\n    // console.log(nftId);\r\n    loadNftById(nftId);\r\n  }, [nftId]);\r\n\r\n  const loadNftById = async (id) => {\r\n    setIsLoading(true);\r\n    axios\r\n      .get(`${BASEURL}/nft/${id}`)\r\n      .then((response) => {\r\n        // console.log(\"detail data\", response.data.data);\r\n        setNftDetail(response.data.data);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((e) => {\r\n        setIsLoading(false);\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const changeOwner = async () => {\r\n    setShowLoadingModal(true);\r\n    // axios\r\n    //   .put(`${BASEURL}/nft/${nftId}`, {\r\n    //     walletAddress: \"xyz\",\r\n    //   })\r\n    //   .then((response) => {\r\n    //     console.log(\"owner changed\", response.data.data);\r\n    //     setNftDetail(response.data.data);\r\n    //     setIsLoading(false);\r\n    //   })\r\n    //   .catch((e) => {\r\n    //     setIsLoading(false);\r\n    //     console.log(e);\r\n    //   });\r\n    // return;\r\n    let curWallet = await getCurrentWallet();\r\n    if (!curWallet.success) {\r\n      alert(\"No wallet\");\r\n      return;\r\n    }\r\n\r\n    setWalletAddress(curWallet.account);\r\n\r\n    try {\r\n      await buyNFT();\r\n    } catch (error) {\r\n      console.log(\"failed to buy nft\", error);\r\n      return;\r\n    }\r\n\r\n    let tmpWallet = curWallet.account;\r\n\r\n    axios\r\n      .put(`${BASEURL}/nft/${nftId}`, {\r\n        walletAddress: tmpWallet,\r\n      })\r\n      .then((response) => {\r\n        console.log(\"owner changed\", response.data.data);\r\n        setNftDetail(response.data.data);\r\n        setShowLoadingModal(false);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n        setShowLoadingModal(false);\r\n      });\r\n  };\r\n\r\n  const buyNFT = async () => {\r\n    if (tokenId) {\r\n      let tokenType = 0;\r\n      if (nftDetail.currency == \"ghsp\") {\r\n        tokenType = 0;\r\n      } else if (nftDetail.currency == \"busd\") {\r\n        tokenType = 1;\r\n      } else {\r\n        tokenType = 2;\r\n      }\r\n\r\n      if (tokenType === 0) {\r\n        await buyNFTWithGHSP(tokenId, nftDetail.price);\r\n      } else if (tokenType === 1) {\r\n        await buyNFTWithBUSD(tokenId, nftDetail.price);\r\n      } else {\r\n        await buyNFTWithBNB(tokenId, nftDetail.price);\r\n      }\r\n    }\r\n  };\r\n\r\n  const cancelNft = async () => {\r\n    removeTokenFromSale(tokenId);\r\n  };\r\n\r\n  const sellNft = async () => {\r\n    let tokenType = 0;\r\n    if (nftDetail.currency == \"ghsp\") {\r\n      tokenType = 0;\r\n    } else if (nftDetail.currency == \"busd\") {\r\n      tokenType = 1;\r\n    } else {\r\n      tokenType = 2;\r\n    }\r\n\r\n    console.log(\"sellNft info\", nftDetail);\r\n    putTokenOnSale(tokenId, nftDetail.price, tokenType);\r\n  };\r\n\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <>\r\n      <Header setShowModal={setShowModal} />\r\n      {showLoadingModal && <LoaderModal />}\r\n      {isLoading ? (\r\n        <SkeletonTheme baseColor=\"#0d2733\" highlightColor=\"#41c6ff\">\r\n          <div className=\"loader-flex\">\r\n            <div className=\"left-loader\">\r\n              <Skeleton width={365} height={375} />\r\n            </div>\r\n            <div className=\"right-loader\">\r\n              <Skeleton width={440} height={500} />\r\n            </div>\r\n          </div>\r\n        </SkeletonTheme>\r\n      ) : nftDetail ? (\r\n        <section className=\"nft\">\r\n          <div className=\"container\">\r\n            <div className=\"home-btn\">\r\n              <Link to=\"/\">Back to home</Link>\r\n            </div>\r\n            <div className=\"nft-detail-container\">\r\n              <div className=\"nft-img\">\r\n                <img\r\n                  src={nftDetail && `${nftDetail.imageUrl}`}\r\n                  alt=\"nft_image\"\r\n                />\r\n              </div>\r\n              <div className=\"nft-detail\">\r\n                <div className=\"nft-titles\">\r\n                  <div className=\"title\">\r\n                    <h1>{nftDetail && nftDetail.title} </h1>\r\n                    <p>{nftDetail && nftDetail.description} </p>\r\n                  </div>\r\n                  <div className=\"title-right\">\r\n                    <div className=\"head\">\r\n                      <p>Rarity</p>\r\n                      <span>{nftDetail?.type}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {nftDetail?.walletAddress && (\r\n                  <p\r\n                    className=\"view-owner\"\r\n                    onClick={() =>\r\n                      navigate(\"/profile/\" + nftDetail.walletAddress)\r\n                    }\r\n                  >\r\n                    {\" \"}\r\n                    View Owner\r\n                  </p>\r\n                )}\r\n\r\n                <div className=\"nft-data\">\r\n                  <ul className=\"tags\">\r\n                    <li>\r\n                      <p\r\n                        onClick={() => setSelectedTabIndex(0)}\r\n                        className={\r\n                          selectedTabIndex === 0 ? \"active-tag\" : \"inactive-tag\"\r\n                        }\r\n                      >\r\n                        P2E Info\r\n                      </p>\r\n                    </li>\r\n                    <li>\r\n                      <p\r\n                        onClick={() => setSelectedTabIndex(1)}\r\n                        className={\r\n                          selectedTabIndex === 1 ? \"active-tag\" : \"inactive-tag\"\r\n                        }\r\n                      >\r\n                        Traits\r\n                      </p>\r\n                    </li>\r\n                  </ul>\r\n\r\n                  {/* <div className=\"nft-reward\">\r\n                  <div className=\"icon\">\r\n                    <img src={coinIcon} alt=\"coinIcon\" />\r\n                  </div>\r\n                  <div className=\"rewards\">\r\n                    <p>Basic Battle Rewards:</p>\r\n                    <div className=\"reward-data\">\r\n                      <div className=\"reward\">\r\n                        <span>Win:</span>\r\n                        <span>+6</span>\r\n                      </div>\r\n                      <div className=\"reward\">\r\n                        <span>Draw:</span>\r\n                        <span>+2</span>\r\n                      </div>\r\n                      <div className=\"reward\">\r\n                        <span>Lose:</span>\r\n                        <span>+1</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div> */}\r\n                  {selectedTabIndex === 1 ? (\r\n                    <div className=\"detail-card-flex\">\r\n                      {nftDetail &&\r\n                        nftDetail.properties.map((property) => {\r\n                          return (\r\n                            <div className=\"detail-card\">\r\n                              <p className=\"type\">{property.type}</p>\r\n                              <p className=\"value\">{property.value}</p>\r\n                              <p className=\"percentage\">\r\n                                {(\r\n                                  (property.valueTotal / property.typeTotal) *\r\n                                  100\r\n                                ).toFixed(1)}\r\n                                % have this trait\r\n                              </p>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                    </div>\r\n                  ) : (\r\n                    <>\r\n                      <div className=\"nft-stats\">\r\n                        <div className=\"stat\">\r\n                          {/* <img src={Icon} alt=\"icon\" /> */}\r\n                          <p>Win Bonus</p>\r\n                        </div>\r\n                        <p>\r\n                          {nftDetail &&\r\n                            (nftDetail.type == \"common\"\r\n                              ? \"0.25\"\r\n                              : nftDetail.type == \"rare\"\r\n                              ? \"0.5\"\r\n                              : nftDetail.type == \"epic\"\r\n                              ? \"0.75\"\r\n                              : \"1.0\")}\r\n                        </p>\r\n                      </div>\r\n                      <div className=\"nft-stats\">\r\n                        <div className=\"stat\">\r\n                          {/* <img src={SwordIcon} alt=\"icon\" /> */}\r\n                          <p>GHSP Battles</p>\r\n                        </div>\r\n                        <p>#/Infinite</p>\r\n                      </div>\r\n                      <div className=\"nft-stats\">\r\n                        <div className=\"stat\">\r\n                          {/* <img src={SwordIcon} alt=\"icon\" /> */}\r\n                          <p>Daily GHSP Battles</p>\r\n                        </div>\r\n                        <p>\r\n                          {nftDetail &&\r\n                            (nftDetail.type == \"common\"\r\n                              ? \"5\"\r\n                              : nftDetail.type == \"rare\"\r\n                              ? \"10\"\r\n                              : nftDetail.type == \"epic\"\r\n                              ? \"15\"\r\n                              : \"20\")}\r\n                        </p>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n                <div className=\"nft-price\">\r\n                  <h1>\r\n                    {nftDetail && nftDetail.price}{\" \"}\r\n                    {nftDetail?.currency?.toUpperCase()}\r\n                  </h1>\r\n                  {/* <p>{nftDetail && nftDetail.price} USD</p> */}\r\n                </div>\r\n                {nftDetail && walletAddress === nftDetail.walletAddress ? (\r\n                  <div className=\"buy-btn\">\r\n                    <a\r\n                      onClick={(e) => {\r\n                        if (nftDetail.nftOnSale) {\r\n                          cancelNft();\r\n                        } else {\r\n                          sellNft();\r\n                        }\r\n                      }}\r\n                    >\r\n                      {nftDetail.nftOnSale ? \"CANCEL\" : \"SELL\"}\r\n                    </a>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"buy-btn\">\r\n                    <a\r\n                      // href=\"/\"\r\n                      // onClick={buyNFT}\r\n                      onClick={changeOwner}\r\n                    >\r\n                      BUY NOW\r\n                    </a>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      ) : (\r\n        <h1 style={{ marginTop: \"40px\", textAlign: \"center\" }}>No NFT found</h1>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NFTdetail;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\Header.js",["137","138","139","140"],"import React, { useEffect, useState } from \"react\";\r\nimport { NavLink, Link } from \"react-router-dom\";\r\nimport logo from \"../assets/img/logo.6eaa2fdb.png\";\r\nimport \"./header.css\";\r\nimport { NotificationManager } from \"react-notifications\";\r\n\r\nimport { loadWeb3, connectWallet, getCurrentWallet } from \"../core/web3\";\r\nimport axios from \"axios\";\r\nimport { BASEURL } from \"../utils/Utils\";\r\n\r\nconst Header = ({ setShowModal, setWalletAddress }) => {\r\n  const [navActive, isnavActive] = useState(false);\r\n  const [curWallet, setCurWallet] = useState(\"\");\r\n\r\n  const onConnectWallet = async () => {\r\n    if (curWallet !== \"\") {\r\n      return;\r\n    }\r\n    await loadWeb3();\r\n    let res = await connectWallet();\r\n    setCurWallet(res.address);\r\n    // console.log(res.address);\r\n    setWalletAddress(res.address);\r\n  };\r\n\r\n  const saveUser = (e) => {\r\n    axios\r\n      .post(BASEURL + \"/user/save\", {\r\n        // walletAddress: curWallet,\r\n        walletAddress: curWallet,\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n        //NotificationManager.success(\"User Created Successfully\");\r\n      })\r\n      .catch((e) => {\r\n        if (e.response?.status !== 400) {\r\n          NotificationManager.error(e.response.data.message);\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (curWallet) {\r\n      saveUser();\r\n    }\r\n  }, [curWallet]);\r\n\r\n  const openModal = (e) => {\r\n    // console.log(\"hwllo\");\r\n    e.preventDefault();\r\n    // setShowModal((prev) => !prev);\r\n\r\n    onConnectWallet();\r\n  };\r\n\r\n  const getWallet = async () => {\r\n    let res = await getCurrentWallet();\r\n    if (res.success) {\r\n      // console.log(res.account);\r\n      setCurWallet(res.account);\r\n      // setWalletAddress(res.account);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getWallet();\r\n  });\r\n\r\n  return (\r\n    <header>\r\n      <div className=\"container\">\r\n        <Link to=\"/\">\r\n          <div className=\"logo\">\r\n            <img src={logo} alt=\"logo\" />\r\n          </div>\r\n        </Link>\r\n        <div className={navActive ? \"links nav-active\" : \"links\"}>\r\n          <ul className=\"navigations\">\r\n            <li>\r\n              <a\r\n                target=\"_blank\"\r\n                href=\"https://ghospers.com/\"\r\n                activeclassname=\"active\"\r\n              >\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/\" activeclassname=\"active\">\r\n                Marketplace\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <a\r\n                target=\"_blank\"\r\n                href=\"https://staking.ghospers.com/\"\r\n                activeclassname=\"active\"\r\n              >\r\n                Staking\r\n              </a>\r\n            </li>\r\n            {/* <li>\r\n\t\t\t\t\t\t\t<NavLink to=\"/contact\" activeclassname=\"active\">\r\n\t\t\t\t\t\t\t\tContact Us\r\n\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t</li> */}\r\n          </ul>\r\n          <div className=\"nav-btn\">\r\n            <a onClick={openModal}>\r\n              {curWallet === \"\"\r\n                ? \"Connect Wallet\"\r\n                : curWallet.slice(0, 5) + \"...\" + curWallet.slice(-4)}\r\n            </a>\r\n\r\n            {curWallet && <NavLink to=\"/profile\">Profile</NavLink>}\r\n          </div>\r\n        </div>\r\n        <div className=\"hamburger\" onClick={() => isnavActive(!navActive)}>\r\n          <div className=\"line1\"></div>\r\n          <div className=\"line2\"></div>\r\n          <div className=\"line3\"></div>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\MultiRangeInput.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\core\\web3.js",["141"],"\r\nimport { NotificationManager } from 'react-notifications';\r\nimport Web3 from 'web3';\r\n\r\nconst busdAbi = require('./abi/busd.json');\r\nconst ghospAbi = require('./abi/ghosp.json');\r\nconst marketAbi = require('./abi/marketplace.json');\r\nconst minterAbi = require('./abi/minter.json');\r\n\r\n\r\nconst MINTER_ADDRESS = \"0xfA9bB2B3119A7b9d40235F9e92052AB6Fd6DaD12\"\r\nconst MARKETPLACE_ADDRESS = \"0xC4d193F224Ec31c7BDc959D2D1b9Eb9d16E97A78\"\r\nconst GHOSP_ADDRESS = \"0x91c70ba82a8ed676c5a09ce1cd94cc18923e8371\"\r\nconst BUSD_ADDRESS = \"0x8301f2213c0eed49a7e28ae4c3e91722919b8b47\"   // Faucet Token\r\nlet market_contract = null;\r\nlet minter_contract = null;\r\nlet ghosp_contract = null;\r\nlet busd_contract = null;\r\n\r\nconst NETWORK_ID = 97;\r\n\r\nconst checkConnectedNetwork = async (chainId) => {\r\n    if (chainId != NETWORK_ID) {\r\n        let wallet = await getCurrentWallet();\r\n        if (wallet.success) {\r\n            NotificationManager.error(\"Please select BSC network\");\r\n        }\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const loadWeb3 = async () => {\r\n    if (window.ethereum) {\r\n        window.web3 = new Web3(window.ethereum);\r\n        window.web3.eth.handleRevert = true;\r\n    } else if (window.web3) {\r\n        window.web3 = new Web3(window.web3.currentProvider);\r\n        window.web3.eth.handleRevert = true\r\n    } else {\r\n        window.alert(\r\n            \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n        );\r\n        return;\r\n    }\r\n\r\n    minter_contract = new window.web3.eth.Contract(minterAbi, MINTER_ADDRESS);\r\n    market_contract = new window.web3.eth.Contract(marketAbi, MARKETPLACE_ADDRESS);\r\n    ghosp_contract = new window.web3.eth.Contract(ghospAbi, GHOSP_ADDRESS);\r\n    busd_contract = new window.web3.eth.Contract(busdAbi, BUSD_ADDRESS);\r\n\r\n    window.ethereum.on('chainChanged', function (chainId) {\r\n        console.log('chain chainged with this chain id : ', chainId);\r\n        checkConnectedNetwork(chainId);\r\n    });\r\n};\r\n\r\n\r\nexport const connectWallet = async () => {\r\n    // const chainId = await getConnectedNetworkId();\r\n    // if (checkConnectedNetwork(chainId) == false) {\r\n    //     return  {\r\n    //         address: \"\",\r\n    //         status: \"Network connection error\",\r\n    //         res: 3,\r\n    //     };\r\n    // }\r\n\r\n    if (window.ethereum) {\r\n        try {\r\n            const addressArray = await window.ethereum.request({\r\n                method: \"eth_requestAccounts\",\r\n            });\r\n            const obj = {\r\n                status: \"Metamask successfuly connected.\",\r\n                address: addressArray[0],\r\n            };\r\n            return obj;\r\n        } catch (err) {\r\n            return {\r\n                address: \"\",\r\n                status: \"Something went wrong: \" + err.message,\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        return {\r\n            address: \"\",\r\n            status: (\r\n                <span>\r\n                    <p>\r\n                        {\" \"}\r\n                        🦊{\" \"}\r\n                        <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\r\n                            You must install Metamask, a virtual BSC wallet, in your\r\n                            browser.\r\n                        </a>\r\n                    </p>\r\n                </span>\r\n            ),\r\n        };\r\n    }\r\n};\r\n\r\nexport const getConnectedNetworkId = async () => {\r\n    if (window.web3 && window.web3.eth) {\r\n        return await window.web3.eth.getChainId();\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\nexport const getCurrentWallet = async () => {\r\n    const web3 = window.web3;\r\n    try {\r\n        let accounts = await web3.eth.getAccounts();\r\n        let accountBalance = await web3.eth.getBalance(accounts[0]);\r\n        accountBalance = web3.utils.fromWei(accountBalance);\r\n        return {\r\n            success: true,\r\n            account: accounts[0],\r\n            balance: accountBalance\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            result: \"Something went wrong: \" + error.message\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const buyNFTWithBNB = async (tokenID, amount) => {\r\n\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        let bnAmount = window.web3.utils.toWei(\"\" + amount);\r\n        await market_contract.methods.buyNFTWithBNB(tokenID, wallet.account).send({ from: wallet.account, value: bnAmount });\r\n    } catch (error) {\r\n        console.log('buyNFTWithBNB error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const buyNFTWithGHSP = async (tokenID, amount) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        let ghspAmount = window.web3.utils.toWei(\"\" + amount, 'ether');\r\n        await ghosp_contract.methods.approve(MARKETPLACE_ADDRESS, ghspAmount).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log(\"approve failed : \", error);\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        await market_contract.methods.buyNFTWithGHSP(tokenID, wallet.account).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('buyNFTWithGHSP error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const buyNFTWithBUSD = async (tokenID, amount) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        let busdAmount = window.web3.utils.toWei(\"\" + amount, 'ether');\r\n        await busd_contract.methods.approve(MARKETPLACE_ADDRESS, busdAmount).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log(\"approve failed : \", error);\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        await market_contract.methods.buyNFTWithBUSD(tokenID, wallet.account).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('buyNFTWithBUSD error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const removeTokenFromSale = async (tokenID) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        await market_contract.methods.removeTokenFromSale(tokenID, wallet.account).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('removeTokenFromSale error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const putTokenOnSale = async (tokenID, price, saleTokenType) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        await minter_contract.methods.setApprovalForAll(MARKETPLACE_ADDRESS, true).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('setApprovalForAll error', error);\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        let bnPrice = window.web3.utils.toWei(\"\" + price);\r\n        await market_contract.methods.putTokenOnSale(tokenID, bnPrice, saleTokenType).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('putTokenOnSale error', error);\r\n        return false;\r\n    }\r\n\r\n    console.log('putTokenOnSale ok');\r\n\r\n    return true;\r\n}\r\n\r\nexport const getSaleItems = async (tokenIds) => {\r\n\r\n    let saleItems = {};\r\n    for (let i = 0; i < tokenIds.length; i++) {\r\n        let item = await market_contract.methods.saleItems(tokenIds[i]).call();\r\n        saleItems[tokenIds[i]] = item;\r\n    }\r\n\r\n    console.log(\"Sale Items : \", saleItems);\r\n\r\n    return saleItems;\r\n}\r\n\r\nexport const createNFT = async (tokenURI) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return null;\r\n    }\r\n\r\n    try {\r\n        let tokenID = 0;\r\n        let tx = await minter_contract.methods.createNFT(tokenURI).send({ from: wallet.account });\r\n        tokenID = tx.events.Transfer.returnValues.tokenId;\r\n        return { tokenId: tokenID, wallet: wallet.account };\r\n    } catch (error) {\r\n        console.log('createNFT error', error);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nexport const getCreator = async (tokenID) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        await minter_contract.methods.getCreator(tokenID).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('getCreator error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const getTokenIds = async () => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return [];\r\n    }\r\n\r\n    try {\r\n        let tokenIds = await minter_contract.methods.getTokenIds(wallet.account).call();\r\n        return tokenIds;\r\n    } catch (error) {\r\n        console.log('getTokenIds error', error);\r\n        return [];\r\n    }\r\n}","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\utils\\Utils.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\loader\\Loader.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\Profile.js",["142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161"],"import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport MultiRangeInput from \"../../components/MultiRangeInput\";\r\nimport { BASEURL } from \"../../utils/Utils\";\r\nimport LeftIcon from \"../../assets/img/lefticon.png\";\r\nimport RightIcon from \"../../assets/img/righticon.png\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport \"./profile.css\";\r\nimport ProfileImg from \"../../assets/img/card1.png\";\r\nimport UpdateModal from \"./updateModal/UpdateModal\";\r\nimport Header from \"../../components/Header\";\r\nimport Loader from \"../../components/loader/Loader\";\r\nimport Accordian from \"../../components/accordian/Accordian\";\r\nimport LoaderModal from \"../../components/loaderModal/LoaderModal\";\r\nimport {\r\n  loadWeb3,\r\n  connectWallet,\r\n  putTokenOnSale,\r\n  removeTokenFromSale,\r\n} from \"../../core/web3\";\r\n\r\nfunction Profile() {\r\n  const navigate = useNavigate();\r\n\r\n  const [typeArray, setTypeArray] = useState([\r\n    \"common\",\r\n    \"rare\",\r\n    \"epic\",\r\n    \"legendary\",\r\n  ]);\r\n\r\n  const loadNfts = async (e) => {\r\n    setIsLoading(true);\r\n\r\n    axios\r\n      .post(BASEURL + \"/nft/all/\", {\r\n        min,\r\n        max,\r\n        walletAddress,\r\n        currency,\r\n        minlevel,\r\n        maxlevel,\r\n        type: selectedType,\r\n      })\r\n      .then((response) => {\r\n        setTotalRecords(response.data.data[1].totalRecords);\r\n        setNftsArray(response.data.data[0]);\r\n        setIsLoading(false);\r\n\r\n        console.log(\"111111111111\", response.data.data[0]);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  const [sidebar, setSidebar] = useState(false);\r\n  const openSidebar = (e) => {\r\n    console.log(\"sidebar\");\r\n    e.preventDefault();\r\n    setSidebar((prev) => !prev);\r\n  };\r\n  const onClickItem = async (tokenID) => {\r\n    setSampleNFTTokenID(tokenID);\r\n  };\r\n\r\n  const clearAll = (e) => {\r\n    e.preventDefault();\r\n    setSelectedType(null);\r\n    setMinlevel(0);\r\n    setMax(null);\r\n    setMin(null);\r\n    setMaxlevel(100);\r\n  };\r\n\r\n  const [sampleNFTTokenID, setSampleNFTTokenID] = useState(null);\r\n  const [tokenIds, setTokenIds] = useState([1, 2, 3, 5]);\r\n  const [saleItems, setSaleItems] = useState([]);\r\n  const [nftsArray, setNftsArray] = useState(null);\r\n  const [page, setPage] = useState(1);\r\n  const [size, setSize] = useState(6);\r\n  const [totalRecords, setTotalRecords] = useState(null);\r\n  //   filters\r\n  const [min, setMin] = useState(null);\r\n  const [minlevel, setMinlevel] = useState(0);\r\n  const [maxlevel, setMaxlevel] = useState(100);\r\n  const [currency, setCurrency] = useState(null);\r\n\r\n  const [selectedType, setSelectedType] = useState(null);\r\n  const [max, setMax] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [walletAddress, setWalletAddress] = useState(\"\");\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [userDetails, setUserDetails] = useState(null);\r\n  const [properties, setProperties] = useState(null);\r\n  const [selectedProperties, setSelectedProperties] = useState([]);\r\n  const [singleSelectedProperty, setSingleSelectedProperty] = useState(null);\r\n  const [showLoadingModal, setShowLoadingModal] = useState(false);\r\n  useEffect(() => {\r\n    if (walletAddress) {\r\n      loadNfts();\r\n    }\r\n    // updateTokenIds();\r\n  }, [\r\n    min,\r\n    max,\r\n    page,\r\n    size,\r\n    minlevel,\r\n    currency,\r\n    selectedType,\r\n    maxlevel,\r\n    walletAddress,\r\n    selectedProperties,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      singleSelectedProperty &&\r\n      singleSelectedProperty.values &&\r\n      singleSelectedProperty.type\r\n    ) {\r\n      var index = selectedProperties.findIndex(\r\n        (x) => x.type === singleSelectedProperty.type\r\n      );\r\n      if (index !== -1) {\r\n        setSelectedProperties((prev) =>\r\n          Object.values({\r\n            ...prev,\r\n            [index]: {\r\n              ...prev[index],\r\n              values: [...singleSelectedProperty.values],\r\n            },\r\n          })\r\n        );\r\n      } else {\r\n        setSelectedProperties((prev) => [...prev, singleSelectedProperty]);\r\n      }\r\n      console.log(selectedProperties);\r\n    }\r\n  }, [singleSelectedProperty]);\r\n\r\n  var { address } = useParams();\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    if (address) {\r\n      setWalletAddress(address);\r\n      setIsLoading(false);\r\n    } else {\r\n      const initWeb3 = async () => {\r\n        await loadWeb3();\r\n        let res = await connectWallet();\r\n        setWalletAddress(res.address);\r\n        setIsLoading(false);\r\n      };\r\n      initWeb3();\r\n    }\r\n\r\n    loadProperties();\r\n    if (walletAddress) {\r\n      loadUserDetails();\r\n    }\r\n  }, [walletAddress]);\r\n\r\n  const loadUserDetails = () => {\r\n    axios\r\n      .post(BASEURL + \"/user/get-user\", {\r\n        walletAddress,\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data.data);\r\n        setUserDetails(response.data.data);\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n  const loadProperties = () => {\r\n    axios\r\n      .get(BASEURL + \"/property/all\")\r\n      .then((response) => {\r\n        setProperties(response.data.data);\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n\r\n  const cancelNft = async (e, item) => {\r\n    e.stopPropagation();\r\n    const nftId = item._id;\r\n    setShowLoadingModal(true);\r\n\r\n    removeTokenFromSale(item.tokenId);\r\n    axios\r\n      .put(`${BASEURL}/nft/cancel/${nftId}`, {\r\n        walletAddress,\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n        setShowLoadingModal(false);\r\n        loadNfts();\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n        setShowLoadingModal(false);\r\n      });\r\n  };\r\n\r\n  const sellNft = async (e, item) => {\r\n    e.stopPropagation();\r\n    setShowLoadingModal(true);\r\n\r\n    let tokenType = 0;\r\n    if (item.currency == \"ghsp\") {\r\n      tokenType = 0;\r\n    } else if (item.currency == \"busd\") {\r\n      tokenType = 1;\r\n    } else {\r\n      tokenType = 2;\r\n    }\r\n    const nftId = item._id;\r\n    await putTokenOnSale(item.tokenId, item.price, tokenType);\r\n\r\n    axios\r\n      .put(`${BASEURL}/nft/sell/${nftId}`, {\r\n        walletAddress,\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n        setShowLoadingModal(false);\r\n        loadNfts();\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n        setShowLoadingModal(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header setShowModal={setShowModal} setWalletAddress={setWalletAddress} />\r\n      <div className=\"profile-content\">\r\n        {showLoadingModal && <LoaderModal />}\r\n\r\n        <div className=\"profile-back-filter\">\r\n          <button\r\n            className=\"custom-btn back-btn\"\r\n            onClick={() => {\r\n              navigate(\"/\");\r\n            }}\r\n          >\r\n            Back to home\r\n          </button>\r\n          <div className=\"fitermob profile-filters\">\r\n            <a className=\"filter-btn\" onClick={openSidebar}>\r\n              Filters\r\n            </a>\r\n          </div>\r\n        </div>\r\n        {isLoading ? (\r\n          <Loader />\r\n        ) : !isLoading && walletAddress ? (\r\n          <div className=\"profile-flex\">\r\n            {userDetails && userDetails.facebook ? (\r\n              <div className=\"profile-div\">\r\n                <div className=\"red-div\">\r\n                  <img src={userDetails && `${userDetails.imageUrl}`} alt=\"\" />\r\n                </div>\r\n                {walletAddress && walletAddress == userDetails.walletAddress && (\r\n                  <button\r\n                    className=\"custom-btn\"\r\n                    onClick={() => setShowModal(true)}\r\n                  >\r\n                    Edit Profile\r\n                  </button>\r\n                )}\r\n                <h2>{userDetails && userDetails.name}</h2>\r\n                <p>{userDetails && userDetails.walletAddress}</p>{\" \"}\r\n                <div className=\"profile-about\">\r\n                  <p>About me</p>\r\n                  <p>{userDetails && userDetails.introduction}</p>\r\n                  <div className=\"profile-social\">\r\n                    <a\r\n                      target=\"_blank\"\r\n                      href={userDetails && userDetails.facebook}\r\n                    >\r\n                      <div className=\"white-round-div\">\r\n                        <i className=\"fa-brands fa-facebook-f\"></i>\r\n                      </div>\r\n                    </a>\r\n                    <a\r\n                      target=\"_blank\"\r\n                      href={userDetails && userDetails.instagram}\r\n                    >\r\n                      <div className=\"white-round-div\">\r\n                        <i className=\"fa-brands fa-instagram\"></i>\r\n                      </div>\r\n                    </a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"overlay-blue\">\r\n                <div>\r\n                  <h3>Profile is not updated</h3>\r\n                  <button\r\n                    className=\"custom-btn\"\r\n                    onClick={() => setShowModal(true)}\r\n                  >\r\n                    Edit Profile\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            <div\r\n              className=\"profile-nft-div\"\r\n              style={{ marginLeft: \"60px\", width: \"100%\" }}\r\n            >\r\n              <div className=\"nft-collections\">\r\n                {isLoading ? (\r\n                  <Loader />\r\n                ) : (\r\n                  nftsArray &&\r\n                  nftsArray.map((elem, i) => {\r\n                    return (\r\n                      <div\r\n                        className=\"card\"\r\n                        key={i}\r\n                        onClick={() => {\r\n                          onClickItem(i);\r\n                          navigate(\r\n                            `/trending/${elem._id}/tokenid/${elem.tokenId}`\r\n                          );\r\n                        }}\r\n                      >\r\n                        <div className=\"card-img\">\r\n                          <img src={`${elem.imageUrl}`} alt=\"Card1\" />\r\n                        </div>\r\n                        <div className=\"card-title\">\r\n                          <h4>\r\n                            {elem.title}\r\n                            {Number(sampleNFTTokenID) === Number(i) ? (\r\n                              <span>&#10003;</span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}{\" \"}\r\n                            {saleItems[i] && saleItems[i].onSale === true\r\n                              ? \"OnSale\"\r\n                              : \"\"}\r\n                          </h4>\r\n                          {/* <span>{elem.description}</span> */}\r\n                          {walletAddress &&\r\n                          walletAddress.toLowerCase() ==\r\n                            elem?.walletAddress.toLowerCase() ? (\r\n                            <button\r\n                              className=\"custom-btn\"\r\n                              onClick={(e) => {\r\n                                if (elem.nftOnSale) {\r\n                                  cancelNft(e, elem);\r\n                                } else {\r\n                                  sellNft(e, elem);\r\n                                }\r\n                              }}\r\n                            >\r\n                              {elem.nftOnSale ? \"CANCEL\" : \"SELL\"}\r\n                            </button>\r\n                          ) : (\r\n                            <button\r\n                              className=\"custom-btn\"\r\n                              onClick={() =>\r\n                                navigate(\r\n                                  `/trending/${elem._id}/tokenid/${elem.tokenId}`\r\n                                )\r\n                              }\r\n                            >\r\n                              OPEN\r\n                            </button>\r\n                          )}\r\n                          {/* <button\r\n                            className=\"custom-btn\"\r\n                            onClick={(e) => {\r\n                              if (elem.nftOnSale) {\r\n                                cancelNft(elem);\r\n                              } else {\r\n                                sellNft(elem);\r\n                              }\r\n                            }}\r\n                          >\r\n                            {elem.nftOnSale ? \"CANCEL\" : \"SELL\"}\r\n                          </button> */}\r\n                        </div>\r\n                        <div className=\"card-price\">\r\n                          {/* <div>\r\n                  <span>gTHC</span>\r\n                  <p>21/219</p>\r\n                </div> */}\r\n                          <div>\r\n                            <span>Price</span>\r\n                            <p>\r\n                              {elem.price}&nbsp;{elem.currency?.toUpperCase()}\r\n                            </p>\r\n                            <small>${elem.price} USD</small>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })\r\n                )}\r\n\r\n                {nftsArray && nftsArray.length > 0 && !isLoading ? (\r\n                  <div className=\"pagination-wrap\">\r\n                    <div className=\"pagination\">\r\n                      <div\r\n                        className=\"icon\"\r\n                        onClick={() => {\r\n                          if (page != 1) {\r\n                            setPage(page - 1);\r\n                            window.scrollTo(0, 0);\r\n                          }\r\n                        }}\r\n                      >\r\n                        <a>\r\n                          <img src={LeftIcon} alt=\"\" />\r\n                        </a>\r\n                      </div>\r\n                      <div className=\"number\">\r\n                        <span>\r\n                          {\" \"}\r\n                          {page * size > totalRecords\r\n                            ? totalRecords\r\n                            : size * page}\r\n                        </span>\r\n                        of {totalRecords && totalRecords}\r\n                      </div>\r\n                      <div\r\n                        className=\"icon\"\r\n                        onClick={() => {\r\n                          if (page * size < totalRecords) {\r\n                            window.scrollTo(0, 0);\r\n                            setPage(page + 1);\r\n                          }\r\n                        }}\r\n                      >\r\n                        <a>\r\n                          <img src={RightIcon} alt=\"\" />\r\n                        </a>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <div\r\n                    style={{\r\n                      width: \"100%\",\r\n                      marginTop: \"20px\",\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    <h2>No Data Found!</h2>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n            <div className={sidebar ? \"sidebar sidebar-active\" : \"sidebar\"}>\r\n              <div className=\"filter\">\r\n                <h4>FILTERS</h4>\r\n                <a onClick={clearAll}>CLEAR ALL</a>\r\n              </div>\r\n              {/* <div className=\"hero\">\r\n                <h4>GHOSPERS</h4>\r\n                <p>No Ghosper selected</p>\r\n                <a onClick={loadNfts}>Choose Ghospers</a>\r\n              </div> */}\r\n              <div className=\"hero\">\r\n                <h4>GHOSPERS</h4>\r\n                <div className=\"checkbox\">\r\n                  {typeArray.map((t) => {\r\n                    return (\r\n                      <label key={t} className=\"checkbox-wrap\">\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          checked={selectedType === t}\r\n                          onChange={() => {\r\n                            if (selectedType === t) {\r\n                              setSelectedType(null);\r\n                            } else setSelectedType(t);\r\n                          }}\r\n                        />\r\n                        <span className=\"checkmark\"></span>\r\n                        {t}\r\n                      </label>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </div>\r\n              <div className=\"hero\">\r\n                <h4>PRICE</h4>\r\n                <div className=\"price\">\r\n                  <div className=\"price-inpt\">\r\n                    <input\r\n                      type=\"number\"\r\n                      onKeyDown={(evt) =>\r\n                        evt.key === \"e\" && evt.preventDefault()\r\n                      }\r\n                      onChange={(e) => {\r\n                        if (e.target.value < 0) {\r\n                          setMin(0);\r\n                        } else if (e.target.value > 100000000) {\r\n                          setMin(100000000);\r\n                        } else setMin(e.target.value);\r\n                      }}\r\n                      placeholder=\"Min\"\r\n                    />\r\n                  </div>\r\n                  <span></span>\r\n                  <div className=\"price-inpt\">\r\n                    <input\r\n                      placeholder=\"Max\"\r\n                      type=\"number\"\r\n                      onKeyDown={(evt) =>\r\n                        evt.key === \"e\" && evt.preventDefault()\r\n                      }\r\n                      onChange={(e) => {\r\n                        if (e.target.value < 0) {\r\n                          setMax(0);\r\n                        } else if (e.target.value > 100000000) {\r\n                          setMax(100000000);\r\n                        } else setMax(e.target.value);\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"hero\">\r\n                <h4>Currency</h4>\r\n                <div className=\"levels\">\r\n                  <select\r\n                    onChange={(e) => setCurrency(e.target.value)}\r\n                    value={currency}\r\n                  >\r\n                    <option selected>Select Currency</option>\r\n                    <option value=\"ghsp\">GHSP</option>\r\n                    <option value=\"bnb\">BNB</option>\r\n                    <option value=\"busd\">BUSD</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n              <div className=\"hero\">\r\n                <h4>LEVEL</h4>\r\n                <div className=\"levels\">\r\n                  <MultiRangeInput\r\n                    min={0}\r\n                    max={20}\r\n                    onChange={({ min, max }) => {\r\n                      setMinlevel(min);\r\n                      setMaxlevel(max);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n              {properties &&\r\n                properties.map((data, index) => {\r\n                  return (\r\n                    <div className=\"hero\" key={index}>\r\n                      <Accordian\r\n                        setSingleSelectedProperty={setSingleSelectedProperty}\r\n                        title={data.type}\r\n                        content={data.values}\r\n                      />\r\n                    </div>\r\n                  );\r\n                })}\r\n              {/* <div className=\"hero skin\">\r\n              <h4>SKINS</h4>\r\n              <p>No skin selected</p>\r\n              <a href=\"/\">Choose Skin</a>\r\n            </div> */}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <h2 style={{ textAlign: \"center\", marginTop: \"40px\" }}>\r\n            You are not registered with Ghospers\r\n          </h2>\r\n        )}\r\n        {userDetails && (\r\n          <UpdateModal\r\n            setUserDetails={setUserDetails}\r\n            userDetails={userDetails}\r\n            walletAddress={walletAddress}\r\n            showModal={showModal}\r\n            setShowModal={setShowModal}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\IPFSUtils.js",["162"],"import { create, urlSource } from 'ipfs-http-client'\r\nimport axios from 'axios';\r\n//import IPFS from 'nano-ipfs-store'\r\nlet all = require('it-all')\r\n\r\nlet client = create('https://ipfs.infura.io:5001/api/v0');\r\n\r\nconst uploadFileToIPFS = async (files) => {\r\n    console.log(\"enter uploadFileToIPFS\", files);\r\n    let lists = [];\r\n    try {\r\n        for (let i = 0; i < files.length; i++) {\r\n            const added = await client.add(files[i])\r\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n            console.log(\"[GD], FileName = \", files[i].name, \", Hash: \", added.path)\r\n            lists.push(url)\r\n        }\r\n        return lists\r\n    } catch (err) {\r\n        console.log(\"Error uploading file: \", err)\r\n        return []\r\n    }\r\n}\r\n\r\nconst uploadFolderToIPFS = async (files) => {\r\n    try {\r\n        /*let fileObjectsArray = Array.from(files).map((file) => {\r\n            return {\r\n                path: file.name,\r\n                content: file\r\n            }\r\n        })*/\r\n        const results = await all(\r\n            client.addAll(files, { wrapWithDirectory: true })\r\n        )\r\n        const length = results.length\r\n        const filesHash = results[length - 1].cid._baseCache.get('z')\r\n        const filesUrl = 'https://ipfs.infura.io/ipfs/' + filesHash\r\n        return filesUrl\r\n    } catch (err) {\r\n        console.log(\"[GD], Error uploading file: \", err)\r\n        return \"\"\r\n    }\r\n}\r\n\r\nconst uploadTextToIPFS = async (data) => {\r\n    try {\r\n        let doc = JSON.stringify(data)\r\n        const added = await client.add(doc)\r\n        const filesUrl = 'https://ipfs.infura.io/ipfs/' + added.path;\r\n        return filesUrl\r\n    } catch (err) {\r\n        //console.log(\"Error: \", err)\r\n        return null\r\n    }\r\n}\r\n\r\nconst loadFromIPFS = async (url) => {\r\n    let res = await axios.get(`https://ipfs.infura.io/ipfs/${url}`)\r\n    return res;\r\n}\r\n\r\n\r\nconst IPFSUtils = {\r\n    uploadFileToIPFS,\r\n    uploadFolderToIPFS,\r\n    uploadTextToIPFS,\r\n    loadFromIPFS\r\n}\r\n\r\n\r\nexport default IPFSUtils;","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\updateModal\\UpdateModal.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\accordian\\Accordian.js",["163"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./accordian.css\";\r\nfunction Accordian({ title, content, setSingleSelectedProperty }) {\r\n  const [contentArray] = useState(content);\r\n  const [searchInput, setsearchInput] = useState(\"\");\r\n  const [resultsArray, setResultsArray] = useState(contentArray);\r\n  const [showContent, setShowContent] = useState(false);\r\n  const [selectedProperties, setSelectedProperties] = useState({\r\n    type: \"\",\r\n    values: [],\r\n  });\r\n\r\n  const onChange = (e) => {\r\n    setsearchInput(e.target.value);\r\n    if (e.target.value === \"\") {\r\n      setResultsArray(contentArray);\r\n    } else {\r\n      var resultArray = contentArray.filter((text) =>\r\n        text.includes(searchInput.toLowerCase())\r\n      );\r\n      setResultsArray(resultArray);\r\n    }\r\n  };\r\n\r\n  const alreadyPresent = (data) => {\r\n    return selectedProperties && selectedProperties.values.includes(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSingleSelectedProperty(selectedProperties);\r\n  }, [selectedProperties]);\r\n\r\n  return (\r\n    <div className=\"accordian-div\">\r\n      <div\r\n        className=\"accordian-header\"\r\n        onClick={() => setShowContent((prev) => !prev)}\r\n      >\r\n        <h4>{title}</h4>\r\n        {showContent ? (\r\n          <i\r\n            className=\"fa-solid fa-caret-up\"\r\n            onClick={() => setShowContent(false)}\r\n          ></i>\r\n        ) : (\r\n          <i\r\n            className=\"fa-solid fa-caret-down\"\r\n            onClick={() => setShowContent(true)}\r\n          ></i>\r\n        )}\r\n      </div>\r\n      <div className=\"accordian-content\">\r\n        {showContent && (\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              className=\"select-search-input\"\r\n              placeholder=\"Search\"\r\n              value={searchInput}\r\n              onChange={onChange}\r\n            />\r\n            <ul>\r\n              <div className=\"checkbox\">\r\n                {resultsArray &&\r\n                  resultsArray.map((data, index) => {\r\n                    return (\r\n                      <label className=\"checkbox-wrap\" key={index}>\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          checked={\r\n                            selectedProperties &&\r\n                            selectedProperties.values.includes(data)\r\n                          }\r\n                          onChange={() => {\r\n                            if (alreadyPresent(data)) {\r\n                              var remainingValues =\r\n                                selectedProperties.values.filter(\r\n                                  (x) => x !== data\r\n                                );\r\n                              setSelectedProperties({\r\n                                type: title,\r\n                                values: remainingValues,\r\n                              });\r\n                            } else {\r\n                              setSelectedProperties((prev) => ({\r\n                                type: title,\r\n                                values: [...prev.values, data],\r\n                              }));\r\n                            }\r\n                          }}\r\n                        />\r\n                        <span className=\"checkmark\"></span>\r\n                        {data}\r\n                      </label>\r\n                    );\r\n                  })}\r\n              </div>\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Accordian;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\accordian\\AccordianData.js",[],["164","165"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\addPropertyModal.js\\AddPropertyModal.js",["166","167","168","169"],"import React, { Component, useEffect, useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport { BASEURL } from \"../../../utils/Utils\";\r\nimport \"./addPropertyModal.css\";\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction AddPropertyModal({\r\n  setShowModal,\r\n  showModal,\r\n  setProperties,\r\n  properties,\r\n}) {\r\n  console.log(showModal);\r\n  function closeModal() {\r\n    setShowModal(false);\r\n  }\r\n\r\n  const [rows, setRows] = useState([\r\n    {\r\n      type: \"\",\r\n      value: \"\",\r\n    },\r\n  ]);\r\n\r\n  const onChange = (e, index) => {\r\n    setRows((prev) =>\r\n      Object.values({\r\n        ...prev,\r\n        [index]: { ...prev[index], [e.target.name]: e.target.value },\r\n      })\r\n    );\r\n  };\r\n\r\n  const removeRow = (index) => {\r\n    console.log(index);\r\n    if (rows.length !== 1) {\r\n      console.log(rows);\r\n      console.log(rows[index]);\r\n      var rowsTemp = [...rows];\r\n      console.log(rowsTemp);\r\n      rowsTemp.splice(index, 1);\r\n      console.log(rowsTemp);\r\n      setRows(rowsTemp);\r\n    }\r\n  };\r\n\r\n  const AddRows = () => {\r\n    var rowsTemp = rows.filter((r) => r.type != \"\" && r.value != \"\");\r\n    setProperties(rowsTemp);\r\n    setShowModal(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(properties);\r\n    if (!properties) {\r\n      setRows([\r\n        {\r\n          type: \"\",\r\n          value: \"\",\r\n        },\r\n      ]);\r\n    }\r\n  }, [properties]);\r\n\r\n  return (\r\n    <div className=\"scrollable-modal\">\r\n      <Modal\r\n        isOpen={showModal}\r\n        shouldCloseOnOverlayClick={false}\r\n        // onAfterOpen={afterOpenModal}\r\n        onRequestClose={closeModal}\r\n        // style={customStyles}\r\n        // className=\"scrollable-modal\"\r\n        contentLabel=\"Example Modal\"\r\n      >\r\n        <div className=\"properties-modal-content\">\r\n          <h2>Add Properties </h2>\r\n          <div className=\"property-rows\">\r\n            {rows &&\r\n              rows.map((row, index) => {\r\n                return (\r\n                  <div key={index} className=\"inputs-div\">\r\n                    <div>\r\n                      <label htmlFor=\"\">Type</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"type\"\r\n                        value={row.type}\r\n                        onChange={(e) => onChange(e, index)}\r\n                        className=\"mint-input\"\r\n                        placeholder=\"Hair\"\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <label htmlFor=\"\">Value</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"value\"\r\n                        value={row.value}\r\n                        onChange={(e) => onChange(e, index)}\r\n                        className=\"mint-input\"\r\n                        placeholder=\"Blonde\"\r\n                      />\r\n                    </div>\r\n                    <button\r\n                      onClick={() => removeRow(index)}\r\n                      className=\"remove-btn\"\r\n                    >\r\n                      Remove\r\n                    </button>\r\n                  </div>\r\n                );\r\n              })}\r\n          </div>\r\n          <button\r\n            className=\"add-btn\"\r\n            onClick={() => {\r\n              setRows((prev) => [\r\n                ...prev,\r\n                {\r\n                  type: \"\",\r\n                  value: \"\",\r\n                },\r\n              ]);\r\n            }}\r\n          >\r\n            Add\r\n          </button>\r\n\r\n          <button onClick={AddRows}>Save</button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddPropertyModal;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\LoaderModal.js",["170","171"],"import React, { Component, useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport Loader from \"../../components/loader/Loader\";\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction LoaderModal() {\r\n  return (\r\n    <div className=\"\">\r\n      <Modal isOpen={true} contentLabel=\"Example Modal\">\r\n        <div style={{ width: \"400px\", margin: \"auto\" }}>\r\n          {/* <h2 style={{ textAlign: \"center\", marginTop: \"40px\" }}>Loading.. </h2> */}\r\n          <Loader />\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoaderModal;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\loaderModal\\LoaderModal.js",[],{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","severity":1,"message":"177","line":6,"column":19,"nodeType":"178","messageId":"179","endLine":6,"endColumn":24},{"ruleId":"176","severity":1,"message":"180","line":6,"column":26,"nodeType":"178","messageId":"179","endLine":6,"endColumn":33},{"ruleId":"176","severity":1,"message":"181","line":12,"column":3,"nodeType":"178","messageId":"179","endLine":12,"endColumn":19},{"ruleId":"176","severity":1,"message":"182","line":28,"column":10,"nodeType":"178","messageId":"179","endLine":28,"endColumn":17},{"ruleId":"176","severity":1,"message":"183","line":28,"column":19,"nodeType":"178","messageId":"179","endLine":28,"endColumn":29},{"ruleId":"176","severity":1,"message":"184","line":31,"column":16,"nodeType":"178","messageId":"179","endLine":31,"endColumn":23},{"ruleId":"176","severity":1,"message":"185","line":44,"column":21,"nodeType":"178","messageId":"179","endLine":44,"endColumn":33},{"ruleId":"176","severity":1,"message":"186","line":142,"column":9,"nodeType":"178","messageId":"179","endLine":142,"endColumn":16},{"ruleId":"176","severity":1,"message":"187","line":66,"column":9,"nodeType":"178","messageId":"179","endLine":66,"endColumn":15},{"ruleId":"176","severity":1,"message":"188","line":84,"column":16,"nodeType":"178","messageId":"179","endLine":84,"endColumn":23},{"ruleId":"189","severity":1,"message":"190","line":124,"column":6,"nodeType":"191","endLine":124,"endColumn":30,"suggestions":"192"},{"ruleId":"176","severity":1,"message":"193","line":126,"column":9,"nodeType":"178","messageId":"179","endLine":126,"endColumn":23},{"ruleId":"176","severity":1,"message":"186","line":167,"column":9,"nodeType":"178","messageId":"179","endLine":167,"endColumn":16},{"ruleId":"189","severity":1,"message":"194","line":174,"column":6,"nodeType":"191","endLine":184,"endColumn":4,"suggestions":"195"},{"ruleId":"196","severity":1,"message":"197","line":201,"column":11,"nodeType":"198","endLine":201,"endColumn":59},{"ruleId":"196","severity":1,"message":"197","line":209,"column":15,"nodeType":"198","endLine":209,"endColumn":37},{"ruleId":"199","severity":1,"message":"200","line":354,"column":68,"nodeType":"201","messageId":"202","endLine":354,"endColumn":70},{"ruleId":"199","severity":1,"message":"203","line":415,"column":38,"nodeType":"201","messageId":"202","endLine":415,"endColumn":40},{"ruleId":"196","severity":1,"message":"197","line":421,"column":27,"nodeType":"198","endLine":421,"endColumn":30},{"ruleId":"196","severity":1,"message":"197","line":443,"column":27,"nodeType":"198","endLine":443,"endColumn":30},{"ruleId":"176","severity":1,"message":"204","line":2,"column":16,"nodeType":"178","messageId":"179","endLine":2,"endColumn":24},{"ruleId":"176","severity":1,"message":"205","line":4,"column":8,"nodeType":"178","messageId":"179","endLine":4,"endColumn":14},{"ruleId":"176","severity":1,"message":"206","line":5,"column":8,"nodeType":"178","messageId":"179","endLine":5,"endColumn":16},{"ruleId":"176","severity":1,"message":"207","line":6,"column":8,"nodeType":"178","messageId":"179","endLine":6,"endColumn":12},{"ruleId":"176","severity":1,"message":"208","line":7,"column":8,"nodeType":"178","messageId":"179","endLine":7,"endColumn":14},{"ruleId":"176","severity":1,"message":"209","line":8,"column":8,"nodeType":"178","messageId":"179","endLine":8,"endColumn":17},{"ruleId":"199","severity":1,"message":"200","line":116,"column":30,"nodeType":"201","messageId":"202","endLine":116,"endColumn":32},{"ruleId":"199","severity":1,"message":"200","line":118,"column":37,"nodeType":"201","messageId":"202","endLine":118,"endColumn":39},{"ruleId":"199","severity":1,"message":"200","line":140,"column":28,"nodeType":"201","messageId":"202","endLine":140,"endColumn":30},{"ruleId":"199","severity":1,"message":"200","line":142,"column":35,"nodeType":"201","messageId":"202","endLine":142,"endColumn":37},{"ruleId":"199","severity":1,"message":"200","line":282,"column":45,"nodeType":"201","messageId":"202","endLine":282,"endColumn":47},{"ruleId":"199","severity":1,"message":"200","line":284,"column":48,"nodeType":"201","messageId":"202","endLine":284,"endColumn":50},{"ruleId":"199","severity":1,"message":"200","line":286,"column":48,"nodeType":"201","messageId":"202","endLine":286,"endColumn":50},{"ruleId":"199","severity":1,"message":"200","line":305,"column":45,"nodeType":"201","messageId":"202","endLine":305,"endColumn":47},{"ruleId":"199","severity":1,"message":"200","line":307,"column":48,"nodeType":"201","messageId":"202","endLine":307,"endColumn":50},{"ruleId":"199","severity":1,"message":"200","line":309,"column":48,"nodeType":"201","messageId":"202","endLine":309,"endColumn":50},{"ruleId":"196","severity":1,"message":"197","line":326,"column":21,"nodeType":"198","endLine":334,"endColumn":22},{"ruleId":"196","severity":1,"message":"197","line":340,"column":21,"nodeType":"198","endLine":344,"endColumn":22},{"ruleId":"189","severity":1,"message":"210","line":47,"column":6,"nodeType":"191","endLine":47,"endColumn":17,"suggestions":"211"},{"ruleId":"212","severity":1,"message":"213","line":81,"column":15,"nodeType":"198","messageId":"214","endLine":85,"endColumn":16,"fix":"215"},{"ruleId":"212","severity":1,"message":"213","line":95,"column":15,"nodeType":"198","messageId":"214","endLine":99,"endColumn":16,"fix":"216"},{"ruleId":"196","severity":1,"message":"197","line":110,"column":13,"nodeType":"198","endLine":110,"endColumn":36},{"ruleId":"199","severity":1,"message":"203","line":23,"column":17,"nodeType":"201","messageId":"202","endLine":23,"endColumn":19},{"ruleId":"176","severity":1,"message":"217","line":9,"column":8,"nodeType":"178","messageId":"179","endLine":9,"endColumn":18},{"ruleId":"176","severity":1,"message":"185","line":25,"column":21,"nodeType":"178","messageId":"179","endLine":25,"endColumn":33},{"ruleId":"176","severity":1,"message":"218","line":78,"column":10,"nodeType":"178","messageId":"179","endLine":78,"endColumn":18},{"ruleId":"176","severity":1,"message":"219","line":78,"column":20,"nodeType":"178","messageId":"179","endLine":78,"endColumn":31},{"ruleId":"176","severity":1,"message":"220","line":79,"column":21,"nodeType":"178","messageId":"179","endLine":79,"endColumn":33},{"ruleId":"176","severity":1,"message":"188","line":82,"column":16,"nodeType":"178","messageId":"179","endLine":82,"endColumn":23},{"ruleId":"189","severity":1,"message":"194","line":105,"column":6,"nodeType":"191","endLine":116,"endColumn":4,"suggestions":"221"},{"ruleId":"189","severity":1,"message":"190","line":142,"column":6,"nodeType":"191","endLine":142,"endColumn":30,"suggestions":"222"},{"ruleId":"189","severity":1,"message":"223","line":165,"column":6,"nodeType":"191","endLine":165,"endColumn":21,"suggestions":"224"},{"ruleId":"199","severity":1,"message":"200","line":213,"column":23,"nodeType":"201","messageId":"202","endLine":213,"endColumn":25},{"ruleId":"199","severity":1,"message":"200","line":215,"column":30,"nodeType":"201","messageId":"202","endLine":215,"endColumn":32},{"ruleId":"196","severity":1,"message":"197","line":254,"column":13,"nodeType":"198","endLine":254,"endColumn":61},{"ruleId":"199","severity":1,"message":"200","line":268,"column":49,"nodeType":"201","messageId":"202","endLine":268,"endColumn":51},{"ruleId":"212","severity":1,"message":"213","line":282,"column":21,"nodeType":"198","messageId":"214","endLine":285,"endColumn":22,"fix":"225"},{"ruleId":"212","severity":1,"message":"213","line":290,"column":21,"nodeType":"198","messageId":"214","endLine":293,"endColumn":22,"fix":"226"},{"ruleId":"199","severity":1,"message":"200","line":353,"column":55,"nodeType":"201","messageId":"202","endLine":353,"endColumn":57},{"ruleId":"199","severity":1,"message":"203","line":416,"column":36,"nodeType":"201","messageId":"202","endLine":416,"endColumn":38},{"ruleId":"196","severity":1,"message":"197","line":422,"column":25,"nodeType":"198","endLine":422,"endColumn":28},{"ruleId":"196","severity":1,"message":"197","line":444,"column":25,"nodeType":"198","endLine":444,"endColumn":28},{"ruleId":"196","severity":1,"message":"197","line":468,"column":17,"nodeType":"198","endLine":468,"endColumn":39},{"ruleId":"176","severity":1,"message":"227","line":1,"column":18,"nodeType":"178","messageId":"179","endLine":1,"endColumn":27},{"ruleId":"189","severity":1,"message":"228","line":31,"column":6,"nodeType":"191","endLine":31,"endColumn":26,"suggestions":"229"},{"ruleId":"172","replacedBy":"230"},{"ruleId":"174","replacedBy":"231"},{"ruleId":"176","severity":1,"message":"232","line":1,"column":17,"nodeType":"178","messageId":"179","endLine":1,"endColumn":26},{"ruleId":"176","severity":1,"message":"233","line":3,"column":10,"nodeType":"178","messageId":"179","endLine":3,"endColumn":17},{"ruleId":"199","severity":1,"message":"203","line":48,"column":46,"nodeType":"201","messageId":"202","endLine":48,"endColumn":48},{"ruleId":"199","severity":1,"message":"203","line":48,"column":63,"nodeType":"201","messageId":"202","endLine":48,"endColumn":65},{"ruleId":"176","severity":1,"message":"232","line":1,"column":17,"nodeType":"178","messageId":"179","endLine":1,"endColumn":26},{"ruleId":"176","severity":1,"message":"234","line":1,"column":28,"nodeType":"178","messageId":"179","endLine":1,"endColumn":36},"no-native-reassign",["235"],"no-negated-in-lhs",["236"],"no-unused-vars","'Error' is defined but never used.","Identifier","unusedVar","'Success' is defined but never used.","'getCurrentWallet' is defined but never used.","'tokenId' is assigned a value but never used.","'setTokenId' is assigned a value but never used.","'setIpfs' is assigned a value but never used.","'setTypeArray' is assigned a value but never used.","'mintNFT' is assigned a value but never used.","'buyNft' is assigned a value but never used.","'setSize' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selectedProperties'. Either include it or remove the dependency array.","ArrayExpression",["237"],"'updateTokenIds' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadNfts'. Either include it or remove the dependency array.",["238"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'Navigate' is defined but never used.","'NFTimg' is defined but never used.","'coinIcon' is defined but never used.","'Icon' is defined but never used.","'Loader' is defined but never used.","'SwordIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'saveUser'. Either include it or remove the dependency array.",["239"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"240","text":"241"},{"range":"242","text":"241"},"'ProfileImg' is defined but never used.","'tokenIds' is assigned a value but never used.","'setTokenIds' is assigned a value but never used.","'setSaleItems' is assigned a value but never used.",["243"],["244"],"React Hook useEffect has missing dependencies: 'address' and 'loadUserDetails'. Either include them or remove the dependency array.",["245"],{"range":"246","text":"241"},{"range":"247","text":"241"},"'urlSource' is defined but never used.","React Hook useEffect has a missing dependency: 'setSingleSelectedProperty'. Either include it or remove the dependency array. If 'setSingleSelectedProperty' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["248"],["235"],["236"],"'Component' is defined but never used.","'BASEURL' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},[2261,2261]," rel=\"noreferrer\"",[2653,2653],{"desc":"255","fix":"256"},{"desc":"249","fix":"257"},{"desc":"258","fix":"259"},[8210,8210],[8545,8545],{"desc":"260","fix":"261"},"Update the dependencies array to be: [selectedProperties, singleSelectedProperty]",{"range":"262","text":"263"},"Update the dependencies array to be: [min, max, page, size, minlevel, currency, selectedType, maxlevel, selectedProperties, loadNfts]",{"range":"264","text":"265"},"Update the dependencies array to be: [curWallet, saveUser]",{"range":"266","text":"267"},"Update the dependencies array to be: [min, max, page, size, minlevel, currency, selectedType, maxlevel, walletAddress, selectedProperties, loadNfts]",{"range":"268","text":"269"},{"range":"270","text":"263"},"Update the dependencies array to be: [address, loadUserDetails, walletAddress]",{"range":"271","text":"272"},"Update the dependencies array to be: [selectedProperties, setSingleSelectedProperty]",{"range":"273","text":"274"},[3881,3905],"[selectedProperties, singleSelectedProperty]",[5015,5152],"[min, max, page, size, minlevel, currency, selectedType, maxlevel, selectedProperties, loadNfts]",[1353,1364],"[curWallet, saveUser]",[3325,3482],"[min, max, page, size, minlevel, currency, selectedType, maxlevel, walletAddress, selectedProperties, loadNfts]",[4177,4201],[4687,4702],"[address, loadUserDetails, walletAddress]",[1000,1020],"[selectedProperties, setSingleSelectedProperty]"]
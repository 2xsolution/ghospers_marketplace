[{"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\index.js":"1","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\reportWebVitals.js":"2","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\App.js":"3","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Contact\\Contact.js":"4","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\custom-slider\\CustomSlider.js":"5","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\NFTDetail\\NFTdetail.js":"6","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Home\\Home.js":"7","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\ConnectWallet\\ConnectWallet.js":"8","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\Mint.js":"9","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\Profile.js":"10","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\Header.js":"11","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\MultiRangeInput.js":"12","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\utils\\Utils.js":"13","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\loader\\Loader.js":"14","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\sellModal\\SellModal.js":"15","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\loaderModal\\LoaderModal.js":"16","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\core\\web3.js":"17","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\accordian\\Accordian.js":"18","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\LoaderModal.js":"19","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\IPFSUtils.js":"20","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\updateModal\\UpdateModal.js":"21","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\addPropertyModal.js\\AddPropertyModal.js":"22","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\PropertiesData.js":"23"},{"size":747,"mtime":1648646337282,"results":"24","hashOfConfig":"25"},{"size":375,"mtime":1648115103768,"results":"26","hashOfConfig":"25"},{"size":2172,"mtime":1650114122798,"results":"27","hashOfConfig":"25"},{"size":1378,"mtime":1648115103760,"results":"28","hashOfConfig":"25"},{"size":516,"mtime":1649748260009,"results":"29","hashOfConfig":"25"},{"size":16160,"mtime":1650120276808,"results":"30","hashOfConfig":"25"},{"size":15630,"mtime":1650035409095,"results":"31","hashOfConfig":"25"},{"size":2606,"mtime":1649233546520,"results":"32","hashOfConfig":"25"},{"size":9946,"mtime":1650100312366,"results":"33","hashOfConfig":"25"},{"size":23846,"mtime":1650128531114,"results":"34","hashOfConfig":"25"},{"size":3533,"mtime":1650099581406,"results":"35","hashOfConfig":"25"},{"size":3114,"mtime":1649438236421,"results":"36","hashOfConfig":"25"},{"size":341,"mtime":1650131278011,"results":"37","hashOfConfig":"25"},{"size":242,"mtime":1649233539853,"results":"38","hashOfConfig":"25"},{"size":3240,"mtime":1650128437425,"results":"39","hashOfConfig":"25"},{"size":433,"mtime":1649254166538,"results":"40","hashOfConfig":"25"},{"size":8647,"mtime":1649748448933,"results":"41","hashOfConfig":"25"},{"size":3506,"mtime":1649262984349,"results":"42","hashOfConfig":"25"},{"size":548,"mtime":1649163026084,"results":"43","hashOfConfig":"25"},{"size":1918,"mtime":1650035146266,"results":"44","hashOfConfig":"25"},{"size":5281,"mtime":1650035350029,"results":"45","hashOfConfig":"25"},{"size":5337,"mtime":1650106076801,"results":"46","hashOfConfig":"25"},{"size":843,"mtime":1650106096613,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"17edddb",{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"74","usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"50"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\index.js",[],["104","105"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\reportWebVitals.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\App.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Contact\\Contact.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\custom-slider\\CustomSlider.js",["106"],"import React from \"react\";\r\nimport \"./customSlider.css\";\r\nimport MultiRangeSlider from \"multi-range-slider-react\";\r\n\r\nfunction CustomSlider() {\r\n  return (\r\n    <div>\r\n      {/* <MultiRangeSlider\r\n        min={0}\r\n        max={20}\r\n        ruler={false}\r\n        step={1}\r\n        label={true}\r\n        preventWheel={false}\r\n        minValue={minValue}\r\n        maxValue={maxValue}\r\n        onInput={(e) => {\r\n          handleInput(e);\r\n        }}\r\n      /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomSlider;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\NFTDetail\\NFTdetail.js",["107","108","109","110","111","112","113","114","115","116","117","118"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Home\\Home.js",["119","120","121","122","123","124","125","126","127","128","129","130","131"],"import React, { useEffect, useState } from \"react\";\r\nimport Header from \"../../components/Header\";\r\nimport MultiRangeInput from \"../../components/MultiRangeInput\";\r\n// import Card1 from \"../../assets/img/card1.png\";\r\n// import Card2 from \"../../assets/img/card2.png\";\r\nimport LeftIcon from \"../../assets/img/lefticon.png\";\r\nimport RightIcon from \"../../assets/img/righticon.png\";\r\nimport axios from \"axios\";\r\nimport MultiRangeSlider from \"multi-range-slider-react\";\r\n\r\nimport \"./home.css\";\r\n\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n// import { Data } from \"../../components/accordian/AccordianData\";\r\nimport {\r\n  loadWeb3,\r\n  connectWallet,\r\n  // putTokenOnSale,\r\n  getTokenIds,\r\n  getSaleItems,\r\n} from \"../../core/web3\";\r\nimport { BASEURL } from \"../../utils/Utils\";\r\nimport Loader from \"../../components/loader/Loader\";\r\nimport Accordian from \"../../components/accordian/Accordian\";\r\n\r\nconst Home = ({ setShowModal }) => {\r\n  const [sidebar, setSidebar] = useState(false);\r\n  const openSidebar = (e) => {\r\n    // console.log(\"sidebar\");\r\n    e.preventDefault();\r\n    setSidebar((prev) => !prev);\r\n  };\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [typeArray] = useState([\"common\", \"rare\", \"epic\", \"legendary\"]);\r\n\r\n  const loadNfts = async (e) => {\r\n    // console.log(selectedProperties);\r\n\r\n    setIsLoading(true);\r\n\r\n    axios\r\n      .post(BASEURL + \"/nft/all/\", {\r\n        min,\r\n        max,\r\n        page,\r\n        size,\r\n        minlevel,\r\n        currency,\r\n        properties: selectedProperties,\r\n        maxlevel,\r\n        type: selectedType,\r\n      })\r\n      .then((response) => {\r\n        setTotalRecords(response.data.data[1].totalRecords);\r\n        // var sortedArray = sortNfts(response.data.data[0]);\r\n        setNftsArray(response.data.data[0]);\r\n\r\n        setIsLoading(false);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  const buyNft = async (e, nftId) => {\r\n    e.stopPropagation();\r\n    // console.log(walletAddress);\r\n    axios\r\n      .put(`${BASEURL}/nft/${nftId}`, {\r\n        walletAddress,\r\n      })\r\n      .then((response) => {\r\n        // console.log(response);\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n\r\n  // const [sampleNFTTokenID, setSampleNFTTokenID] = useState(null);\r\n  const [setTokenIds] = useState([1, 2, 3, 5]);\r\n  const [saleItems, setSaleItems] = useState([]);\r\n  const [nftsArray, setNftsArray] = useState(null);\r\n  const [page, setPage] = useState(1);\r\n  const [size, setSize] = useState(6);\r\n  const [totalRecords, setTotalRecords] = useState(null);\r\n  //   filters\r\n  const [min, setMin] = useState(null);\r\n  const [minlevel, setMinlevel] = useState(0);\r\n  const [maxlevel, setMaxlevel] = useState(20);\r\n  const [selectedType, setSelectedType] = useState(null);\r\n  const [max, setMax] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [currency, setCurrency] = useState(\"\");\r\n  const [walletAddress, setWalletAddress] = useState(\"xyz\");\r\n  const [properties, setProperties] = useState(null);\r\n  const [selectedProperties, setSelectedProperties] = useState([]);\r\n  const [singleSelectedProperty, setSingleSelectedProperty] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // console.log(singleSelectedProperty);\r\n    if (\r\n      singleSelectedProperty &&\r\n      singleSelectedProperty.values &&\r\n      singleSelectedProperty.type\r\n    ) {\r\n      var index = selectedProperties.findIndex(\r\n        (x) => x.type === singleSelectedProperty.type\r\n      );\r\n      if (index !== -1) {\r\n        setSelectedProperties((prev) =>\r\n          Object.values({\r\n            ...prev,\r\n            [index]: {\r\n              ...prev[index],\r\n              values: [...singleSelectedProperty.values],\r\n            },\r\n          })\r\n        );\r\n      } else {\r\n        setSelectedProperties((prev) => [...prev, singleSelectedProperty]);\r\n      }\r\n      // console.log(selectedProperties);\r\n    }\r\n  }, [singleSelectedProperty]);\r\n\r\n  const updateTokenIds = async () => {\r\n    let res = await getTokenIds();\r\n    setTokenIds(res);\r\n    // console.log(\"======= getTokenIds ========== \", res);\r\n\r\n    res = await getSaleItems(res);\r\n    setSaleItems(res);\r\n  };\r\n\r\n  const loadProperties = () => {\r\n    axios\r\n      .get(BASEURL + \"/property/all\")\r\n      .then((response) => {\r\n        // console.log(response.data.data);\r\n        setProperties(response.data.data);\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n\r\n  // var sortNfts = (ar) => {\r\n  //   console.log(ar);\r\n  //   var ar = ar.sort(function (a, b) {\r\n  //     return new Date(b.createdAt) - new Date(a.createdAt);\r\n  //   });\r\n  //   console.log(ar);\r\n  //   return ar;\r\n  // };\r\n\r\n  useEffect(() => {\r\n    const initWeb3 = async () => {\r\n      await loadWeb3();\r\n      let res = await connectWallet();\r\n      setWalletAddress(res.address);\r\n    };\r\n    loadProperties();\r\n\r\n    initWeb3();\r\n\r\n    // updateTokenIds();\r\n  }, []);\r\n\r\n  const mintNFT = () => {\r\n    console.log(\"mint nft called\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadNfts();\r\n    // updateTokenIds();\r\n  }, [\r\n    min,\r\n    max,\r\n    page,\r\n    size,\r\n    minlevel,\r\n    currency,\r\n    selectedType,\r\n    maxlevel,\r\n    selectedProperties,\r\n  ]);\r\n\r\n  const clearAll = (e) => {\r\n    e.preventDefault();\r\n    setSelectedType(null);\r\n    setMax(null);\r\n    setMin(null);\r\n    setCurrency(null);\r\n    setMinlevel(0);\r\n    setMaxlevel(20);\r\n    setSelectedProperties([]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header setShowModal={setShowModal} setWalletAddress={setWalletAddress} />\r\n      <section className=\"root\">\r\n        <div className=\"fitermob\">\r\n          <a className=\"filter-btn\" onClick={openSidebar}>\r\n            Filter\r\n          </a>\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className={sidebar ? \"sidebar sidebar-active\" : \"sidebar\"}>\r\n            <div className=\"filter\">\r\n              <h4>FILTERS</h4>\r\n              <a onClick={clearAll}>CLEAR ALL</a>\r\n            </div>\r\n            {/* <div className=\"hero\">\r\n              <h4>GHOSPERS</h4>\r\n              <p>No Ghosper selected</p>\r\n              <a onClick={loadNfts}>Choose Ghospers</a>\r\n            </div> */}\r\n            <div className=\"hero\">\r\n              <h4>GHOSPERS</h4>\r\n              <div className=\"checkbox\">\r\n                {typeArray.map((t) => {\r\n                  return (\r\n                    <label key={t} className=\"checkbox-wrap\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={selectedType === t}\r\n                        onChange={() => {\r\n                          if (selectedType === t) {\r\n                            setSelectedType(null);\r\n                          } else setSelectedType(t);\r\n                        }}\r\n                      />\r\n                      <span className=\"checkmark\"></span>\r\n                      {t}\r\n                    </label>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n            <div className=\"hero\">\r\n              <h4>PRICE</h4>\r\n              <div className=\"price\">\r\n                <div className=\"price-inpt\">\r\n                  <input\r\n                    type=\"number\"\r\n                    max=\"100000000\"\r\n                    min=\"0\"\r\n                    onKeyDown={(evt) => evt.key === \"e\" && evt.preventDefault()}\r\n                    placeholder=\"Min\"\r\n                    onChange={(e) => {\r\n                      if (e.target.value < 0) {\r\n                        setMin(0);\r\n                      } else if (e.target.value > 100000000) {\r\n                        setMin(100000000);\r\n                      } else setMin(e.target.value);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <span></span>\r\n                <div className=\"price-inpt\">\r\n                  <input\r\n                    max=\"100000000\"\r\n                    min=\"0\"\r\n                    placeholder=\"Max\"\r\n                    type=\"number\"\r\n                    onKeyDown={(evt) => evt.key === \"e\" && evt.preventDefault()}\r\n                    onChange={(e) => {\r\n                      if (e.target.value < 0) {\r\n                        setMax(0);\r\n                      } else if (e.target.value > 100000000) {\r\n                        setMax(100000000);\r\n                      } else setMax(e.target.value);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"hero\">\r\n              <h4>Currency</h4>\r\n              <div className=\"levels\">\r\n                <select\r\n                  onChange={(e) => setCurrency(e.target.value)}\r\n                  value={currency}\r\n                >\r\n                  <option value=\"\">Select Currency</option>\r\n                  <option value=\"ghsp\">GHSP</option>\r\n                  <option value=\"bnb\">BNB</option>\r\n                  <option value=\"busd\">BUSD</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div className=\"hero\">\r\n              <h4>LEVEL</h4>\r\n              <div className=\"custom-range-div\">\r\n                <MultiRangeSlider\r\n                  min={0}\r\n                  max={20}\r\n                  ruler={false}\r\n                  step={1}\r\n                  label={true}\r\n                  preventWheel={false}\r\n                  minValue={minlevel}\r\n                  maxValue={maxlevel}\r\n                  onInput={(e) => {\r\n                    setMaxlevel(e.maxValue);\r\n                    setMinlevel(e.minValue);\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            {properties &&\r\n              properties.map((data, index) => {\r\n                return (\r\n                  <div className=\"hero\" key={index}>\r\n                    <Accordian\r\n                      setSingleSelectedProperty={setSingleSelectedProperty}\r\n                      title={data.type}\r\n                      content={data.values}\r\n                    />\r\n                  </div>\r\n                );\r\n              })}\r\n\r\n            {/* <div className=\"hero skin\">\r\n\t\t\t\t\t\t\t<h4>SKINS</h4>\r\n\t\t\t\t\t\t\t<p>No skin selected</p>\r\n\t\t\t\t\t\t\t<a href=\"/\">Choose Skin</a>\r\n\t\t\t\t\t\t</div> */}\r\n          </div>\r\n          <div style={{ marginLeft: \"60px\", width: \"100%\" }}>\r\n            <div style={{ display: \"flex\", marginBottom: \"20px\" }}>\r\n              <div className=\"nav-btn\">\r\n                <Link to=\"/mint\">Mint</Link>\r\n              </div>\r\n            </div>\r\n            <div className=\"nft-collections\">\r\n              {isLoading ? (\r\n                <Loader />\r\n              ) : (\r\n                <>\r\n                  {nftsArray && nftsArray.length > 0 ? (\r\n                    nftsArray.map((elem, i) => {\r\n                      return (\r\n                        <div\r\n                          className=\"card\"\r\n                          key={i}\r\n                          onClick={() => {\r\n                            navigate(\r\n                              `/trending/${elem._id}/tokenid/${elem.tokenId}`\r\n                            );\r\n                          }}\r\n                        >\r\n                          <div className=\"card-img\">\r\n                            <img src={`${elem.imageUrl}`} alt=\"Card1\" />\r\n                          </div>\r\n                          <div className=\"card-title\">\r\n                            <h4>\r\n                              {elem.title}{\" \"}\r\n                              {saleItems[i] && saleItems[i].onSale == true\r\n                                ? \"OnSale\"\r\n                                : \"\"}\r\n                            </h4>\r\n                            {/* <span>{elem.description}</span> */}\r\n                            <button\r\n                              className=\"custom-btn\"\r\n                              key={i}\r\n                              onClick={() => {\r\n                                navigate(\r\n                                  `/trending/${elem._id}/tokenid/${elem.tokenId}`\r\n                                );\r\n                              }}\r\n                              // onClick={(e) =>\r\n                              //   // navigate(\r\n                              //   //   `/trending/${elem._id}/tokenid/${elem.tokenId}`\r\n                              //   // )\r\n                              //   {\r\n                              //     buyNft(e, elem._id);\r\n                              //   }\r\n                              // }\r\n                            >\r\n                              OPEN\r\n                            </button>\r\n                          </div>\r\n                          <div className=\"card-price\">\r\n                            {/* <div>\r\n                          <span>gTHC</span>\r\n                          <p>21/219</p>\r\n                        </div> */}\r\n                            <div>\r\n                              <span>Price</span>\r\n                              {/* <p>900 {elem.currency?.toUpperCase()}</p> */}\r\n                              <p>\r\n                                {elem.price} {elem.currency?.toUpperCase()}\r\n                              </p>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      );\r\n                    })\r\n                  ) : (\r\n                    <div\r\n                      style={{\r\n                        width: \"100%\",\r\n                        marginTop: \"20px\",\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                      }}\r\n                    >\r\n                      <h2>No Data Found!</h2>\r\n                    </div>\r\n                  )}\r\n\r\n                  {nftsArray && nftsArray.length > 0 && !isLoading && (\r\n                    <div className=\"pagination-wrap\">\r\n                      <div className=\"pagination\">\r\n                        <div\r\n                          className=\"icon\"\r\n                          onClick={() => {\r\n                            if (page != 1) {\r\n                              setPage(page - 1);\r\n                              window.scrollTo(0, 0);\r\n                            }\r\n                          }}\r\n                        >\r\n                          <a>\r\n                            <img src={LeftIcon} alt=\"\" />\r\n                          </a>\r\n                        </div>\r\n                        <div className=\"number\">\r\n                          <span>\r\n                            {page * size > totalRecords\r\n                              ? totalRecords\r\n                              : size * page}\r\n                          </span>\r\n                          of {totalRecords && totalRecords}\r\n                        </div>\r\n                        <div\r\n                          className=\"icon\"\r\n                          onClick={() => {\r\n                            if (page * size < totalRecords) {\r\n                              setPage(page + 1);\r\n                              window.scrollTo(0, 0);\r\n                            }\r\n                          }}\r\n                        >\r\n                          <a>\r\n                            <img src={RightIcon} alt=\"\" />\r\n                          </a>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\ConnectWallet\\ConnectWallet.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\Mint.js",["132","133","134","135","136","137","138","139"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./mint.css\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport IPFSUtils from \"./IPFSUtils\";\r\nimport axios from \"axios\";\r\nimport { BASEURL, Error, Success } from \"../../utils/Utils\";\r\n\r\nimport {\r\n  loadWeb3,\r\n  connectWallet,\r\n  createNFT,\r\n  getCurrentWallet,\r\n} from \"../../core/web3\";\r\nimport Header from \"../../components/Header\";\r\nimport AddPropertyModal from \"./addPropertyModal.js/AddPropertyModal\";\r\nimport LoaderModal from \"./LoaderModal\";\r\nimport { NotificationManager } from \"react-notifications\";\r\n\r\nfunction Mint({ setShowModal }) {\r\n  const fileTypes = [\"JPEG\", \"PNG\", \"GIF\", \"JPG\"];\r\n\r\n  const handleChange = (file) => {\r\n    setImage(file);\r\n  };\r\n\r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [tokenId, setTokenId] = useState(\"xyz\");\r\n  const [showPropertyModal, setShowPropertyModal] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [ipfs, setIpfs] = useState(\"test\");\r\n  const [price, setPrice] = useState(\"\");\r\n  const [currency, setCurrency] = useState(\"ghsp\");\r\n  const [image, setImage] = useState(\"\");\r\n  const [selectedType, setSelectedType] = useState(\"\");\r\n  const [level, setLevel] = useState(\"\");\r\n  const [properties, setProperties] = useState(null);\r\n  const [allProperties, setAllProperties] = useState(null);\r\n\r\n  // const [traitsArray, setTraitsArray] = useState([\r\n  //   \"tank\",\r\n  //   \"marksman\",\r\n  //   \"assassin\",\r\n  // ]);\r\n\r\n  const [typeArray, setTypeArray] = useState([\r\n    \"common\",\r\n    \"rare\",\r\n    \"epic\",\r\n    \"legendary\",\r\n  ]);\r\n\r\n  const loadProperties = () => {\r\n    axios\r\n      .get(BASEURL + \"/property/all\")\r\n      .then((response) => {\r\n        // console.log(response.data.data);\r\n        setAllProperties(response.data.data);\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadProperties();\r\n    const initWeb3 = async () => {\r\n      await loadWeb3();\r\n      await connectWallet();\r\n    };\r\n\r\n    initWeb3();\r\n  }, []);\r\n\r\n  const saveNft = async (e) => {\r\n    // console.log(properties);\r\n    // return;\r\n    setIsLoading(true);\r\n    // NotificationManager.info(\"Please wait for a minutes.\");\r\n    IPFSUtils.uploadFileToIPFS([image]).then((lists) => {\r\n      if (lists.length > 0) {\r\n        const content_uri1 = {\r\n          name: title,\r\n          symbol: title,\r\n          image: lists[0],\r\n          properties: {\r\n            files: [{ uri: \"image.png\", type: \"image/png\" }],\r\n            category: \"image\",\r\n          },\r\n        };\r\n\r\n        IPFSUtils.uploadTextToIPFS(content_uri1).then((path) => {\r\n          try {\r\n            createNFT(path).then((res) => {\r\n              console.log(\r\n                \"********** minted token id ***********\",\r\n                res?.tokenId\r\n              );\r\n              // console.log(res);\r\n              if (res && res.tokenId && res.wallet) {\r\n                var formData = new FormData();\r\n                formData.append(\"title\", title);\r\n                formData.append(\"description\", description);\r\n                formData.append(\"price\", price);\r\n                formData.append(\"nftImage\", image);\r\n                formData.append(\"currency\", currency);\r\n                formData.append(\"walletAddress\", res.wallet);\r\n                formData.append(\"type\", selectedType);\r\n                formData.append(\"tokenId\", res.tokenId);\r\n                formData.append(\"ipfs\", ipfs);\r\n                formData.append(\"properties\", JSON.stringify(properties));\r\n                formData.append(\"level\", level);\r\n\r\n                // console.log(...formData);\r\n\r\n                axios\r\n                  .post(BASEURL + \"/nft/save\", formData)\r\n                  .then((response) => {\r\n                    // console.log(response);\r\n                    setCurrency(\"ghsp\");\r\n                    setTitle(\"\");\r\n                    setDescription(\"\");\r\n                    setPrice(\"\");\r\n                    setSelectedType(null);\r\n                    setImage(\"\");\r\n                    setProperties(null);\r\n                    setLevel(\"\");\r\n                    setIsLoading(false);\r\n                    NotificationManager.success(\"Nft Created Successfully\");\r\n                    // window.location.reload();\r\n                  })\r\n                  .catch((e) => {\r\n                    // console.log(e.response.data.message);\r\n                    NotificationManager.error(\"Error Writing to DB\");\r\n                    NotificationManager.error(e.response.data.message);\r\n                    // console.log(e);\r\n                    setIsLoading(false);\r\n                    // window.location.reload();\r\n                  });\r\n              } else {\r\n                setIsLoading(false);\r\n                NotificationManager.error(\"Not Created Token ID from contract\");\r\n              }\r\n            });\r\n          } catch (error) {\r\n            setIsLoading(false);\r\n            NotificationManager.error(\"Transaction Error\");\r\n          }\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const validateFields = () => {\r\n    if (!title || !price || !level || !selectedType || !image) return false;\r\n    return true;\r\n  };\r\n\r\n  const mintNFT = async (event) => {\r\n    // const tokenID = await createNFT(\"\");\r\n    // console.log('minted token ID : ', tokenID);\r\n    // if (tokenID) {\r\n    // \tsetSampleNFTTokenID(tokenID);\r\n    // \tupdateTokenIds();\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header setShowModal={setShowModal} />\r\n      <div className=\"mint-container\">\r\n        {isLoading && <LoaderModal />}\r\n        <div className=\"file-div\">\r\n          <p>PNG, GIF, WEBP, MP4 or MP3. Max 100mb.</p>\r\n          <FileUploader\r\n            multiple={false}\r\n            handleChange={handleChange}\r\n            name=\"nftImage\"\r\n            classes=\"drag-zone\"\r\n            types={fileTypes}\r\n          />\r\n\r\n          {image && (\r\n            <>\r\n              <p className=\"preview-text\">Image Preview</p>\r\n              <img\r\n                className=\"preview-img\"\r\n                src={URL.createObjectURL(image)}\r\n                alt=\"\"\r\n              />\r\n            </>\r\n          )}\r\n        </div>\r\n        <div className=\"inputs-div\">\r\n          <div>\r\n            <label htmlFor=\"\">Title</label>\r\n            <input\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n              type=\"text\"\r\n              className=\"mint-input\"\r\n              placeholder=\"example: gaming art design\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"\">Description (Optional)</label>\r\n            <input\r\n              value={description}\r\n              onChange={(e) => setDescription(e.target.value)}\r\n              type=\"text\"\r\n              className=\"mint-input\"\r\n              placeholder=\"example: gaming art design\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"\">Price</label>\r\n            <div className=\"price-flex\">\r\n              <input\r\n                onKeyDown={(evt) => evt.key === \"e\" && evt.preventDefault()}\r\n                value={price}\r\n                onChange={(e) => {\r\n                  if (e.target.value < 0) {\r\n                    setPrice(0);\r\n                  } else if (e.target.value > 100000000) {\r\n                    setPrice(100000000);\r\n                  } else setPrice(e.target.value);\r\n                }}\r\n                type=\"number\"\r\n                min={0}\r\n                max=\"10\"\r\n                className=\"mint-input\"\r\n                placeholder=\"0.0\"\r\n              />\r\n              <select\r\n                onChange={(e) => setCurrency(e.target.value)}\r\n                value={currency}\r\n              >\r\n                <option value=\"ghsp\">GHSP</option>\r\n                <option value=\"bnb\">BNB</option>\r\n                <option value=\"busd\">BUSD</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"\">Level</label>\r\n            <input\r\n              value={level}\r\n              max=\"20\"\r\n              min=\"0\"\r\n              onKeyDown={(evt) => evt.key === \"e\" && evt.preventDefault()}\r\n              onChange={(e) => {\r\n                if (e.target.value < 0) {\r\n                  setLevel(0);\r\n                } else if (e.target.value > 20) {\r\n                  setLevel(20);\r\n                } else setLevel(e.target.value);\r\n              }}\r\n              type=\"number\"\r\n              className=\"mint-input\"\r\n              placeholder=\"Level\"\r\n            />\r\n          </div>\r\n          <button onClick={() => setShowPropertyModal(true)}>\r\n            Add Properties\r\n          </button>\r\n          <div className=\"checkbox\">\r\n            <label htmlFor=\"\">Type</label>\r\n            <div className=\"mint-types\">\r\n              {typeArray.map((t) => {\r\n                return (\r\n                  <label key={t} className=\"checkbox-wrap mint-wrap\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={selectedType === t}\r\n                      onChange={() => {\r\n                        if (selectedType === t) {\r\n                          setSelectedType(null);\r\n                        } else setSelectedType(t);\r\n                      }}\r\n                    />\r\n                    <span className=\"checkmark\"></span>\r\n                    {t}\r\n                  </label>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n          <button onClick={saveNft} disabled={!validateFields()}>\r\n            Create Item\r\n          </button>\r\n        </div>\r\n        <AddPropertyModal\r\n          setProperties={setProperties}\r\n          properties={allProperties}\r\n          showModal={showPropertyModal}\r\n          setShowModal={setShowPropertyModal}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Mint;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\Profile.js",["140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\Header.js",["164","165","166","167"],"import React, { useEffect, useState } from \"react\";\r\nimport { NavLink, Link } from \"react-router-dom\";\r\nimport logo from \"../assets/img/logo.6eaa2fdb.png\";\r\nimport \"./header.css\";\r\nimport { NotificationManager } from \"react-notifications\";\r\n\r\nimport { loadWeb3, connectWallet, getCurrentWallet } from \"../core/web3\";\r\nimport axios from \"axios\";\r\nimport { BASEURL } from \"../utils/Utils\";\r\n\r\nconst Header = ({ setShowModal, setWalletAddress }) => {\r\n  const [navActive, isnavActive] = useState(false);\r\n  const [curWallet, setCurWallet] = useState(\"\");\r\n\r\n  const onConnectWallet = async () => {\r\n    if (curWallet !== \"\") {\r\n      return;\r\n    }\r\n    await loadWeb3();\r\n    let res = await connectWallet();\r\n    setCurWallet(res.address);\r\n    // console.log(res.address);\r\n    setWalletAddress(res.address);\r\n  };\r\n\r\n  const saveUser = (e) => {\r\n    axios\r\n      .post(BASEURL + \"/user/save\", {\r\n        // walletAddress: curWallet,\r\n        walletAddress: curWallet,\r\n      })\r\n      .then((response) => {\r\n        // console.log(response);\r\n        //NotificationManager.success(\"User Created Successfully\");\r\n      })\r\n      .catch((e) => {\r\n        if (e.response?.status !== 400) {\r\n          NotificationManager.error(e.response.data.message);\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (curWallet) {\r\n      saveUser();\r\n    }\r\n  }, [curWallet]);\r\n\r\n  const openModal = (e) => {\r\n    // console.log(\"hwllo\");\r\n    e.preventDefault();\r\n    // setShowModal((prev) => !prev);\r\n\r\n    onConnectWallet();\r\n  };\r\n\r\n  const getWallet = async () => {\r\n    let res = await getCurrentWallet();\r\n    if (res.success) {\r\n      // console.log(res.account);\r\n      setCurWallet(res.account);\r\n      // setWalletAddress(res.account);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getWallet();\r\n  });\r\n\r\n  return (\r\n    <header className=\"app-header\">\r\n      <div className=\"container\">\r\n        <Link to=\"/\">\r\n          <div className=\"logo\">\r\n            <img src={logo} alt=\"logo\" />\r\n          </div>\r\n        </Link>\r\n        <div className={navActive ? \"links nav-active\" : \"links\"}>\r\n          <ul className=\"navigations\">\r\n            <li>\r\n              <a\r\n                target=\"_blank\"\r\n                href=\"https://ghospers.com/\"\r\n                activeclassname=\"active\"\r\n              >\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/\" activeclassname=\"active\">\r\n                Marketplace\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <a\r\n                target=\"_blank\"\r\n                href=\"https://staking.ghospers.com/\"\r\n                activeclassname=\"active\"\r\n              >\r\n                Staking\r\n              </a>\r\n            </li>\r\n            {/* <li>\r\n\t\t\t\t\t\t\t<NavLink to=\"/contact\" activeclassname=\"active\">\r\n\t\t\t\t\t\t\t\tContact Us\r\n\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t</li> */}\r\n          </ul>\r\n          <div className=\"nav-btn\">\r\n            <a onClick={openModal}>\r\n              {curWallet === \"\"\r\n                ? \"Connect Wallet\"\r\n                : curWallet.slice(0, 5) + \"...\" + curWallet.slice(-4)}\r\n            </a>\r\n\r\n            {curWallet && <NavLink to=\"/profile\">Profile</NavLink>}\r\n          </div>\r\n        </div>\r\n        <div className=\"hamburger\" onClick={() => isnavActive(!navActive)}>\r\n          <div className=\"line1\"></div>\r\n          <div className=\"line2\"></div>\r\n          <div className=\"line3\"></div>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\MultiRangeInput.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\utils\\Utils.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\loader\\Loader.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\sellModal\\SellModal.js",["168"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\loaderModal\\LoaderModal.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\core\\web3.js",["169","170","171","172","173"],"import { NotificationManager } from \"react-notifications\";\r\nimport Web3 from \"web3\";\r\n\r\nconst busdAbi = require(\"./abi/busd.json\");\r\nconst ghospAbi = require(\"./abi/ghosp.json\");\r\nconst marketAbi = require(\"./abi/marketplace.json\");\r\nconst minterAbi = require(\"./abi/minter.json\");\r\n\r\nconst MINTER_ADDRESS = \"0xfA9bB2B3119A7b9d40235F9e92052AB6Fd6DaD12\";\r\nconst MARKETPLACE_ADDRESS = \"0xC4d193F224Ec31c7BDc959D2D1b9Eb9d16E97A78\";\r\nconst GHOSP_ADDRESS = \"0x91c70ba82a8ed676c5a09ce1cd94cc18923e8371\";\r\nconst BUSD_ADDRESS = \"0x8301f2213c0eed49a7e28ae4c3e91722919b8b47\"; // Faucet Token\r\nlet market_contract = null;\r\nlet minter_contract = null;\r\nlet ghosp_contract = null;\r\nlet busd_contract = null;\r\n\r\nconst NETWORK_ID = 97;\r\n\r\nconst checkConnectedNetwork = async (chainId) => {\r\n  if (chainId != NETWORK_ID) {\r\n    let wallet = await getCurrentWallet();\r\n    if (wallet.success) {\r\n      NotificationManager.error(\"Please select BSC network\");\r\n    }\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const loadWeb3 = async () => {\r\n  if (window.ethereum) {\r\n    window.web3 = new Web3(window.ethereum);\r\n    window.web3.eth.handleRevert = true;\r\n  } else if (window.web3) {\r\n    window.web3 = new Web3(window.web3.currentProvider);\r\n    window.web3.eth.handleRevert = true;\r\n  } else {\r\n    window.alert(\r\n      \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n    );\r\n    return;\r\n  }\r\n\r\n  minter_contract = new window.web3.eth.Contract(minterAbi, MINTER_ADDRESS);\r\n  market_contract = new window.web3.eth.Contract(\r\n    marketAbi,\r\n    MARKETPLACE_ADDRESS\r\n  );\r\n  ghosp_contract = new window.web3.eth.Contract(ghospAbi, GHOSP_ADDRESS);\r\n  busd_contract = new window.web3.eth.Contract(busdAbi, BUSD_ADDRESS);\r\n\r\n  window.ethereum.on(\"chainChanged\", function (chainId) {\r\n    console.log(\"chain chainged with this chain id : \", chainId);\r\n    checkConnectedNetwork(chainId);\r\n  });\r\n};\r\n\r\nexport const connectWallet = async () => {\r\n  // const chainId = await getConnectedNetworkId();\r\n  // if (checkConnectedNetwork(chainId) == false) {\r\n  //     return  {\r\n  //         address: \"\",\r\n  //         status: \"Network connection error\",\r\n  //         res: 3,\r\n  //     };\r\n  // }\r\n\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        status: \"Metamask successfuly connected.\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"Something went wrong: \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              href={`https://metamask.io/download.html`}\r\n            >\r\n              You must install Metamask, a virtual BSC wallet, in your browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const getConnectedNetworkId = async () => {\r\n  if (window.web3 && window.web3.eth) {\r\n    return await window.web3.eth.getChainId();\r\n  }\r\n\r\n  return 0;\r\n};\r\n\r\nexport const getCurrentWallet = async () => {\r\n  const web3 = window.web3;\r\n  try {\r\n    let accounts = await web3.eth.getAccounts();\r\n    let accountBalance = await web3.eth.getBalance(accounts[0]);\r\n    accountBalance = web3.utils.fromWei(accountBalance);\r\n    return {\r\n      success: true,\r\n      account: accounts[0],\r\n      balance: accountBalance,\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      result: \"Something went wrong: \" + error.message,\r\n    };\r\n  }\r\n};\r\n\r\nexport const buyNFTWithBNB = async (tokenID, amount) => {\r\n  const wallet = await getCurrentWallet();\r\n  if (wallet.success === false) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    alert(amount);\r\n    let bnAmount = window.web3.utils.toWei(\"\" + amount);\r\n    await market_contract.methods\r\n      .buyNFTWithBNB(tokenID, wallet.account)\r\n      .send({ from: wallet.account, value: bnAmount });\r\n\r\n    await removeTokenFromSale(tokenID);\r\n    return true;\r\n  } catch (error) {\r\n    console.log(\"buyNFTWithBNB error\", error);\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const buyNFTWithGHSP = async (tokenID, amount) => {\r\n  const wallet = await getCurrentWallet();\r\n  if (wallet.success === false) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    let ghspAmount = window.web3.utils.toWei(\"\" + amount, \"ether\");\r\n    await ghosp_contract.methods\r\n      .approve(MARKETPLACE_ADDRESS, ghspAmount)\r\n      .send({ from: wallet.account });\r\n  } catch (error) {\r\n    console.log(\"approve failed : \", error);\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    await market_contract.methods\r\n      .buyNFTWithGHSP(tokenID, wallet.account)\r\n      .send({ from: wallet.account });\r\n\r\n    await removeTokenFromSale(tokenID);\r\n    return true;\r\n  } catch (error) {\r\n    console.log(\"buyNFTWithGHSP error\", error);\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const buyNFTWithBUSD = async (tokenID, amount) => {\r\n  const wallet = await getCurrentWallet();\r\n  if (wallet.success === false) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    let busdAmount = window.web3.utils.toWei(\"\" + amount, \"ether\");\r\n    await busd_contract.methods\r\n      .approve(MARKETPLACE_ADDRESS, busdAmount)\r\n      .send({ from: wallet.account });\r\n  } catch (error) {\r\n    console.log(\"approve failed : \", error);\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    await market_contract.methods\r\n      .buyNFTWithBUSD(tokenID, wallet.account)\r\n      .send({ from: wallet.account });\r\n\r\n    await removeTokenFromSale(tokenID);\r\n    return true;\r\n  } catch (error) {\r\n    console.log(\"buyNFTWithBUSD error\", error);\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const removeTokenFromSale = async (tokenID) => {\r\n  const wallet = await getCurrentWallet();\r\n  if (wallet.success === false) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    await market_contract.methods\r\n      .removeTokenFromSale(tokenID)\r\n      .send({ from: wallet.account });\r\n    return true;\r\n  } catch (error) {\r\n    console.log(\"removeTokenFromSale error\", error);\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const putTokenOnSale = async (tokenID, price, saleTokenType) => {\r\n  const wallet = await getCurrentWallet();\r\n  if (wallet.success === false) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    await minter_contract.methods\r\n      .setApprovalForAll(MARKETPLACE_ADDRESS, true)\r\n      .send({ from: wallet.account });\r\n    // return true;\r\n  } catch (error) {\r\n    console.log(\"setApprovalForAll error\", error);\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    // alert(price);\r\n    let bnPrice = window.web3.utils.toWei(\"\" + price);\r\n    await market_contract.methods\r\n      .putTokenOnSale(tokenID, bnPrice, saleTokenType)\r\n      .send({ from: wallet.account });\r\n  } catch (error) {\r\n    console.log(\"putTokenOnSale error\", error);\r\n    return false;\r\n  }\r\n\r\n  console.log(\"putTokenOnSale ok\");\r\n\r\n  return true;\r\n};\r\n\r\nexport const getSaleItems = async (tokenIds) => {\r\n  let saleItems = {};\r\n  for (let i = 0; i < tokenIds.length; i++) {\r\n    let item = await market_contract.methods.saleItems(tokenIds[i]).call();\r\n    saleItems[tokenIds[i]] = item;\r\n  }\r\n\r\n  console.log(\"Sale Items : \", saleItems);\r\n\r\n  return saleItems;\r\n};\r\n\r\nexport const createNFT = async (tokenURI) => {\r\n  const wallet = await getCurrentWallet();\r\n  if (wallet.success === false) {\r\n    return null;\r\n  }\r\n\r\n  try {\r\n    let tokenID = 0;\r\n    let tx = await minter_contract.methods\r\n      .createNFT(tokenURI)\r\n      .send({ from: wallet.account });\r\n    tokenID = tx.events.Transfer.returnValues.tokenId;\r\n    return { tokenId: tokenID, wallet: wallet.account };\r\n  } catch (error) {\r\n    console.log(\"createNFT error\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getCreator = async (tokenID) => {\r\n  const wallet = await getCurrentWallet();\r\n  if (wallet.success === false) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    await minter_contract.methods\r\n      .getCreator(tokenID)\r\n      .send({ from: wallet.account });\r\n  } catch (error) {\r\n    console.log(\"getCreator error\", error);\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const getTokenIds = async () => {\r\n  const wallet = await getCurrentWallet();\r\n  if (wallet.success === false) {\r\n    return [];\r\n  }\r\n\r\n  try {\r\n    let tokenIds = await minter_contract.methods\r\n      .getTokenIds(wallet.account)\r\n      .call();\r\n    return tokenIds;\r\n  } catch (error) {\r\n    console.log(\"getTokenIds error\", error);\r\n    return [];\r\n  }\r\n};\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\accordian\\Accordian.js",["174"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./accordian.css\";\r\nfunction Accordian({ title, content, setSingleSelectedProperty }) {\r\n  const [contentArray] = useState(content);\r\n  const [searchInput, setsearchInput] = useState(\"\");\r\n  const [resultsArray, setResultsArray] = useState(contentArray);\r\n  const [showContent, setShowContent] = useState(false);\r\n  const [selectedProperties, setSelectedProperties] = useState({\r\n    type: \"\",\r\n    values: [],\r\n  });\r\n\r\n  const onChange = (e) => {\r\n    setsearchInput(e.target.value);\r\n    if (e.target.value === \"\") {\r\n      setResultsArray(contentArray);\r\n    } else {\r\n      var resultArray = contentArray.filter((text) =>\r\n        text.includes(searchInput.toLowerCase())\r\n      );\r\n      setResultsArray(resultArray);\r\n    }\r\n  };\r\n\r\n  const alreadyPresent = (data) => {\r\n    return selectedProperties && selectedProperties.values.includes(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSingleSelectedProperty(selectedProperties);\r\n  }, [selectedProperties]);\r\n\r\n  return (\r\n    <div className=\"accordian-div\">\r\n      <div\r\n        className=\"accordian-header\"\r\n        onClick={() => setShowContent((prev) => !prev)}\r\n      >\r\n        <h4>{title}</h4>\r\n        {showContent ? (\r\n          <i\r\n            className=\"fa-solid fa-caret-up\"\r\n            onClick={() => setShowContent(false)}\r\n          ></i>\r\n        ) : (\r\n          <i\r\n            className=\"fa-solid fa-caret-down\"\r\n            onClick={() => setShowContent(true)}\r\n          ></i>\r\n        )}\r\n      </div>\r\n      <div className=\"accordian-content\">\r\n        {showContent && (\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              className=\"select-search-input\"\r\n              placeholder=\"Search\"\r\n              value={searchInput}\r\n              onChange={onChange}\r\n            />\r\n            <ul>\r\n              <div className=\"checkbox\">\r\n                {resultsArray &&\r\n                  resultsArray.map((data, index) => {\r\n                    return (\r\n                      <label className=\"checkbox-wrap\" key={index}>\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          checked={\r\n                            selectedProperties &&\r\n                            selectedProperties.values.includes(data)\r\n                          }\r\n                          onChange={() => {\r\n                            if (alreadyPresent(data)) {\r\n                              var remainingValues =\r\n                                selectedProperties.values.filter(\r\n                                  (x) => x !== data\r\n                                );\r\n                              setSelectedProperties({\r\n                                type: title,\r\n                                values: remainingValues,\r\n                              });\r\n                            } else {\r\n                              setSelectedProperties((prev) => ({\r\n                                type: title,\r\n                                values: [...prev.values, data],\r\n                              }));\r\n                            }\r\n                          }}\r\n                        />\r\n                        <span className=\"checkmark\"></span>\r\n                        {data}\r\n                      </label>\r\n                    );\r\n                  })}\r\n              </div>\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Accordian;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\LoaderModal.js",["175","176"],"import React, { Component, useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport Loader from \"../../components/loader/Loader\";\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction LoaderModal() {\r\n  return (\r\n    <div className=\"\">\r\n      <Modal isOpen={true} contentLabel=\"Example Modal\">\r\n        <div style={{ width: \"400px\", margin: \"auto\" }}>\r\n          {/* <h2 style={{ textAlign: \"center\", marginTop: \"40px\" }}>Loading.. </h2> */}\r\n          <Loader />\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoaderModal;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\IPFSUtils.js",["177"],"import { create, urlSource } from \"ipfs-http-client\";\r\nimport axios from \"axios\";\r\n//import IPFS from 'nano-ipfs-store'\r\nlet all = require(\"it-all\");\r\n\r\nlet client = create(\"https://ipfs.infura.io:5001/api/v0\");\r\n\r\nconst uploadFileToIPFS = async (files) => {\r\n  // console.log(\"enter uploadFileToIPFS\", files);\r\n  let lists = [];\r\n  try {\r\n    for (let i = 0; i < files.length; i++) {\r\n      const added = await client.add(files[i]);\r\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\r\n      console.log(\"[GD], FileName = \", files[i].name, \", Hash: \", added.path);\r\n      lists.push(url);\r\n    }\r\n    return lists;\r\n  } catch (err) {\r\n    console.log(\"Error uploading file: \", err);\r\n    return [];\r\n  }\r\n};\r\n\r\nconst uploadFolderToIPFS = async (files) => {\r\n  try {\r\n    /*let fileObjectsArray = Array.from(files).map((file) => {\r\n            return {\r\n                path: file.name,\r\n                content: file\r\n            }\r\n        })*/\r\n    const results = await all(\r\n      client.addAll(files, { wrapWithDirectory: true })\r\n    );\r\n    const length = results.length;\r\n    const filesHash = results[length - 1].cid._baseCache.get(\"z\");\r\n    const filesUrl = \"https://ipfs.infura.io/ipfs/\" + filesHash;\r\n    return filesUrl;\r\n  } catch (err) {\r\n    console.log(\"[GD], Error uploading file: \", err);\r\n    return \"\";\r\n  }\r\n};\r\n\r\nconst uploadTextToIPFS = async (data) => {\r\n  try {\r\n    let doc = JSON.stringify(data);\r\n    const added = await client.add(doc);\r\n    const filesUrl = \"https://ipfs.infura.io/ipfs/\" + added.path;\r\n    return filesUrl;\r\n  } catch (err) {\r\n    //console.log(\"Error: \", err)\r\n    return null;\r\n  }\r\n};\r\n\r\nconst loadFromIPFS = async (url) => {\r\n  let res = await axios.get(`https://ipfs.infura.io/ipfs/${url}`);\r\n  return res;\r\n};\r\n\r\nconst IPFSUtils = {\r\n  uploadFileToIPFS,\r\n  uploadFolderToIPFS,\r\n  uploadTextToIPFS,\r\n  loadFromIPFS,\r\n};\r\n\r\nexport default IPFSUtils;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\updateModal\\UpdateModal.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\addPropertyModal.js\\AddPropertyModal.js",["178","179","180","181","182","183","184"],"import React, {\r\n  Component,\r\n  useMemo,\r\n  useCallback,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport { BASEURL } from \"../../../utils/Utils\";\r\nimport \"./addPropertyModal.css\";\r\nimport CreatableSelect from \"react-select/creatable\";\r\nimport { PropertiesData } from \"../PropertiesData\";\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction AddPropertyModal({\r\n  setShowModal,\r\n  showModal,\r\n  setProperties,\r\n  properties,\r\n}) {\r\n  // console.log(showModal);\r\n  function closeModal() {\r\n    setShowModal(false);\r\n  }\r\n\r\n  const AddRows = () => {\r\n    var propertiesTemp = propertiesArray\r\n      .filter((r) => r?.value)\r\n      .map((x) => {\r\n        x.value = x.value.value;\r\n        delete x.values;\r\n        return x;\r\n      });\r\n    // console.log(propertiesTemp);\r\n    setProperties(propertiesTemp);\r\n    // setProperties(selectedProperties);\r\n    setShowModal(false);\r\n  };\r\n\r\n  const [selectedProperties, setSelectedProperties] = useState([]);\r\n  const [propertiesArray, setPropertiesArray] = useState(properties);\r\n  // const [selectedValue, setSelectedValue] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (!propertiesArray) {\r\n      var transformedProperties =\r\n        properties &&\r\n        properties.map((property) => {\r\n          var innerArray =\r\n            property &&\r\n            property.values.map((x) => {\r\n              var data = {};\r\n              data.label = x;\r\n              data.value = x.toLowerCase();\r\n              return data;\r\n            });\r\n          property.values = innerArray;\r\n          return property;\r\n        });\r\n      console.log(transformedProperties);\r\n      setPropertiesArray(transformedProperties);\r\n    }\r\n  }, [properties]);\r\n\r\n  const handleCreate = (index, obj) => {\r\n    console.log(obj);\r\n\r\n    setPropertiesArray((prev) =>\r\n      Object.values({\r\n        ...prev,\r\n        [index]: {\r\n          ...prev[index],\r\n          value: {\r\n            value: obj,\r\n            label: obj,\r\n          },\r\n          values: [\r\n            ...prev[index].values,\r\n            {\r\n              value: obj,\r\n              label: obj,\r\n            },\r\n          ],\r\n        },\r\n      })\r\n    );\r\n    // setSelectedValue({\r\n    //   value: obj,\r\n    //   label: obj,\r\n    // });\r\n\r\n    setSelectedProperties((prev) => [\r\n      ...prev,\r\n      {\r\n        type: propertiesArray[index].type.toLowerCase(),\r\n        value: obj,\r\n      },\r\n    ]);\r\n\r\n    // console.log(propertiesArray);\r\n  };\r\n\r\n  const handleChange = (index, obj) => {\r\n    setPropertiesArray((prev) =>\r\n      Object.values({\r\n        ...prev,\r\n        [index]: {\r\n          ...prev[index],\r\n          value: {\r\n            value: obj.value,\r\n            label: obj.value,\r\n          },\r\n        },\r\n      })\r\n    );\r\n\r\n    setSelectedProperties((prev) => [\r\n      ...prev,\r\n      {\r\n        type: propertiesArray[index].type.toLowerCase(),\r\n        value: obj.value,\r\n      },\r\n    ]);\r\n\r\n    // console.log(propertiesArray);\r\n    // setSelectedValue(obj);\r\n  };\r\n\r\n  return (\r\n    <div className=\"scrollable-modal \">\r\n      <Modal\r\n        isOpen={showModal}\r\n        shouldCloseOnOverlayClick={false}\r\n        // onAfterOpen={afterOpenModal}\r\n        onRequestClose={closeModal}\r\n        // style={customStyles}\r\n        // className=\"scrollable-modal\"\r\n        contentLabel=\"Example Modal\"\r\n      >\r\n        <div className=\"properties-modal-content\">\r\n          <h2>Add Properties </h2>\r\n          <div className=\"properties-row\">\r\n            {propertiesArray &&\r\n              propertiesArray.map((property, index) => {\r\n                return (\r\n                  <div key={index} className=\"properties-flex\">\r\n                    <div className=\"properties-type\">\r\n                      <p>{property.type}</p>\r\n                    </div>\r\n                    <div className=\"properties-select\">\r\n                      <CreatableSelect\r\n                        // isClearable\r\n                        className=\"createble-select\"\r\n                        value={property?.value}\r\n                        options={property?.values}\r\n                        onChange={(value) => handleChange(index, value)}\r\n                        onCreateOption={(value) => handleCreate(index, value)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n          </div>\r\n\r\n          <button onClick={AddRows}>Save</button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddPropertyModal;\r\n\r\n// const onChange = (e, index) => {\r\n//   setRows((prev) =>\r\n//     Object.values({\r\n//       ...prev,\r\n//       [index]: { ...prev[index], [e.target.name]: e.target.value },\r\n//     })\r\n//   );\r\n// };\r\n\r\n// const removeRow = (index) => {\r\n//   console.log(index);\r\n//   if (rows.length !== 1) {\r\n//     console.log(rows);\r\n//     console.log(rows[index]);\r\n//     var rowsTemp = [...rows];\r\n//     console.log(rowsTemp);\r\n//     rowsTemp.splice(index, 1);\r\n//     console.log(rowsTemp);\r\n//     setRows(rowsTemp);\r\n//   }\r\n// };\r\n\r\n// useEffect(() => {\r\n//   console.log(properties);\r\n//   if (!properties) {\r\n//     setpro([\r\n//       {\r\n//         type: \"\",\r\n//         value: \"\",\r\n//       },\r\n//     ]);\r\n//   }\r\n// }, [properties]);\r\n\r\n// const handleChange = useCallback((inputValue) => setValue(inputValue), []);\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\PropertiesData.js",[],{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","severity":1,"message":"190","line":3,"column":8,"nodeType":"191","messageId":"192","endLine":3,"endColumn":24},{"ruleId":"193","severity":1,"message":"194","line":80,"column":30,"nodeType":"195","messageId":"196","endLine":80,"endColumn":32},{"ruleId":"193","severity":1,"message":"194","line":82,"column":37,"nodeType":"195","messageId":"196","endLine":82,"endColumn":39},{"ruleId":"193","severity":1,"message":"194","line":251,"column":18,"nodeType":"195","messageId":"196","endLine":251,"endColumn":20},{"ruleId":"193","severity":1,"message":"194","line":253,"column":25,"nodeType":"195","messageId":"196","endLine":253,"endColumn":27},{"ruleId":"193","severity":1,"message":"194","line":404,"column":45,"nodeType":"195","messageId":"196","endLine":404,"endColumn":47},{"ruleId":"193","severity":1,"message":"194","line":406,"column":48,"nodeType":"195","messageId":"196","endLine":406,"endColumn":50},{"ruleId":"193","severity":1,"message":"194","line":408,"column":48,"nodeType":"195","messageId":"196","endLine":408,"endColumn":50},{"ruleId":"193","severity":1,"message":"194","line":427,"column":45,"nodeType":"195","messageId":"196","endLine":427,"endColumn":47},{"ruleId":"193","severity":1,"message":"194","line":429,"column":48,"nodeType":"195","messageId":"196","endLine":429,"endColumn":50},{"ruleId":"193","severity":1,"message":"194","line":431,"column":48,"nodeType":"195","messageId":"196","endLine":431,"endColumn":50},{"ruleId":"197","severity":1,"message":"198","line":448,"column":21,"nodeType":"199","endLine":460,"endColumn":22},{"ruleId":"197","severity":1,"message":"198","line":467,"column":23,"nodeType":"199","endLine":471,"endColumn":24},{"ruleId":"189","severity":1,"message":"200","line":3,"column":8,"nodeType":"191","messageId":"192","endLine":3,"endColumn":23},{"ruleId":"189","severity":1,"message":"201","line":68,"column":9,"nodeType":"191","messageId":"192","endLine":68,"endColumn":15},{"ruleId":"189","severity":1,"message":"202","line":86,"column":16,"nodeType":"191","messageId":"192","endLine":86,"endColumn":23},{"ruleId":"203","severity":1,"message":"204","line":126,"column":6,"nodeType":"205","endLine":126,"endColumn":30,"suggestions":"206"},{"ruleId":"189","severity":1,"message":"207","line":128,"column":9,"nodeType":"191","messageId":"192","endLine":128,"endColumn":23},{"ruleId":"189","severity":1,"message":"208","line":169,"column":9,"nodeType":"191","messageId":"192","endLine":169,"endColumn":16},{"ruleId":"203","severity":1,"message":"209","line":176,"column":6,"nodeType":"205","endLine":186,"endColumn":4,"suggestions":"210"},{"ruleId":"197","severity":1,"message":"198","line":204,"column":11,"nodeType":"199","endLine":204,"endColumn":59},{"ruleId":"197","severity":1,"message":"198","line":212,"column":15,"nodeType":"199","endLine":212,"endColumn":37},{"ruleId":"193","severity":1,"message":"194","line":360,"column":68,"nodeType":"195","messageId":"196","endLine":360,"endColumn":70},{"ruleId":"193","severity":1,"message":"211","line":421,"column":38,"nodeType":"195","messageId":"196","endLine":421,"endColumn":40},{"ruleId":"197","severity":1,"message":"198","line":427,"column":27,"nodeType":"199","endLine":427,"endColumn":30},{"ruleId":"197","severity":1,"message":"198","line":448,"column":27,"nodeType":"199","endLine":448,"endColumn":30},{"ruleId":"189","severity":1,"message":"212","line":6,"column":19,"nodeType":"191","messageId":"192","endLine":6,"endColumn":24},{"ruleId":"189","severity":1,"message":"213","line":6,"column":26,"nodeType":"191","messageId":"192","endLine":6,"endColumn":33},{"ruleId":"189","severity":1,"message":"214","line":12,"column":3,"nodeType":"191","messageId":"192","endLine":12,"endColumn":19},{"ruleId":"189","severity":1,"message":"215","line":28,"column":10,"nodeType":"191","messageId":"192","endLine":28,"endColumn":17},{"ruleId":"189","severity":1,"message":"216","line":28,"column":19,"nodeType":"191","messageId":"192","endLine":28,"endColumn":29},{"ruleId":"189","severity":1,"message":"217","line":31,"column":16,"nodeType":"191","messageId":"192","endLine":31,"endColumn":23},{"ruleId":"189","severity":1,"message":"218","line":46,"column":21,"nodeType":"191","messageId":"192","endLine":46,"endColumn":33},{"ruleId":"189","severity":1,"message":"208","line":157,"column":9,"nodeType":"191","messageId":"192","endLine":157,"endColumn":16},{"ruleId":"189","severity":1,"message":"200","line":3,"column":8,"nodeType":"191","messageId":"192","endLine":3,"endColumn":23},{"ruleId":"189","severity":1,"message":"219","line":9,"column":8,"nodeType":"191","messageId":"192","endLine":9,"endColumn":18},{"ruleId":"189","severity":1,"message":"214","line":22,"column":3,"nodeType":"191","messageId":"192","endLine":22,"endColumn":19},{"ruleId":"189","severity":1,"message":"218","line":29,"column":21,"nodeType":"191","messageId":"192","endLine":29,"endColumn":33},{"ruleId":"189","severity":1,"message":"220","line":82,"column":10,"nodeType":"191","messageId":"192","endLine":82,"endColumn":18},{"ruleId":"189","severity":1,"message":"221","line":82,"column":20,"nodeType":"191","messageId":"192","endLine":82,"endColumn":31},{"ruleId":"189","severity":1,"message":"222","line":83,"column":21,"nodeType":"191","messageId":"192","endLine":83,"endColumn":33},{"ruleId":"189","severity":1,"message":"202","line":87,"column":16,"nodeType":"191","messageId":"192","endLine":87,"endColumn":23},{"ruleId":"189","severity":1,"message":"223","line":105,"column":10,"nodeType":"191","messageId":"192","endLine":105,"endColumn":18},{"ruleId":"189","severity":1,"message":"224","line":105,"column":20,"nodeType":"191","messageId":"192","endLine":105,"endColumn":31},{"ruleId":"189","severity":1,"message":"225","line":106,"column":10,"nodeType":"191","messageId":"192","endLine":106,"endColumn":21},{"ruleId":"189","severity":1,"message":"226","line":106,"column":23,"nodeType":"191","messageId":"192","endLine":106,"endColumn":37},{"ruleId":"203","severity":1,"message":"209","line":114,"column":6,"nodeType":"205","endLine":125,"endColumn":4,"suggestions":"227"},{"ruleId":"203","severity":1,"message":"204","line":160,"column":6,"nodeType":"205","endLine":160,"endColumn":30,"suggestions":"228"},{"ruleId":"203","severity":1,"message":"229","line":186,"column":6,"nodeType":"205","endLine":186,"endColumn":30,"suggestions":"230"},{"ruleId":"193","severity":1,"message":"194","line":287,"column":18,"nodeType":"195","messageId":"196","endLine":287,"endColumn":20},{"ruleId":"193","severity":1,"message":"194","line":289,"column":25,"nodeType":"195","messageId":"196","endLine":289,"endColumn":27},{"ruleId":"197","severity":1,"message":"198","line":333,"column":13,"nodeType":"199","endLine":333,"endColumn":61},{"ruleId":"231","severity":1,"message":"232","line":367,"column":21,"nodeType":"199","messageId":"233","endLine":370,"endColumn":22,"fix":"234"},{"ruleId":"231","severity":1,"message":"232","line":375,"column":21,"nodeType":"199","messageId":"233","endLine":378,"endColumn":22,"fix":"235"},{"ruleId":"193","severity":1,"message":"211","line":512,"column":36,"nodeType":"195","messageId":"196","endLine":512,"endColumn":38},{"ruleId":"197","severity":1,"message":"198","line":518,"column":25,"nodeType":"199","endLine":518,"endColumn":28},{"ruleId":"197","severity":1,"message":"198","line":539,"column":25,"nodeType":"199","endLine":539,"endColumn":28},{"ruleId":"197","severity":1,"message":"198","line":565,"column":17,"nodeType":"199","endLine":565,"endColumn":39},{"ruleId":"203","severity":1,"message":"236","line":47,"column":6,"nodeType":"205","endLine":47,"endColumn":17,"suggestions":"237"},{"ruleId":"231","severity":1,"message":"232","line":81,"column":15,"nodeType":"199","messageId":"233","endLine":85,"endColumn":16,"fix":"238"},{"ruleId":"231","severity":1,"message":"232","line":95,"column":15,"nodeType":"199","messageId":"233","endLine":99,"endColumn":16,"fix":"239"},{"ruleId":"197","severity":1,"message":"198","line":110,"column":13,"nodeType":"199","endLine":110,"endColumn":36},{"ruleId":"189","severity":1,"message":"240","line":1,"column":17,"nodeType":"191","messageId":"192","endLine":1,"endColumn":26},{"ruleId":"193","severity":1,"message":"211","line":21,"column":15,"nodeType":"195","messageId":"196","endLine":21,"endColumn":17},{"ruleId":"241","severity":1,"message":"242","line":155,"column":3,"nodeType":"243","messageId":"244","endLine":155,"endColumn":15},{"ruleId":"241","severity":1,"message":"242","line":186,"column":3,"nodeType":"243","messageId":"244","endLine":186,"endColumn":15},{"ruleId":"241","severity":1,"message":"242","line":217,"column":3,"nodeType":"243","messageId":"244","endLine":217,"endColumn":15},{"ruleId":"241","severity":1,"message":"242","line":236,"column":3,"nodeType":"243","messageId":"244","endLine":236,"endColumn":15},{"ruleId":"203","severity":1,"message":"245","line":31,"column":6,"nodeType":"205","endLine":31,"endColumn":26,"suggestions":"246"},{"ruleId":"189","severity":1,"message":"240","line":1,"column":17,"nodeType":"191","messageId":"192","endLine":1,"endColumn":26},{"ruleId":"189","severity":1,"message":"247","line":1,"column":28,"nodeType":"191","messageId":"192","endLine":1,"endColumn":36},{"ruleId":"189","severity":1,"message":"248","line":1,"column":18,"nodeType":"191","messageId":"192","endLine":1,"endColumn":27},{"ruleId":"189","severity":1,"message":"240","line":2,"column":3,"nodeType":"191","messageId":"192","endLine":2,"endColumn":12},{"ruleId":"189","severity":1,"message":"249","line":3,"column":3,"nodeType":"191","messageId":"192","endLine":3,"endColumn":10},{"ruleId":"189","severity":1,"message":"250","line":4,"column":3,"nodeType":"191","messageId":"192","endLine":4,"endColumn":14},{"ruleId":"189","severity":1,"message":"251","line":9,"column":10,"nodeType":"191","messageId":"192","endLine":9,"endColumn":17},{"ruleId":"189","severity":1,"message":"252","line":12,"column":10,"nodeType":"191","messageId":"192","endLine":12,"endColumn":24},{"ruleId":"189","severity":1,"message":"253","line":40,"column":10,"nodeType":"191","messageId":"192","endLine":40,"endColumn":28},{"ruleId":"203","severity":1,"message":"254","line":63,"column":6,"nodeType":"205","endLine":63,"endColumn":18,"suggestions":"255"},"no-native-reassign",["256"],"no-negated-in-lhs",["257"],"no-unused-vars","'MultiRangeSlider' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'MultiRangeInput' is defined but never used.","'buyNft' is assigned a value but never used.","'setSize' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selectedProperties'. Either include it or remove the dependency array.","ArrayExpression",["258"],"'updateTokenIds' is assigned a value but never used.","'mintNFT' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadNfts'. Either include it or remove the dependency array.",["259"],"Expected '!==' and instead saw '!='.","'Error' is defined but never used.","'Success' is defined but never used.","'getCurrentWallet' is defined but never used.","'tokenId' is assigned a value but never used.","'setTokenId' is assigned a value but never used.","'setIpfs' is assigned a value but never used.","'setTypeArray' is assigned a value but never used.","'ProfileImg' is defined but never used.","'tokenIds' is assigned a value but never used.","'setTokenIds' is assigned a value but never used.","'setSaleItems' is assigned a value but never used.","'newPrice' is assigned a value but never used.","'setNewPrice' is assigned a value but never used.","'newCurrency' is assigned a value but never used.","'setNewCurrency' is assigned a value but never used.",["260"],["261"],"React Hook useEffect has a missing dependency: 'loadUserDetails'. Either include it or remove the dependency array.",["262"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"263","text":"264"},{"range":"265","text":"264"},"React Hook useEffect has a missing dependency: 'saveUser'. Either include it or remove the dependency array.",["266"],{"range":"267","text":"264"},{"range":"268","text":"264"},"'Component' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","React Hook useEffect has a missing dependency: 'setSingleSelectedProperty'. Either include it or remove the dependency array. If 'setSingleSelectedProperty' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["269"],"'useState' is defined but never used.","'urlSource' is defined but never used.","'useMemo' is defined but never used.","'useCallback' is defined but never used.","'BASEURL' is defined but never used.","'PropertiesData' is defined but never used.","'selectedProperties' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'propertiesArray'. Either include it or remove the dependency array.",["270"],"no-global-assign","no-unsafe-negation",{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"271","fix":"277"},{"desc":"278","fix":"279"},[10595,10595]," rel=\"noreferrer\"",[10930,10930],{"desc":"280","fix":"281"},[2287,2287],[2679,2679],{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},"Update the dependencies array to be: [selectedProperties, singleSelectedProperty]",{"range":"286","text":"287"},"Update the dependencies array to be: [min, max, page, size, minlevel, currency, selectedType, maxlevel, selectedProperties, loadNfts]",{"range":"288","text":"289"},"Update the dependencies array to be: [min, max, page, size, minlevel, currency, selectedType, maxlevel, walletAddress, selectedProperties, loadNfts]",{"range":"290","text":"291"},{"range":"292","text":"287"},"Update the dependencies array to be: [walletAddress, address, loadUserDetails]",{"range":"293","text":"294"},"Update the dependencies array to be: [curWallet, saveUser]",{"range":"295","text":"296"},"Update the dependencies array to be: [selectedProperties, setSingleSelectedProperty]",{"range":"297","text":"298"},"Update the dependencies array to be: [properties, propertiesArray]",{"range":"299","text":"300"},[3956,3980],"[selectedProperties, singleSelectedProperty]",[5096,5233],"[min, max, page, size, minlevel, currency, selectedType, maxlevel, selectedProperties, loadNfts]",[3827,3984],"[min, max, page, size, minlevel, currency, selectedType, maxlevel, walletAddress, selectedProperties, loadNfts]",[4905,4929],[5491,5515],"[walletAddress, address, loadUserDetails]",[1356,1367],"[curWallet, saveUser]",[1000,1020],"[selectedProperties, setSingleSelectedProperty]",[1697,1709],"[properties, propertiesArray]"]
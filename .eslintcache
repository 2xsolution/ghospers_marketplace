[{"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\index.js":"1","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\App.js":"2","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\reportWebVitals.js":"3","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\Mint.js":"4","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Contact\\Contact.js":"5","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\ConnectWallet\\ConnectWallet.js":"6","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Home\\Home.js":"7","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\NFTDetail\\NFTdetail.js":"8","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\Header.js":"9","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\MultiRangeInput.js":"10","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\core\\web3.js":"11","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\utils\\Utils.js":"12","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\loader\\Loader.js":"13","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\Profile.js":"14","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\IPFSUtils.js":"15","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\updateModal\\UpdateModal.js":"16","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\accordian\\Accordian.js":"17","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\accordian\\AccordianData.js":"18","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\addPropertyModal.js\\AddPropertyModal.js":"19","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\LoaderModal.js":"20"},{"size":747,"mtime":1648646337282,"results":"21","hashOfConfig":"22"},{"size":2010,"mtime":1649166718754,"results":"23","hashOfConfig":"22"},{"size":375,"mtime":1648115103768,"results":"24","hashOfConfig":"22"},{"size":9579,"mtime":1649182401894,"results":"25","hashOfConfig":"22"},{"size":1378,"mtime":1648115103760,"results":"26","hashOfConfig":"22"},{"size":2606,"mtime":1649233546520,"results":"27","hashOfConfig":"22"},{"size":15341,"mtime":1649233067931,"results":"28","hashOfConfig":"22"},{"size":11365,"mtime":1649233115289,"results":"29","hashOfConfig":"22"},{"size":3507,"mtime":1649232203462,"results":"30","hashOfConfig":"22"},{"size":2939,"mtime":1648880453344,"results":"31","hashOfConfig":"22"},{"size":8337,"mtime":1649163485635,"results":"32","hashOfConfig":"22"},{"size":341,"mtime":1649230061512,"results":"33","hashOfConfig":"22"},{"size":242,"mtime":1649233539853,"results":"34","hashOfConfig":"22"},{"size":18171,"mtime":1649233495237,"results":"35","hashOfConfig":"22"},{"size":2034,"mtime":1648210876491,"results":"36","hashOfConfig":"22"},{"size":4905,"mtime":1648806499962,"results":"37","hashOfConfig":"22"},{"size":3544,"mtime":1649233517981,"results":"38","hashOfConfig":"22"},{"size":2113,"mtime":1648453158027,"results":"39","hashOfConfig":"22"},{"size":3630,"mtime":1648881029145,"results":"40","hashOfConfig":"22"},{"size":548,"mtime":1649163026084,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"17edddb",{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"44"},"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\index.js",[],["89","90"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\App.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\reportWebVitals.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\Mint.js",["91","92","93","94","95","96","97","98"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./mint.css\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport IPFSUtils from \"./IPFSUtils\";\r\nimport axios from \"axios\";\r\nimport { BASEURL, Error, Success } from \"../../utils/Utils\";\r\n\r\nimport {\r\n  loadWeb3,\r\n  connectWallet,\r\n  createNFT,\r\n  getCurrentWallet,\r\n} from \"../../core/web3\";\r\nimport Header from \"../../components/Header\";\r\nimport AddPropertyModal from \"./addPropertyModal.js/AddPropertyModal\";\r\nimport LoaderModal from \"./LoaderModal\";\r\nimport { NotificationManager } from \"react-notifications\";\r\n\r\nfunction Mint({ setShowModal }) {\r\n  const fileTypes = [\"JPEG\", \"PNG\", \"GIF\", \"JPG\"];\r\n\r\n  const handleChange = (file) => {\r\n    setImage(file);\r\n  };\r\n\r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [tokenId, setTokenId] = useState(\"xyz\");\r\n  const [showPropertyModal, setShowPropertyModal] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [ipfs, setIpfs] = useState(\"test\");\r\n  const [price, setPrice] = useState(\"\");\r\n  const [currency, setCurrency] = useState(\"ghsp\");\r\n  const [image, setImage] = useState(\"\");\r\n  const [selectedType, setSelectedType] = useState(\"\");\r\n  const [level, setLevel] = useState(\"\");\r\n  const [properties, setProperties] = useState(null);\r\n  // const [traitsArray, setTraitsArray] = useState([\r\n  //   \"tank\",\r\n  //   \"marksman\",\r\n  //   \"assassin\",\r\n  // ]);\r\n\r\n  const [typeArray, setTypeArray] = useState([\r\n    \"common\",\r\n    \"rare\",\r\n    \"epic\",\r\n    \"legendary\",\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const initWeb3 = async () => {\r\n      await loadWeb3();\r\n      await connectWallet();\r\n    };\r\n\r\n    initWeb3();\r\n  }, []);\r\n\r\n  const saveNft = async (e) => {\r\n    setIsLoading(true);\r\n    // NotificationManager.info(\"Please wait for a minutes.\");\r\n    IPFSUtils.uploadFileToIPFS([image]).then((lists) => {\r\n      if (lists.length > 0) {\r\n        const content_uri1 = {\r\n          name: title,\r\n          symbol: title,\r\n          image: lists[0],\r\n          properties: {\r\n            files: [{ uri: \"image.png\", type: \"image/png\" }],\r\n            category: \"image\",\r\n          },\r\n        };\r\n\r\n        IPFSUtils.uploadTextToIPFS(content_uri1).then((path) => {\r\n          try {\r\n            createNFT(path).then((res) => {\r\n              console.log(\r\n                \"********** minted token id ***********\",\r\n                res?.tokenId\r\n              );\r\n              console.log(res);\r\n              if (res && res.tokenId && res.wallet) {\r\n                var formData = new FormData();\r\n                formData.append(\"title\", title);\r\n                formData.append(\"description\", description);\r\n                formData.append(\"price\", price);\r\n                formData.append(\"nftImage\", image);\r\n                formData.append(\"currency\", currency);\r\n                formData.append(\"walletAddress\", res.wallet);\r\n                formData.append(\"type\", selectedType);\r\n                formData.append(\"tokenId\", res.tokenId);\r\n                formData.append(\"ipfs\", ipfs);\r\n                formData.append(\"properties\", JSON.stringify(properties));\r\n                formData.append(\"level\", level);\r\n\r\n                console.log(...formData);\r\n\r\n                axios\r\n                  .post(BASEURL + \"/nft/save\", formData)\r\n                  .then((response) => {\r\n                    console.log(response);\r\n                    setCurrency(\"ghsp\");\r\n                    setTitle(\"\");\r\n                    setDescription(\"\");\r\n                    setPrice(\"\");\r\n                    setSelectedType(null);\r\n                    setImage(\"\");\r\n                    setProperties(null);\r\n                    setLevel(\"\");\r\n                    setIsLoading(false);\r\n                    NotificationManager.success(\"Nft Created Successfully\");\r\n                    // window.location.reload();\r\n                  })\r\n                  .catch((e) => {\r\n                    console.log(e.response.data.message);\r\n                    NotificationManager.error(\"Error Writing to DB\");\r\n                    NotificationManager.error(e.response.data.message);\r\n                    console.log(e);\r\n                    setIsLoading(false);\r\n                    // window.location.reload();\r\n                  });\r\n              } else {\r\n                setIsLoading(false);\r\n                NotificationManager.error(\"Not Created Token ID from contract\");\r\n              }\r\n            });\r\n          } catch (error) {\r\n            setIsLoading(false);\r\n            NotificationManager.error(\"Transaction Error\");\r\n          }\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const validateFields = () => {\r\n    if (!title || !price || !level || !selectedType || !image) return false;\r\n    return true;\r\n  };\r\n\r\n  const mintNFT = async (event) => {\r\n    // const tokenID = await createNFT(\"\");\r\n    // console.log('minted token ID : ', tokenID);\r\n    // if (tokenID) {\r\n    // \tsetSampleNFTTokenID(tokenID);\r\n    // \tupdateTokenIds();\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header setShowModal={setShowModal} />\r\n      <div className=\"mint-container\">\r\n        {isLoading && <LoaderModal />}\r\n        <div className=\"file-div\">\r\n          <p>PNG, GIF, WEBP, MP4 or MP3. Max 100mb.</p>\r\n          <FileUploader\r\n            multiple={false}\r\n            handleChange={handleChange}\r\n            name=\"nftImage\"\r\n            classes=\"drag-zone\"\r\n            types={fileTypes}\r\n          />\r\n\r\n          {image && (\r\n            <>\r\n              <p className=\"preview-text\">Image Preview</p>\r\n              <img\r\n                className=\"preview-img\"\r\n                src={URL.createObjectURL(image)}\r\n                alt=\"\"\r\n              />\r\n            </>\r\n          )}\r\n        </div>\r\n        <div className=\"inputs-div\">\r\n          <div>\r\n            <label htmlFor=\"\">Title</label>\r\n            <input\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n              type=\"text\"\r\n              className=\"mint-input\"\r\n              placeholder=\"example: gaming art design\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"\">Description (Optional)</label>\r\n            <input\r\n              value={description}\r\n              onChange={(e) => setDescription(e.target.value)}\r\n              type=\"text\"\r\n              className=\"mint-input\"\r\n              placeholder=\"example: gaming art design\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"\">Price</label>\r\n            <div className=\"price-flex\">\r\n              <input\r\n                onKeyDown={(evt) => evt.key === \"e\" && evt.preventDefault()}\r\n                value={price}\r\n                onChange={(e) => {\r\n                  if (e.target.value < 0) {\r\n                    setPrice(0);\r\n                  } else if (e.target.value > 100000000) {\r\n                    setPrice(100000000);\r\n                  } else setPrice(e.target.value);\r\n                }}\r\n                type=\"number\"\r\n                min={0}\r\n                max=\"10\"\r\n                className=\"mint-input\"\r\n                placeholder=\"0.0\"\r\n              />\r\n              <select\r\n                onChange={(e) => setCurrency(e.target.value)}\r\n                value={currency}\r\n              >\r\n                <option selected value=\"ghsp\">\r\n                  GHSP\r\n                </option>\r\n                <option value=\"bnb\">BNB</option>\r\n                <option value=\"busd\">BUSD</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"\">Level</label>\r\n            <input\r\n              value={level}\r\n              max=\"20\"\r\n              min=\"0\"\r\n              onKeyDown={(evt) => evt.key === \"e\" && evt.preventDefault()}\r\n              onChange={(e) => {\r\n                if (e.target.value < 0) {\r\n                  setLevel(0);\r\n                } else if (e.target.value > 20) {\r\n                  setLevel(20);\r\n                } else setLevel(e.target.value);\r\n              }}\r\n              type=\"number\"\r\n              className=\"mint-input\"\r\n              placeholder=\"Level\"\r\n            />\r\n          </div>\r\n          <button onClick={() => setShowPropertyModal(true)}>\r\n            Add Properties\r\n          </button>\r\n          <div className=\"checkbox\">\r\n            <label htmlFor=\"\">Type</label>\r\n            <div className=\"mint-types\">\r\n              {typeArray.map((t) => {\r\n                return (\r\n                  <label key={t} className=\"checkbox-wrap mint-wrap\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={selectedType === t}\r\n                      onChange={() => {\r\n                        if (selectedType === t) {\r\n                          setSelectedType(null);\r\n                        } else setSelectedType(t);\r\n                      }}\r\n                    />\r\n                    <span className=\"checkmark\"></span>\r\n                    {t}\r\n                  </label>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n          <button onClick={saveNft} disabled={!validateFields()}>\r\n            Create Item\r\n          </button>\r\n        </div>\r\n        <AddPropertyModal\r\n          setProperties={setProperties}\r\n          properties={properties}\r\n          showModal={showPropertyModal}\r\n          setShowModal={setShowPropertyModal}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Mint;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Contact\\Contact.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\ConnectWallet\\ConnectWallet.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Home\\Home.js",["99","100","101","102","103","104","105","106","107","108","109","110"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\NFTDetail\\NFTdetail.js",["111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\Header.js",["130","131","132","133"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\MultiRangeInput.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\core\\web3.js",["134"],"\r\nimport { NotificationManager } from 'react-notifications';\r\nimport Web3 from 'web3';\r\n\r\n// const busdAbi = require('./abi/busd.json');\r\n// const ghospAbi = require('./abi/ghosp.json');\r\nconst marketAbi = require('./abi/marketplace.json');\r\nconst minterAbi = require('./abi/minter.json');\r\n\r\n\r\nconst MINTER_ADDRESS = \"0xfA9bB2B3119A7b9d40235F9e92052AB6Fd6DaD12\"\r\nconst MARKETPLACE_ADDRESS = \"0xC4d193F224Ec31c7BDc959D2D1b9Eb9d16E97A78\"\r\n// const GHOSP_ADDRESS = \"0x91c70ba82a8ed676c5a09ce1cd94cc18923e8371\"\r\n// const BUSD_ADDRESS = \"0x8301f2213c0eed49a7e28ae4c3e91722919b8b47\"   // Faucet Token\r\nlet market_contract = null;\r\nlet minter_contract = null;\r\n//let ghosp_contract = null;\r\n//let busd_contract = null;\r\n\r\nconst NETWORK_ID = 97;\r\n\r\nconst checkConnectedNetwork = async (chainId) => {\r\n    if (chainId != NETWORK_ID) {\r\n        let wallet = await getCurrentWallet();\r\n        if (wallet.success) {\r\n            NotificationManager.error(\"Please select BSC network\");\r\n        }\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const loadWeb3 = async () => {\r\n    if (window.ethereum) {\r\n        window.web3 = new Web3(window.ethereum);\r\n        window.web3.eth.handleRevert = true;\r\n    } else if (window.web3) {\r\n        window.web3 = new Web3(window.web3.currentProvider);\r\n        window.web3.eth.handleRevert = true\r\n    } else {\r\n        window.alert(\r\n            \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n        );\r\n        return;\r\n    }\r\n\r\n    minter_contract = new window.web3.eth.Contract(minterAbi, MINTER_ADDRESS);\r\n    market_contract = new window.web3.eth.Contract(marketAbi, MARKETPLACE_ADDRESS);\r\n    //    ghosp_contract = new window.web3.eth.Contract(ghospAbi, GHOSP_ADDRESS);\r\n    //    busd_contract = new window.web3.eth.Contract(busdAbi, BUSD_ADDRESS);\r\n\r\n    window.ethereum.on('chainChanged', function (chainId) {\r\n        console.log('chain chainged with this chain id : ', chainId);\r\n        checkConnectedNetwork(chainId);\r\n    });\r\n};\r\n\r\n\r\nexport const connectWallet = async () => {\r\n    // const chainId = await getConnectedNetworkId();\r\n    // if (checkConnectedNetwork(chainId) == false) {\r\n    //     return  {\r\n    //         address: \"\",\r\n    //         status: \"Network connection error\",\r\n    //         res: 3,\r\n    //     };\r\n    // }\r\n\r\n    if (window.ethereum) {\r\n        try {\r\n            const addressArray = await window.ethereum.request({\r\n                method: \"eth_requestAccounts\",\r\n            });\r\n            const obj = {\r\n                status: \"Metamask successfuly connected.\",\r\n                address: addressArray[0],\r\n            };\r\n            return obj;\r\n        } catch (err) {\r\n            return {\r\n                address: \"\",\r\n                status: \"Something went wrong: \" + err.message,\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        return {\r\n            address: \"\",\r\n            status: (\r\n                <span>\r\n                    <p>\r\n                        {\" \"}\r\n                        🦊{\" \"}\r\n                        <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\r\n                            You must install Metamask, a virtual BSC wallet, in your\r\n                            browser.\r\n                        </a>\r\n                    </p>\r\n                </span>\r\n            ),\r\n        };\r\n    }\r\n};\r\n\r\nexport const getConnectedNetworkId = async () => {\r\n    if (window.web3 && window.web3.eth) {\r\n        return await window.web3.eth.getChainId();\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\nexport const getCurrentWallet = async () => {\r\n    const web3 = window.web3;\r\n    try {\r\n        let accounts = await web3.eth.getAccounts();\r\n        let accountBalance = await web3.eth.getBalance(accounts[0]);\r\n        accountBalance = web3.utils.fromWei(accountBalance);\r\n        return {\r\n            success: true,\r\n            account: accounts[0],\r\n            balance: accountBalance\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            result: \"Something went wrong: \" + error.message\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const buyNFTWithBNB = async (tokenID, amount) => {\r\n\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        let bnAmount = window.web3.utils.toWei(\"\" + amount);\r\n        await market_contract.methods.buyNFTWithBNB(tokenID, wallet.account).send({ from: wallet.account, value: bnAmount });\r\n    } catch (error) {\r\n        console.log('buyNFTWithBNB error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const buyNFTWithGHSP = async (tokenID) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        await market_contract.methods.buyNFTWithGHSP(tokenID, wallet.account).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('buyNFTWithGHSP error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const buyNFTWithBUSD = async (tokenID) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        await market_contract.methods.buyNFTWithBUSD(tokenID, wallet.account).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('buyNFTWithBUSD error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const removeTokenFromSale = async (tokenID) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        await market_contract.methods.removeTokenFromSale(tokenID, wallet.account).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('removeTokenFromSale error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const putTokenOnSale = async (tokenID, price, saleTokenType) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        await minter_contract.methods.setApprovalForAll(MARKETPLACE_ADDRESS, true).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('setApprovalForAll error', error);\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        let bnPrice = window.web3.utils.toWei(\"\" + price);\r\n        await market_contract.methods.putTokenOnSale(tokenID, bnPrice, saleTokenType).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('putTokenOnSale error', error);\r\n        return false;\r\n    }\r\n\r\n    console.log('putTokenOnSale ok');\r\n\r\n    return true;\r\n}\r\n\r\nexport const getSaleItems = async (tokenIds) => {\r\n\r\n    let saleItems = {};\r\n    for (let i = 0; i < tokenIds.length; i++) {\r\n        let item = await market_contract.methods.saleItems(tokenIds[i]).call();\r\n        saleItems[tokenIds[i]] = item;\r\n    }\r\n\r\n    console.log(\"Sale Items : \", saleItems);\r\n\r\n    return saleItems;\r\n}\r\n\r\nexport const createNFT = async (tokenURI) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return null;\r\n    }\r\n\r\n    try {\r\n        let tokenID = 0;\r\n        let tx = await minter_contract.methods.createNFT(tokenURI).send({ from: wallet.account });\r\n        tokenID = tx.events.Transfer.returnValues.tokenId;\r\n        return { tokenId: tokenID, wallet: wallet.account };\r\n    } catch (error) {\r\n        console.log('createNFT error', error);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nexport const getCreator = async (tokenID) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        await minter_contract.methods.getCreator(tokenID).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('getCreator error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const getTokenIds = async () => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success === false) {\r\n        return [];\r\n    }\r\n\r\n    try {\r\n        let tokenIds = await minter_contract.methods.getTokenIds(wallet.account).call();\r\n        return tokenIds;\r\n    } catch (error) {\r\n        console.log('getTokenIds error', error);\r\n        return [];\r\n    }\r\n}","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\utils\\Utils.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\loader\\Loader.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\Profile.js",["135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\IPFSUtils.js",["153"],"import { create, urlSource } from 'ipfs-http-client'\r\nimport axios from 'axios';\r\n//import IPFS from 'nano-ipfs-store'\r\nlet all = require('it-all')\r\n\r\nlet client = create('https://ipfs.infura.io:5001/api/v0');\r\n\r\nconst uploadFileToIPFS = async (files) => {\r\n    console.log(\"enter uploadFileToIPFS\", files);\r\n    let lists = [];\r\n    try {\r\n        for (let i = 0; i < files.length; i++) {\r\n            const added = await client.add(files[i])\r\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n            console.log(\"[GD], FileName = \", files[i].name, \", Hash: \", added.path)\r\n            lists.push(url)\r\n        }\r\n        return lists\r\n    } catch (err) {\r\n        console.log(\"Error uploading file: \", err)\r\n        return []\r\n    }\r\n}\r\n\r\nconst uploadFolderToIPFS = async (files) => {\r\n    try {\r\n        /*let fileObjectsArray = Array.from(files).map((file) => {\r\n            return {\r\n                path: file.name,\r\n                content: file\r\n            }\r\n        })*/\r\n        const results = await all(\r\n            client.addAll(files, { wrapWithDirectory: true })\r\n        )\r\n        const length = results.length\r\n        const filesHash = results[length - 1].cid._baseCache.get('z')\r\n        const filesUrl = 'https://ipfs.infura.io/ipfs/' + filesHash\r\n        return filesUrl\r\n    } catch (err) {\r\n        console.log(\"[GD], Error uploading file: \", err)\r\n        return \"\"\r\n    }\r\n}\r\n\r\nconst uploadTextToIPFS = async (data) => {\r\n    try {\r\n        let doc = JSON.stringify(data)\r\n        const added = await client.add(doc)\r\n        const filesUrl = 'https://ipfs.infura.io/ipfs/' + added.path;\r\n        return filesUrl\r\n    } catch (err) {\r\n        //console.log(\"Error: \", err)\r\n        return null\r\n    }\r\n}\r\n\r\nconst loadFromIPFS = async (url) => {\r\n    let res = await axios.get(`https://ipfs.infura.io/ipfs/${url}`)\r\n    return res;\r\n}\r\n\r\n\r\nconst IPFSUtils = {\r\n    uploadFileToIPFS,\r\n    uploadFolderToIPFS,\r\n    uploadTextToIPFS,\r\n    loadFromIPFS\r\n}\r\n\r\n\r\nexport default IPFSUtils;","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\updateModal\\UpdateModal.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\accordian\\Accordian.js",["154"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\accordian\\AccordianData.js",[],["155","156"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\addPropertyModal.js\\AddPropertyModal.js",["157","158","159","160"],"import React, { Component, useEffect, useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport { BASEURL } from \"../../../utils/Utils\";\r\nimport \"./addPropertyModal.css\";\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction AddPropertyModal({\r\n  setShowModal,\r\n  showModal,\r\n  setProperties,\r\n  properties,\r\n}) {\r\n  console.log(showModal);\r\n  function closeModal() {\r\n    setShowModal(false);\r\n  }\r\n\r\n  const [rows, setRows] = useState([\r\n    {\r\n      type: \"\",\r\n      value: \"\",\r\n    },\r\n  ]);\r\n\r\n  const onChange = (e, index) => {\r\n    setRows((prev) =>\r\n      Object.values({\r\n        ...prev,\r\n        [index]: { ...prev[index], [e.target.name]: e.target.value },\r\n      })\r\n    );\r\n  };\r\n\r\n  const removeRow = (index) => {\r\n    console.log(index);\r\n    if (rows.length !== 1) {\r\n      console.log(rows);\r\n      console.log(rows[index]);\r\n      var rowsTemp = [...rows];\r\n      console.log(rowsTemp);\r\n      rowsTemp.splice(index, 1);\r\n      console.log(rowsTemp);\r\n      setRows(rowsTemp);\r\n    }\r\n  };\r\n\r\n  const AddRows = () => {\r\n    var rowsTemp = rows.filter((r) => r.type != \"\" && r.value != \"\");\r\n    setProperties(rowsTemp);\r\n    setShowModal(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(properties);\r\n    if (!properties) {\r\n      setRows([\r\n        {\r\n          type: \"\",\r\n          value: \"\",\r\n        },\r\n      ]);\r\n    }\r\n  }, [properties]);\r\n\r\n  return (\r\n    <div className=\"scrollable-modal\">\r\n      <Modal\r\n        isOpen={showModal}\r\n        shouldCloseOnOverlayClick={false}\r\n        // onAfterOpen={afterOpenModal}\r\n        onRequestClose={closeModal}\r\n        // style={customStyles}\r\n        // className=\"scrollable-modal\"\r\n        contentLabel=\"Example Modal\"\r\n      >\r\n        <div className=\"properties-modal-content\">\r\n          <h2>Add Properties </h2>\r\n          <div className=\"property-rows\">\r\n            {rows &&\r\n              rows.map((row, index) => {\r\n                return (\r\n                  <div key={index} className=\"inputs-div\">\r\n                    <div>\r\n                      <label htmlFor=\"\">Type</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"type\"\r\n                        value={row.type}\r\n                        onChange={(e) => onChange(e, index)}\r\n                        className=\"mint-input\"\r\n                        placeholder=\"Hair\"\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <label htmlFor=\"\">Value</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"value\"\r\n                        value={row.value}\r\n                        onChange={(e) => onChange(e, index)}\r\n                        className=\"mint-input\"\r\n                        placeholder=\"Blonde\"\r\n                      />\r\n                    </div>\r\n                    <button\r\n                      onClick={() => removeRow(index)}\r\n                      className=\"remove-btn\"\r\n                    >\r\n                      Remove\r\n                    </button>\r\n                  </div>\r\n                );\r\n              })}\r\n          </div>\r\n          <button\r\n            className=\"add-btn\"\r\n            onClick={() => {\r\n              setRows((prev) => [\r\n                ...prev,\r\n                {\r\n                  type: \"\",\r\n                  value: \"\",\r\n                },\r\n              ]);\r\n            }}\r\n          >\r\n            Add\r\n          </button>\r\n\r\n          <button onClick={AddRows}>Save</button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddPropertyModal;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\LoaderModal.js",["161","162"],"import React, { Component, useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport Loader from \"../../components/loader/Loader\";\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction LoaderModal() {\r\n  return (\r\n    <div className=\"\">\r\n      <Modal isOpen={true} contentLabel=\"Example Modal\">\r\n        <div style={{ width: \"400px\", margin: \"auto\" }}>\r\n          {/* <h2 style={{ textAlign: \"center\", marginTop: \"40px\" }}>Loading.. </h2> */}\r\n          <Loader />\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoaderModal;\r\n",{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","severity":1,"message":"168","line":6,"column":19,"nodeType":"169","messageId":"170","endLine":6,"endColumn":24},{"ruleId":"167","severity":1,"message":"171","line":6,"column":26,"nodeType":"169","messageId":"170","endLine":6,"endColumn":33},{"ruleId":"167","severity":1,"message":"172","line":12,"column":3,"nodeType":"169","messageId":"170","endLine":12,"endColumn":19},{"ruleId":"167","severity":1,"message":"173","line":28,"column":10,"nodeType":"169","messageId":"170","endLine":28,"endColumn":17},{"ruleId":"167","severity":1,"message":"174","line":28,"column":19,"nodeType":"169","messageId":"170","endLine":28,"endColumn":29},{"ruleId":"167","severity":1,"message":"175","line":31,"column":16,"nodeType":"169","messageId":"170","endLine":31,"endColumn":23},{"ruleId":"167","severity":1,"message":"176","line":44,"column":21,"nodeType":"169","messageId":"170","endLine":44,"endColumn":33},{"ruleId":"167","severity":1,"message":"177","line":142,"column":9,"nodeType":"169","messageId":"170","endLine":142,"endColumn":16},{"ruleId":"167","severity":1,"message":"178","line":66,"column":9,"nodeType":"169","messageId":"170","endLine":66,"endColumn":15},{"ruleId":"167","severity":1,"message":"179","line":84,"column":16,"nodeType":"169","messageId":"170","endLine":84,"endColumn":23},{"ruleId":"180","severity":1,"message":"181","line":124,"column":6,"nodeType":"182","endLine":124,"endColumn":30,"suggestions":"183"},{"ruleId":"167","severity":1,"message":"184","line":126,"column":9,"nodeType":"169","messageId":"170","endLine":126,"endColumn":23},{"ruleId":"167","severity":1,"message":"177","line":167,"column":9,"nodeType":"169","messageId":"170","endLine":167,"endColumn":16},{"ruleId":"180","severity":1,"message":"185","line":174,"column":6,"nodeType":"182","endLine":184,"endColumn":4,"suggestions":"186"},{"ruleId":"187","severity":1,"message":"188","line":201,"column":11,"nodeType":"189","endLine":201,"endColumn":59},{"ruleId":"187","severity":1,"message":"188","line":209,"column":15,"nodeType":"189","endLine":209,"endColumn":37},{"ruleId":"190","severity":1,"message":"191","line":352,"column":68,"nodeType":"192","messageId":"193","endLine":352,"endColumn":70},{"ruleId":"190","severity":1,"message":"194","line":413,"column":38,"nodeType":"192","messageId":"193","endLine":413,"endColumn":40},{"ruleId":"187","severity":1,"message":"188","line":419,"column":27,"nodeType":"189","endLine":419,"endColumn":30},{"ruleId":"187","severity":1,"message":"188","line":441,"column":27,"nodeType":"189","endLine":441,"endColumn":30},{"ruleId":"167","severity":1,"message":"195","line":2,"column":16,"nodeType":"169","messageId":"170","endLine":2,"endColumn":24},{"ruleId":"167","severity":1,"message":"196","line":4,"column":8,"nodeType":"169","messageId":"170","endLine":4,"endColumn":14},{"ruleId":"167","severity":1,"message":"197","line":5,"column":8,"nodeType":"169","messageId":"170","endLine":5,"endColumn":16},{"ruleId":"167","severity":1,"message":"198","line":6,"column":8,"nodeType":"169","messageId":"170","endLine":6,"endColumn":12},{"ruleId":"167","severity":1,"message":"199","line":7,"column":8,"nodeType":"169","messageId":"170","endLine":7,"endColumn":14},{"ruleId":"167","severity":1,"message":"200","line":8,"column":8,"nodeType":"169","messageId":"170","endLine":8,"endColumn":17},{"ruleId":"201","severity":1,"message":"202","line":80,"column":5,"nodeType":"203","messageId":"204","endLine":110,"endColumn":10},{"ruleId":"190","severity":1,"message":"191","line":116,"column":30,"nodeType":"192","messageId":"193","endLine":116,"endColumn":32},{"ruleId":"190","severity":1,"message":"191","line":118,"column":37,"nodeType":"192","messageId":"193","endLine":118,"endColumn":39},{"ruleId":"190","severity":1,"message":"191","line":138,"column":28,"nodeType":"192","messageId":"193","endLine":138,"endColumn":30},{"ruleId":"190","severity":1,"message":"191","line":140,"column":35,"nodeType":"192","messageId":"193","endLine":140,"endColumn":37},{"ruleId":"190","severity":1,"message":"191","line":280,"column":45,"nodeType":"192","messageId":"193","endLine":280,"endColumn":47},{"ruleId":"190","severity":1,"message":"191","line":282,"column":48,"nodeType":"192","messageId":"193","endLine":282,"endColumn":50},{"ruleId":"190","severity":1,"message":"191","line":284,"column":48,"nodeType":"192","messageId":"193","endLine":284,"endColumn":50},{"ruleId":"190","severity":1,"message":"191","line":303,"column":45,"nodeType":"192","messageId":"193","endLine":303,"endColumn":47},{"ruleId":"190","severity":1,"message":"191","line":305,"column":48,"nodeType":"192","messageId":"193","endLine":305,"endColumn":50},{"ruleId":"190","severity":1,"message":"191","line":307,"column":48,"nodeType":"192","messageId":"193","endLine":307,"endColumn":50},{"ruleId":"187","severity":1,"message":"188","line":324,"column":21,"nodeType":"189","endLine":324,"endColumn":42},{"ruleId":"187","severity":1,"message":"188","line":328,"column":21,"nodeType":"189","endLine":332,"endColumn":22},{"ruleId":"180","severity":1,"message":"205","line":47,"column":6,"nodeType":"182","endLine":47,"endColumn":17,"suggestions":"206"},{"ruleId":"207","severity":1,"message":"208","line":81,"column":15,"nodeType":"189","messageId":"209","endLine":85,"endColumn":16,"fix":"210"},{"ruleId":"207","severity":1,"message":"208","line":95,"column":15,"nodeType":"189","messageId":"209","endLine":99,"endColumn":16,"fix":"211"},{"ruleId":"187","severity":1,"message":"188","line":110,"column":13,"nodeType":"189","endLine":110,"endColumn":36},{"ruleId":"190","severity":1,"message":"194","line":23,"column":17,"nodeType":"192","messageId":"193","endLine":23,"endColumn":19},{"ruleId":"167","severity":1,"message":"212","line":9,"column":8,"nodeType":"169","messageId":"170","endLine":9,"endColumn":18},{"ruleId":"167","severity":1,"message":"176","line":19,"column":21,"nodeType":"169","messageId":"170","endLine":19,"endColumn":33},{"ruleId":"167","severity":1,"message":"213","line":71,"column":10,"nodeType":"169","messageId":"170","endLine":71,"endColumn":18},{"ruleId":"167","severity":1,"message":"214","line":71,"column":20,"nodeType":"169","messageId":"170","endLine":71,"endColumn":31},{"ruleId":"167","severity":1,"message":"215","line":72,"column":21,"nodeType":"169","messageId":"170","endLine":72,"endColumn":33},{"ruleId":"167","severity":1,"message":"179","line":75,"column":16,"nodeType":"169","messageId":"170","endLine":75,"endColumn":23},{"ruleId":"180","severity":1,"message":"185","line":96,"column":6,"nodeType":"182","endLine":107,"endColumn":4,"suggestions":"216"},{"ruleId":"180","severity":1,"message":"181","line":134,"column":6,"nodeType":"182","endLine":134,"endColumn":30,"suggestions":"217"},{"ruleId":"180","severity":1,"message":"218","line":154,"column":6,"nodeType":"182","endLine":154,"endColumn":21,"suggestions":"219"},{"ruleId":"187","severity":1,"message":"188","line":203,"column":13,"nodeType":"189","endLine":203,"endColumn":61},{"ruleId":"190","severity":1,"message":"191","line":215,"column":49,"nodeType":"192","messageId":"193","endLine":215,"endColumn":51},{"ruleId":"207","severity":1,"message":"208","line":229,"column":21,"nodeType":"189","messageId":"209","endLine":232,"endColumn":22,"fix":"220"},{"ruleId":"207","severity":1,"message":"208","line":237,"column":21,"nodeType":"189","messageId":"209","endLine":240,"endColumn":22,"fix":"221"},{"ruleId":"190","severity":1,"message":"191","line":301,"column":41,"nodeType":"192","messageId":"193","endLine":301,"endColumn":43},{"ruleId":"190","severity":1,"message":"194","line":345,"column":36,"nodeType":"192","messageId":"193","endLine":345,"endColumn":38},{"ruleId":"187","severity":1,"message":"188","line":351,"column":25,"nodeType":"189","endLine":351,"endColumn":28},{"ruleId":"187","severity":1,"message":"188","line":373,"column":25,"nodeType":"189","endLine":373,"endColumn":28},{"ruleId":"187","severity":1,"message":"188","line":397,"column":17,"nodeType":"189","endLine":397,"endColumn":39},{"ruleId":"167","severity":1,"message":"222","line":1,"column":18,"nodeType":"169","messageId":"170","endLine":1,"endColumn":27},{"ruleId":"180","severity":1,"message":"223","line":32,"column":6,"nodeType":"182","endLine":32,"endColumn":26,"suggestions":"224"},{"ruleId":"163","replacedBy":"225"},{"ruleId":"165","replacedBy":"226"},{"ruleId":"167","severity":1,"message":"227","line":1,"column":17,"nodeType":"169","messageId":"170","endLine":1,"endColumn":26},{"ruleId":"167","severity":1,"message":"228","line":3,"column":10,"nodeType":"169","messageId":"170","endLine":3,"endColumn":17},{"ruleId":"190","severity":1,"message":"194","line":48,"column":46,"nodeType":"192","messageId":"193","endLine":48,"endColumn":48},{"ruleId":"190","severity":1,"message":"194","line":48,"column":63,"nodeType":"192","messageId":"193","endLine":48,"endColumn":65},{"ruleId":"167","severity":1,"message":"227","line":1,"column":17,"nodeType":"169","messageId":"170","endLine":1,"endColumn":26},{"ruleId":"167","severity":1,"message":"229","line":1,"column":28,"nodeType":"169","messageId":"170","endLine":1,"endColumn":36},"no-native-reassign",["230"],"no-negated-in-lhs",["231"],"no-unused-vars","'Error' is defined but never used.","Identifier","unusedVar","'Success' is defined but never used.","'getCurrentWallet' is defined but never used.","'tokenId' is assigned a value but never used.","'setTokenId' is assigned a value but never used.","'setIpfs' is assigned a value but never used.","'setTypeArray' is assigned a value but never used.","'mintNFT' is assigned a value but never used.","'buyNft' is assigned a value but never used.","'setSize' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selectedProperties'. Either include it or remove the dependency array.","ArrayExpression",["232"],"'updateTokenIds' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadNfts'. Either include it or remove the dependency array.",["233"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'Navigate' is defined but never used.","'NFTimg' is defined but never used.","'coinIcon' is defined but never used.","'Icon' is defined but never used.","'Loader' is defined but never used.","'SwordIcon' is defined but never used.","no-unreachable","Unreachable code.","VariableDeclaration","unreachableCode","React Hook useEffect has a missing dependency: 'saveUser'. Either include it or remove the dependency array.",["234"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"235","text":"236"},{"range":"237","text":"236"},"'ProfileImg' is defined but never used.","'tokenIds' is assigned a value but never used.","'setTokenIds' is assigned a value but never used.","'setSaleItems' is assigned a value but never used.",["238"],["239"],"React Hook useEffect has missing dependencies: 'address' and 'loadUserDetails'. Either include them or remove the dependency array.",["240"],{"range":"241","text":"236"},{"range":"242","text":"236"},"'urlSource' is defined but never used.","React Hook useEffect has a missing dependency: 'setSingleSelectedProperty'. Either include it or remove the dependency array. If 'setSingleSelectedProperty' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["243"],["230"],["231"],"'Component' is defined but never used.","'BASEURL' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},[2261,2261]," rel=\"noreferrer\"",[2653,2653],{"desc":"250","fix":"251"},{"desc":"244","fix":"252"},{"desc":"253","fix":"254"},[6942,6942],[7277,7277],{"desc":"255","fix":"256"},"Update the dependencies array to be: [selectedProperties, singleSelectedProperty]",{"range":"257","text":"258"},"Update the dependencies array to be: [min, max, page, size, minlevel, currency, selectedType, maxlevel, selectedProperties, loadNfts]",{"range":"259","text":"260"},"Update the dependencies array to be: [curWallet, saveUser]",{"range":"261","text":"262"},"Update the dependencies array to be: [min, max, page, size, minlevel, currency, selectedType, maxlevel, walletAddress, selectedProperties, loadNfts]",{"range":"263","text":"264"},{"range":"265","text":"258"},"Update the dependencies array to be: [address, loadUserDetails, walletAddress]",{"range":"266","text":"267"},"Update the dependencies array to be: [selectedProperties, setSingleSelectedProperty]",{"range":"268","text":"269"},[3881,3905],"[selectedProperties, singleSelectedProperty]",[5015,5152],"[min, max, page, size, minlevel, currency, selectedType, maxlevel, selectedProperties, loadNfts]",[1353,1364],"[curWallet, saveUser]",[3078,3235],"[min, max, page, size, minlevel, currency, selectedType, maxlevel, walletAddress, selectedProperties, loadNfts]",[3972,3996],[4420,4435],"[address, loadUserDetails, walletAddress]",[1038,1058],"[selectedProperties, setSingleSelectedProperty]"]
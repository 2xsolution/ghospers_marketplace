[{"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\index.js":"1","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\App.js":"2","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\reportWebVitals.js":"3","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\Mint.js":"4","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Contact\\Contact.js":"5","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\ConnectWallet\\ConnectWallet.js":"6","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Home\\Home.js":"7","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\NFTDetail\\NFTdetail.js":"8","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\Header.js":"9","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\MultiRangeInput.js":"10","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\core\\web3.js":"11","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\utils\\Utils.js":"12","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\loader\\Loader.js":"13","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\Profile.js":"14","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\IPFSUtils.js":"15","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\updateModal\\UpdateModal.js":"16"},{"size":603,"mtime":1648115103756,"results":"17","hashOfConfig":"18"},{"size":1283,"mtime":1648298273159,"results":"19","hashOfConfig":"18"},{"size":375,"mtime":1648115103768,"results":"20","hashOfConfig":"18"},{"size":8360,"mtime":1648318533961,"results":"21","hashOfConfig":"18"},{"size":1378,"mtime":1648115103760,"results":"22","hashOfConfig":"18"},{"size":2200,"mtime":1648115103758,"results":"23","hashOfConfig":"18"},{"size":17637,"mtime":1648379488364,"results":"24","hashOfConfig":"18"},{"size":5976,"mtime":1648299247229,"results":"25","hashOfConfig":"18"},{"size":2176,"mtime":1648210876484,"results":"26","hashOfConfig":"18"},{"size":2694,"mtime":1648115103748,"results":"27","hashOfConfig":"18"},{"size":7516,"mtime":1648318533953,"results":"28","hashOfConfig":"18"},{"size":177,"mtime":1648317916300,"results":"29","hashOfConfig":"18"},{"size":238,"mtime":1648133365107,"results":"30","hashOfConfig":"18"},{"size":12199,"mtime":1648379502885,"results":"31","hashOfConfig":"18"},{"size":2034,"mtime":1648210876491,"results":"32","hashOfConfig":"18"},{"size":3632,"mtime":1648304194208,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"17edddb",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"36"},"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\index.js",[],["73","74"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\App.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\reportWebVitals.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\Mint.js",["75","76","77","78","79","80","81","82","83"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./mint.css\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport IPFSUtils from \"./IPFSUtils\";\r\nimport axios from \"axios\";\r\nimport { BASEURL } from \"../../utils/Utils\";\r\n\r\nimport { loadWeb3, connectWallet, createNFT, getCurrentWallet } from \"../../core/web3\";\r\nimport Header from \"../../components/Header\";\r\n\r\nfunction Mint({ setShowModal }) {\r\n  const fileTypes = [\"JPEG\", \"PNG\", \"GIF\", \"JPG\"];\r\n\r\n  const handleChange = (file) => {\r\n    setImage(file);\r\n  };\r\n\r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [tokenId, setTokenId] = useState(\"xyz\");\r\n\r\n  const [ipfs, setIpfs] = useState(\"test\");\r\n  const [price, setPrice] = useState(\"\");\r\n  const [currency, setCurrency] = useState(\"ghsp\");\r\n  const [image, setImage] = useState(\"\");\r\n  const [selectedType, setSelectedType] = useState(null);\r\n  const [selectedTraits, setSelectedTraits] = useState([]);\r\n  const [level, setLevel] = useState(null);\r\n  const [traitsArray, setTraitsArray] = useState([\r\n    \"tank\",\r\n    \"marksman\",\r\n    \"assassin\",\r\n  ]);\r\n\r\n  const [typeArray, setTypeArray] = useState([\r\n    \"common\",\r\n    \"rare\",\r\n    \"epic\",\r\n    \"legendary\",\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const initWeb3 = async () => {\r\n      await loadWeb3();\r\n      await connectWallet();\r\n    };\r\n\r\n    initWeb3();\r\n  }, []);\r\n\r\n  const saveNft = async (e) => {\r\n    IPFSUtils.uploadFileToIPFS([image]).then((lists) => {\r\n      if (lists.length > 0) {\r\n        const content_uri1 = {\r\n          name: title,\r\n          symbol: title,\r\n          image: lists[0],\r\n          properties: {\r\n            files: [{ uri: \"image.png\", type: \"image/png\" }],\r\n            category: \"image\",\r\n          },\r\n        };\r\n\r\n        IPFSUtils.uploadTextToIPFS(content_uri1).then((path) => {\r\n          try {\r\n            createNFT(path).then((res) => {\r\n              console.log(\"********** minted token id ***********\", res.tokenId);\r\n\r\n              var formData = new FormData();\r\n              formData.append(\"title\", title);\r\n              formData.append(\"description\", description);\r\n              formData.append(\"price\", price);\r\n              formData.append(\"nftImage\", image);\r\n              formData.append(\"currency\", currency);\r\n              formData.append(\"walletAddress\", res.wallet);\r\n              formData.append(\"type\", selectedType);\r\n              formData.append(\"tokenId\", res.tokenId);\r\n              formData.append(\"ipfs\", ipfs);\r\n              formData.append(\"level\", level);\r\n              formData.append(\"traits\", selectedTraits);\r\n\r\n              console.log(...formData);\r\n\r\n              axios\r\n                .post(BASEURL + \"/nft/save\", formData)\r\n                .then((response) => {\r\n                  console.log(response);\r\n                  setCurrency(\"ghsp\");\r\n                  setTitle(\"\");\r\n                  setDescription(\"\");\r\n                  setPrice(\"\");\r\n                  setSelectedTraits([]);\r\n                  setSelectedType(null);\r\n                  setImage(\"\");\r\n                  setLevel(\"\");\r\n                })\r\n                .catch((e) => console.log(e));\r\n            });\r\n          } catch (error) {\r\n            alert(\"error\");\r\n          }\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const validateFields = () => {\r\n    if (\r\n      !title ||\r\n      !price ||\r\n      !level ||\r\n      !selectedType ||\r\n      !selectedTraits.length > 0\r\n    )\r\n      return false;\r\n    return true;\r\n  };\r\n\r\n  const mintNFT = async (event) => {\r\n    // const tokenID = await createNFT(\"\");\r\n    // console.log('minted token ID : ', tokenID);\r\n    // if (tokenID) {\r\n    // \tsetSampleNFTTokenID(tokenID);\r\n    // \tupdateTokenIds();\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header setShowModal={setShowModal} />\r\n      <div className=\"mint-container\">\r\n        <div className=\"file-div\">\r\n          <p>PNG, GIF, WEBP, MP4 or MP3. Max 100mb.</p>\r\n          <FileUploader\r\n            multiple={false}\r\n            handleChange={handleChange}\r\n            name=\"nftImage\"\r\n            classes=\"drag-zone\"\r\n            types={fileTypes}\r\n          />\r\n        </div>\r\n        <div className=\"inputs-div\">\r\n          <div>\r\n            <label htmlFor=\"\">Title</label>\r\n            <input\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n              type=\"text\"\r\n              className=\"mint-input\"\r\n              placeholder=\"example: gaming art design\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"\">Description (Optional)</label>\r\n            <input\r\n              value={description}\r\n              onChange={(e) => setDescription(e.target.value)}\r\n              type=\"text\"\r\n              className=\"mint-input\"\r\n              placeholder=\"example: gaming art design\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"\">Price</label>\r\n            <div className=\"price-flex\">\r\n              <input\r\n                value={price}\r\n                onChange={(e) => setPrice(e.target.value)}\r\n                type=\"number\"\r\n                className=\"mint-input\"\r\n                placeholder=\"0 BNB\"\r\n              />\r\n              <select\r\n                onChange={(e) => setCurrency(e.target.value)}\r\n                value={currency}\r\n              >\r\n                <option selected value=\"ghsp\">\r\n                  GHSP\r\n                </option>\r\n                <option value=\"bnb\">BNB</option>\r\n                <option value=\"busd\">BUSD</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"\">Level</label>\r\n            <input\r\n              value={level}\r\n              max={100}\r\n              min={0}\r\n              onChange={(e) => setLevel(e.target.value)}\r\n              type=\"number\"\r\n              className=\"mint-input\"\r\n              placeholder=\"Level\"\r\n            />\r\n          </div>\r\n          <div className=\"checkbox\">\r\n            <label htmlFor=\"\">Type</label>\r\n            <div className=\"mint-types\">\r\n              {typeArray.map((t) => {\r\n                return (\r\n                  <label key={t} className=\"checkbox-wrap mint-wrap\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={selectedType == t}\r\n                      onChange={() => {\r\n                        if (selectedType == t) {\r\n                          setSelectedType(null);\r\n                        } else setSelectedType(t);\r\n                      }}\r\n                    />\r\n                    <span className=\"checkmark\"></span>\r\n                    {t}\r\n                  </label>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n          <div className=\"checkbox\">\r\n            <label htmlFor=\"\">Traits</label>\r\n            <div className=\"mint-types\">\r\n              {traitsArray &&\r\n                traitsArray.map((trait) => {\r\n                  return (\r\n                    <label className=\"checkbox-wrap  mint-wrap\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={\r\n                          selectedTraits && selectedTraits.includes(trait)\r\n                        }\r\n                        onChange={() => {\r\n                          if (\r\n                            selectedTraits &&\r\n                            selectedTraits.includes(trait)\r\n                          ) {\r\n                            var remaningTraits =\r\n                              selectedTraits &&\r\n                              selectedTraits.filter((t) => t !== trait);\r\n                            setSelectedTraits(remaningTraits);\r\n                          } else {\r\n                            setSelectedTraits((prev) => [...prev, trait]);\r\n                          }\r\n                        }}\r\n                      />\r\n                      <span className=\"checkmark\"></span>\r\n                      {trait}\r\n                    </label>\r\n                  );\r\n                })}\r\n            </div>\r\n          </div>\r\n          <button onClick={saveNft} disabled={!validateFields()}>\r\n            Create Item\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Mint;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Contact\\Contact.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\ConnectWallet\\ConnectWallet.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Home\\Home.js",["84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\NFTDetail\\NFTdetail.js",["106","107","108"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport Header from \"../../components/Header\";\r\nimport NFTimg from \"../../assets/img/nftimg.png\";\r\nimport coinIcon from \"../../assets/img/coinicon.png\";\r\nimport Icon from \"../../assets/img/icon_stat.png\";\r\nimport SwordIcon from \"../../assets/img/sword.png\";\r\nimport \"./nftdetail.css\";\r\nimport axios from \"axios\";\r\nimport { BASEURL } from \"../../utils/Utils\";\r\nimport {\r\n  loadWeb3,\r\n  connectWallet,\r\n  buyNFTWithBNB,\r\n  buyNFTWithBUSD,\r\n  buyNFTWithGHSP,\r\n} from \"../../core/web3\";\r\n\r\nconst NFTdetail = ({ setShowModal }) => {\r\n  console.log(useParams());\r\n  const [nftDetail, setNftDetail] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const initWeb3 = async () => {\r\n      await loadWeb3();\r\n      await connectWallet();\r\n    };\r\n\r\n    initWeb3();\r\n  }, []);\r\n\r\n  const { nftId, tokenId } = useParams();\r\n  console.log(nftId);\r\n  console.log(tokenId);\r\n  useEffect(() => {\r\n    console.log(nftId);\r\n    loadNftById(nftId);\r\n  }, [nftId]);\r\n\r\n  const loadNftById = async (id) => {\r\n    axios\r\n      .get(`${BASEURL}/nft/${id}`)\r\n      .then((response) => {\r\n        console.log(response.data.data);\r\n        setNftDetail(response.data.data);\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n\r\n  const buyNFT = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (tokenId) {\r\n      const saleTokenType = 2; // GHSP, BUSD, BNB\r\n      if (saleTokenType == 0) {\r\n        await buyNFTWithGHSP(tokenId);\r\n      } else if (saleTokenType == 1) {\r\n        await buyNFTWithBUSD(tokenId);\r\n      } else {\r\n        await buyNFTWithBNB(tokenId, 0.01);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header setShowModal={setShowModal} />\r\n      <section className=\"nft\">\r\n        <div className=\"container\">\r\n          <div className=\"home-btn\">\r\n            <Link to=\"/\">Back to home</Link>\r\n          </div>\r\n          <div className=\"nft-detail-container\">\r\n            <div className=\"nft-img\">\r\n              <img\r\n                src={nftDetail && `${BASEURL}/uploads/${nftDetail.imageUrl}`}\r\n                alt=\"nft_image\"\r\n              />\r\n            </div>\r\n            <div className=\"nft-detail\">\r\n              <div className=\"nft-titles\">\r\n                <div className=\"title\">\r\n                  <h1>{nftDetail && nftDetail.title} </h1>\r\n                  <p>{nftDetail && nftDetail.description} </p>\r\n                </div>\r\n                <div className=\"title-right\">\r\n                  <div className=\"head\">\r\n                    <p>HERD</p>\r\n                    <span>Epic</span>\r\n                  </div>\r\n                  <div className=\"head\">\r\n                    <p>SKIN</p>\r\n                    <span>Normal</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <p className=\"view-owner\"> View Owner</p>\r\n              {/* <div className=\"select-fields\">\r\n                <select>\r\n                  <option selected=\"\" value=\"0\">\r\n                    View Owner\r\n                  </option>\r\n                  <option value=\"1\">No Wrapper</option>\r\n                  <option value=\"2\">No JS</option>\r\n                  <option value=\"3\">Nice!</option>\r\n                </select>\r\n              </div> */}\r\n              <div className=\"nft-data\">\r\n                <ul className=\"tags\">\r\n                  <li>\r\n                    <a href=\"/\" className=\"active-tag\">\r\n                      P2E Info\r\n                    </a>\r\n                  </li>\r\n                  <li>\r\n                    <a href=\"/\">Stats</a>\r\n                  </li>\r\n                  <li>\r\n                    <a href=\"/\">Fury</a>\r\n                  </li>\r\n                  <li>\r\n                    <a href=\"/\">Passive</a>\r\n                  </li>\r\n                </ul>\r\n\r\n                <div className=\"nft-reward\">\r\n                  <div className=\"icon\">\r\n                    <img src={coinIcon} alt=\"coinIcon\" />\r\n                  </div>\r\n                  <div className=\"rewards\">\r\n                    <p>Basic Battle Rewards:</p>\r\n                    <div className=\"reward-data\">\r\n                      <div className=\"reward\">\r\n                        <span>Win:</span>\r\n                        <span>+6</span>\r\n                      </div>\r\n                      <div className=\"reward\">\r\n                        <span>Draw:</span>\r\n                        <span>+2</span>\r\n                      </div>\r\n                      <div className=\"reward\">\r\n                        <span>Lose:</span>\r\n                        <span>+1</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"nft-stats\">\r\n                  <div className=\"stat\">\r\n                    <img src={Icon} alt=\"icon\" />\r\n                    <p>Win Bonus</p>\r\n                  </div>\r\n                  <p>6.695</p>\r\n                </div>\r\n                <div className=\"nft-stats\">\r\n                  <div className=\"stat\">\r\n                    <img src={SwordIcon} alt=\"icon\" />\r\n                    <p>gTHC Battles</p>\r\n                  </div>\r\n                  <p>70/394</p>\r\n                </div>\r\n                <div className=\"nft-stats\">\r\n                  <div className=\"stat\">\r\n                    <img src={SwordIcon} alt=\"icon\" />\r\n                    <p>Daily gTHC Battles</p>\r\n                  </div>\r\n                  <p>10</p>\r\n                </div>\r\n              </div>\r\n              <div className=\"nft-price\">\r\n                <h1>1,800 THC</h1>\r\n                <p>{nftDetail && nftDetail.price} USD</p>\r\n              </div>\r\n              <div className=\"buy-btn\">\r\n                <a href=\"/\" onClick={buyNFT}>\r\n                  BUY NOW\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NFTdetail;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\Header.js",["109","110"],"import React, { useEffect, useState } from \"react\";\r\nimport { NavLink, Link } from \"react-router-dom\";\r\nimport logo from \"../assets/img/logo.6eaa2fdb.png\";\r\nimport \"./header.css\";\r\n\r\nimport {\r\n\tloadWeb3,\r\n\tconnectWallet,\r\n\tgetCurrentWallet,\r\n} from \"../core/web3\";\r\n\r\nconst Header = ({ setShowModal }) => {\r\n\tconst [navActive, isnavActive] = useState(false);\r\n\tconst [curWallet, setCurWallet] = useState(\"\");\r\n\r\n\tconst onConnectWallet = async () => {\r\n\t\tif (curWallet != \"\") {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tawait loadWeb3();\r\n\t\tlet res = await connectWallet();\r\n\t\tsetCurWallet(res.address);\r\n\t}\r\n\r\n\tconst openModal = (e) => {\r\n\t\tconsole.log(\"hwllo\");\r\n\t\te.preventDefault();\r\n\t\t// setShowModal((prev) => !prev);\r\n\r\n\t\tonConnectWallet();\r\n\t};\r\n\r\n\tconst getWallet = async () => {\r\n\t\tlet res = await getCurrentWallet();\r\n\t\tif (res.success) {\r\n\t\t\tsetCurWallet(res.account);\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tgetWallet();\r\n\t});\r\n\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<Link to=\"/\">\r\n\t\t\t\t\t<div className=\"logo\">\r\n\t\t\t\t\t\t<img src={logo} alt=\"logo\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Link>\r\n\t\t\t\t<div className={navActive ? \"links nav-active\" : \"links\"}>\r\n\t\t\t\t\t<ul className=\"navigations\">\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"https://ghospers.com/\" activeclassname=\"active\">\r\n\t\t\t\t\t\t\t\tHome\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<NavLink to=\"/\" activeclassname=\"active\">\r\n\t\t\t\t\t\t\t\tOfficial\r\n\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"https://staking.ghospers.com/\" activeclassname=\"active\">\r\n\t\t\t\t\t\t\t\tStaking\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t{/* <li>\r\n\t\t\t\t\t\t\t<NavLink to=\"/contact\" activeclassname=\"active\">\r\n\t\t\t\t\t\t\t\tContact Us\r\n\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t</li> */}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t\t<div className=\"nav-btn\">\r\n\t\t\t\t\t\t<a href=\"/\" onClick={openModal}>\r\n\t\t\t\t\t\t\t{curWallet == \"\" ? \"Connect Wallet\" : curWallet.slice(0, 5) + \"...\" + curWallet.slice(-4)}\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t<a href=\"/\">Login</a>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"hamburger\" onClick={() => isnavActive(!navActive)}>\r\n\t\t\t\t\t<div className=\"line1\"></div>\r\n\t\t\t\t\t<div className=\"line2\"></div>\r\n\t\t\t\t\t<div className=\"line3\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</header>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\MultiRangeInput.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\core\\web3.js",["111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128"],"\r\nimport Web3 from 'web3';\r\n\r\nconst busdAbi = require('./abi/busd.json');\r\nconst ghospAbi = require('./abi/ghosp.json');\r\nconst marketAbi = require('./abi/marketplace.json');\r\nconst minterAbi = require('./abi/minter.json');\r\n\r\n\r\nconst MINTER_ADDRESS = \"0xfA9bB2B3119A7b9d40235F9e92052AB6Fd6DaD12\"\r\nconst MARKETPLACE_ADDRESS = \"0xC4d193F224Ec31c7BDc959D2D1b9Eb9d16E97A78\"\r\nconst GHOSP_ADDRESS = \"0x91c70ba82a8ed676c5a09ce1cd94cc18923e8371\"\r\nconst BUSD_ADDRESS = \"0x8301f2213c0eed49a7e28ae4c3e91722919b8b47\"   // Faucet Token\r\nlet market_contract = null;\r\nlet minter_contract = null;\r\nlet ghosp_contract = null;\r\nlet busd_contract = null;\r\n\r\n\r\nexport const loadWeb3 = async () => {\r\n    if (window.ethereum) {\r\n        window.web3 = new Web3(window.ethereum);\r\n        window.web3.eth.handleRevert = true;\r\n    } else if (window.web3) {\r\n        window.web3 = new Web3(window.web3.currentProvider);\r\n        window.web3.eth.handleRevert = true\r\n    } else {\r\n        window.alert(\r\n            \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n        );\r\n        return;\r\n    }\r\n\r\n    minter_contract = new window.web3.eth.Contract(minterAbi, MINTER_ADDRESS);\r\n    market_contract = new window.web3.eth.Contract(marketAbi, MARKETPLACE_ADDRESS);\r\n    ghosp_contract = new window.web3.eth.Contract(ghospAbi, GHOSP_ADDRESS);\r\n    busd_contract = new window.web3.eth.Contract(busdAbi, BUSD_ADDRESS);\r\n\r\n    window.ethereum.on('chainChanged', function (chainId) {\r\n\r\n    });\r\n};\r\n\r\n\r\nexport const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n        try {\r\n            const addressArray = await window.ethereum.request({\r\n                method: \"eth_requestAccounts\",\r\n            });\r\n            const obj = {\r\n                status: \"Metamask successfuly connected.\",\r\n                address: addressArray[0],\r\n            };\r\n            return obj;\r\n        } catch (err) {\r\n            return {\r\n                address: \"\",\r\n                status: \"Something went wrong: \" + err.message,\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        return {\r\n            address: \"\",\r\n            status: (\r\n                <span>\r\n                    <p>\r\n                        {\" \"}\r\n                        🦊{\" \"}\r\n                        <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\r\n                            You must install Metamask, a virtual BSC wallet, in your\r\n                            browser.\r\n                        </a>\r\n                    </p>\r\n                </span>\r\n            ),\r\n        };\r\n    }\r\n};\r\n\r\n\r\nexport const getCurrentWallet = async () => {\r\n    const web3 = window.web3;\r\n    try {\r\n        let accounts = await web3.eth.getAccounts();\r\n        let accountBalance = await web3.eth.getBalance(accounts[0]);\r\n        accountBalance = web3.utils.fromWei(accountBalance);\r\n        return {\r\n            success: true,\r\n            account: accounts[0],\r\n            balance: accountBalance\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            result: \"Something went wrong: \" + error.message\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const buyNFTWithBNB = async (tokenID, amount) => {\r\n\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success == false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        let bnAmount = window.web3.utils.toWei(\"\" + amount);\r\n        console.log('ssssssssssss', tokenID, bnAmount);\r\n        let tx = await market_contract.methods.buyNFTWithBNB(tokenID, wallet.account).send({ from: wallet.account, value: bnAmount });\r\n    } catch (error) {\r\n        console.log('buyNFTWithBNB error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const buyNFTWithGHSP = async (tokenID) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success == false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        let tx = await market_contract.methods.buyNFTWithGHSP(tokenID, wallet.account).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('buyNFTWithGHSP error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const buyNFTWithBUSD = async (tokenID) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success == false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        let tx = await market_contract.methods.buyNFTWithBUSD(tokenID, wallet.account).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('buyNFTWithBUSD error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const removeTokenFromSale = async (tokenID) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success == false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        let tx = await market_contract.methods.removeTokenFromSale(tokenID, wallet.account).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('removeTokenFromSale error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const putTokenOnSale = async (tokenID, price, saleTokenType) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success == false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        await minter_contract.methods.setApprovalForAll(MARKETPLACE_ADDRESS, true).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('setApprovalForAll error', error);\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        let bnPrice = window.web3.utils.toWei(\"\" + price);\r\n        let tx = await market_contract.methods.putTokenOnSale(tokenID, bnPrice, saleTokenType).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('putTokenOnSale error', error);\r\n        return false;\r\n    }\r\n\r\n    console.log('putTokenOnSale ok');\r\n\r\n    return true;\r\n}\r\n\r\nexport const getSaleItems = async (tokenIds) => {\r\n\r\n    let saleItems = {};\r\n    for (let i = 0; i < tokenIds.length; i++) {\r\n        let item = await market_contract.methods.saleItems(tokenIds[i]).call();\r\n        saleItems[tokenIds[i]] = item;\r\n    }\r\n\r\n    console.log(\"Sale Items : \", saleItems);\r\n\r\n    return saleItems;\r\n}\r\n\r\nexport const createNFT = async (tokenURI) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success == false) {\r\n        return null;\r\n    }\r\n\r\n    try {\r\n        let tokenID = 0;\r\n        let tx = await minter_contract.methods.createNFT(tokenURI).send({ from: wallet.account });\r\n        tokenID = tx.events.Transfer.returnValues.tokenId;\r\n        return {tokenId: tokenID, wallet: wallet.account};\r\n    } catch (error) {\r\n        console.log('createNFT error', error);\r\n        return null;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n\r\nexport const getCreator = async (tokenID) => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success == false) {\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        let tx = await minter_contract.methods.getCreator(tokenID).send({ from: wallet.account });\r\n    } catch (error) {\r\n        console.log('getCreator error', error);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const getTokenIds = async () => {\r\n    const wallet = await getCurrentWallet();\r\n    if (wallet.success == false) {\r\n        return [];\r\n    }\r\n\r\n    try {\r\n        let tokenIds = await minter_contract.methods.getTokenIds(wallet.account).call();\r\n        return tokenIds;\r\n    } catch (error) {\r\n        console.log('getTokenIds error', error);\r\n        return [];\r\n    }\r\n\r\n    return [];\r\n}","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\utils\\Utils.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\loader\\Loader.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\Profile.js",["129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\IPFSUtils.js",["146"],"import { create, urlSource } from 'ipfs-http-client'\r\nimport axios from 'axios';\r\n//import IPFS from 'nano-ipfs-store'\r\nlet all = require('it-all')\r\n\r\nlet client = create('https://ipfs.infura.io:5001/api/v0');\r\n\r\nconst uploadFileToIPFS = async (files) => {\r\n    console.log(\"enter uploadFileToIPFS\", files);\r\n    let lists = [];\r\n    try {\r\n        for (let i = 0; i < files.length; i++) {\r\n            const added = await client.add(files[i])\r\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n            console.log(\"[GD], FileName = \", files[i].name, \", Hash: \", added.path)\r\n            lists.push(url)\r\n        }\r\n        return lists\r\n    } catch (err) {\r\n        console.log(\"Error uploading file: \", err)\r\n        return []\r\n    }\r\n}\r\n\r\nconst uploadFolderToIPFS = async (files) => {\r\n    try {\r\n        /*let fileObjectsArray = Array.from(files).map((file) => {\r\n            return {\r\n                path: file.name,\r\n                content: file\r\n            }\r\n        })*/\r\n        const results = await all(\r\n            client.addAll(files, { wrapWithDirectory: true })\r\n        )\r\n        const length = results.length\r\n        const filesHash = results[length - 1].cid._baseCache.get('z')\r\n        const filesUrl = 'https://ipfs.infura.io/ipfs/' + filesHash\r\n        return filesUrl\r\n    } catch (err) {\r\n        console.log(\"[GD], Error uploading file: \", err)\r\n        return \"\"\r\n    }\r\n}\r\n\r\nconst uploadTextToIPFS = async (data) => {\r\n    try {\r\n        let doc = JSON.stringify(data)\r\n        const added = await client.add(doc)\r\n        const filesUrl = 'https://ipfs.infura.io/ipfs/' + added.path;\r\n        return filesUrl\r\n    } catch (err) {\r\n        //console.log(\"Error: \", err)\r\n        return null\r\n    }\r\n}\r\n\r\nconst loadFromIPFS = async (url) => {\r\n    let res = await axios.get(`https://ipfs.infura.io/ipfs/${url}`)\r\n    return res;\r\n}\r\n\r\n\r\nconst IPFSUtils = {\r\n    uploadFileToIPFS,\r\n    uploadFolderToIPFS,\r\n    uploadTextToIPFS,\r\n    loadFromIPFS\r\n}\r\n\r\n\r\nexport default IPFSUtils;","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\updateModal\\UpdateModal.js",["147","148","149","150"],"import axios from \"axios\";\r\nimport React, { Component, useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Modal from \"react-modal\";\r\nimport { BASEURL } from \"../../../utils/Utils\";\r\nimport \"./updateModal.css\";\r\n\r\nconst customStyles = {\r\n  content: {\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    right: \"auto\",\r\n    bottom: \"auto\",\r\n    marginRight: \"-50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n  },\r\n};\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction UpdateModal({ setShowModal, showModal }) {\r\n  function closeModal() {\r\n    setShowModal(false);\r\n  }\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [introduction, setIntroduction] = useState(\"\");\r\n  const [facebook, setFacebook] = useState(\"\");\r\n  const [instagram, setInstagram] = useState(\"\");\r\n  const [walletAddress, setWalletAddress] = useState(\"xyz\");\r\n\r\n  const validateFields = () => {\r\n    if (!name || !introduction || !facebook || !instagram || !walletAddress)\r\n      return false;\r\n    return true;\r\n  };\r\n\r\n  const updateProfile = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!validateFields()) return;\r\n\r\n    axios\r\n      .put(BASEURL + \"/user/update\", {\r\n        name,\r\n        introduction,\r\n        facebook,\r\n        instagram,\r\n        walletAddress,\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n        setFacebook(\"\");\r\n        setInstagram(\"\");\r\n        setName(\"\");\r\n        setIntroduction(\"\");\r\n        closeModal();\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        isOpen={showModal}\r\n        // onAfterOpen={afterOpenModal}\r\n        onRequestClose={closeModal}\r\n        // style={customStyles}\r\n        contentLabel=\"Example Modal\"\r\n      >\r\n        <div className=\"update-modal-content\">\r\n          <h2>Update Profile</h2>\r\n          <div className=\"inputs-div\">\r\n            <div>\r\n              <label htmlFor=\"\">Name</label>\r\n              <input\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n                type=\"text\"\r\n                className=\"mint-input\"\r\n                placeholder=\"John Doe\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"inputs-div\">\r\n            <div>\r\n              <label htmlFor=\"\">Introduction</label>\r\n              <input\r\n                value={introduction}\r\n                onChange={(e) => setIntroduction(e.target.value)}\r\n                type=\"text\"\r\n                className=\"mint-input\"\r\n                placeholder=\"Introduction\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"inputs-div\">\r\n            <div>\r\n              <label htmlFor=\"\">Facebook Link</label>\r\n              <input\r\n                value={facebook}\r\n                onChange={(e) => setFacebook(e.target.value)}\r\n                type=\"text\"\r\n                className=\"mint-input\"\r\n                placeholder=\"facebook.com/username\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"inputs-div\">\r\n            <div>\r\n              <label htmlFor=\"\">Instagram Link</label>\r\n              <input\r\n                value={instagram}\r\n                onChange={(e) => setInstagram(e.target.value)}\r\n                type=\"text\"\r\n                className=\"mint-input\"\r\n                placeholder=\"instagram.com/username\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <button disabled={!validateFields()} onClick={updateProfile}>\r\n            Update Profile\r\n          </button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UpdateModal;\r\n",{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":8,"column":46,"nodeType":"157","messageId":"158","endLine":8,"endColumn":62},{"ruleId":"155","severity":1,"message":"159","line":20,"column":10,"nodeType":"157","messageId":"158","endLine":20,"endColumn":17},{"ruleId":"155","severity":1,"message":"160","line":20,"column":19,"nodeType":"157","messageId":"158","endLine":20,"endColumn":29},{"ruleId":"155","severity":1,"message":"161","line":22,"column":16,"nodeType":"157","messageId":"158","endLine":22,"endColumn":23},{"ruleId":"155","severity":1,"message":"162","line":29,"column":23,"nodeType":"157","messageId":"158","endLine":29,"endColumn":37},{"ruleId":"155","severity":1,"message":"163","line":35,"column":21,"nodeType":"157","messageId":"158","endLine":35,"endColumn":33},{"ruleId":"155","severity":1,"message":"164","line":119,"column":9,"nodeType":"157","messageId":"158","endLine":119,"endColumn":16},{"ruleId":"165","severity":1,"message":"166","line":205,"column":45,"nodeType":"167","messageId":"168","endLine":205,"endColumn":47},{"ruleId":"165","severity":1,"message":"166","line":207,"column":42,"nodeType":"167","messageId":"168","endLine":207,"endColumn":44},{"ruleId":"155","severity":1,"message":"169","line":4,"column":8,"nodeType":"157","messageId":"158","endLine":4,"endColumn":13},{"ruleId":"155","severity":1,"message":"170","line":5,"column":8,"nodeType":"157","messageId":"158","endLine":5,"endColumn":13},{"ruleId":"155","severity":1,"message":"163","line":32,"column":21,"nodeType":"157","messageId":"158","endLine":32,"endColumn":33},{"ruleId":"155","severity":1,"message":"162","line":39,"column":23,"nodeType":"157","messageId":"158","endLine":39,"endColumn":37},{"ruleId":"155","severity":1,"message":"171","line":107,"column":10,"nodeType":"157","messageId":"158","endLine":107,"endColumn":26},{"ruleId":"155","severity":1,"message":"172","line":107,"column":28,"nodeType":"157","messageId":"158","endLine":107,"endColumn":47},{"ruleId":"155","severity":1,"message":"173","line":108,"column":10,"nodeType":"157","messageId":"158","endLine":108,"endColumn":18},{"ruleId":"155","severity":1,"message":"174","line":112,"column":16,"nodeType":"157","messageId":"158","endLine":112,"endColumn":23},{"ruleId":"155","severity":1,"message":"175","line":118,"column":10,"nodeType":"157","messageId":"158","endLine":118,"endColumn":16},{"ruleId":"155","severity":1,"message":"176","line":118,"column":18,"nodeType":"157","messageId":"158","endLine":118,"endColumn":27},{"ruleId":"165","severity":1,"message":"166","line":128,"column":17,"nodeType":"167","messageId":"168","endLine":128,"endColumn":19},{"ruleId":"165","severity":1,"message":"166","line":135,"column":63,"nodeType":"167","messageId":"168","endLine":135,"endColumn":65},{"ruleId":"155","severity":1,"message":"177","line":153,"column":9,"nodeType":"157","messageId":"158","endLine":153,"endColumn":23},{"ruleId":"178","severity":1,"message":"179","line":177,"column":6,"nodeType":"180","endLine":177,"endColumn":12,"suggestions":"181"},{"ruleId":"182","severity":1,"message":"183","line":211,"column":15,"nodeType":"184","endLine":211,"endColumn":37},{"ruleId":"165","severity":1,"message":"166","line":221,"column":47,"nodeType":"167","messageId":"168","endLine":221,"endColumn":49},{"ruleId":"165","severity":1,"message":"166","line":223,"column":44,"nodeType":"167","messageId":"168","endLine":223,"endColumn":46},{"ruleId":"165","severity":1,"message":"166","line":364,"column":64,"nodeType":"167","messageId":"168","endLine":364,"endColumn":66},{"ruleId":"165","severity":1,"message":"166","line":382,"column":45,"nodeType":"167","messageId":"168","endLine":382,"endColumn":47},{"ruleId":"165","severity":1,"message":"185","line":530,"column":32,"nodeType":"167","messageId":"168","endLine":530,"endColumn":34},{"ruleId":"182","severity":1,"message":"183","line":535,"column":21,"nodeType":"184","endLine":535,"endColumn":24},{"ruleId":"182","severity":1,"message":"183","line":554,"column":21,"nodeType":"184","endLine":554,"endColumn":24},{"ruleId":"155","severity":1,"message":"186","line":4,"column":8,"nodeType":"157","messageId":"158","endLine":4,"endColumn":14},{"ruleId":"165","severity":1,"message":"166","line":55,"column":25,"nodeType":"167","messageId":"168","endLine":55,"endColumn":27},{"ruleId":"165","severity":1,"message":"166","line":57,"column":32,"nodeType":"167","messageId":"168","endLine":57,"endColumn":34},{"ruleId":"165","severity":1,"message":"185","line":17,"column":17,"nodeType":"167","messageId":"168","endLine":17,"endColumn":19},{"ruleId":"165","severity":1,"message":"166","line":77,"column":19,"nodeType":"167","messageId":"168","endLine":77,"endColumn":21},{"ruleId":"155","severity":1,"message":"187","line":16,"column":5,"nodeType":"157","messageId":"158","endLine":16,"endColumn":19},{"ruleId":"155","severity":1,"message":"188","line":17,"column":5,"nodeType":"157","messageId":"158","endLine":17,"endColumn":18},{"ruleId":"165","severity":1,"message":"166","line":106,"column":24,"nodeType":"167","messageId":"168","endLine":106,"endColumn":26},{"ruleId":"155","severity":1,"message":"189","line":113,"column":13,"nodeType":"157","messageId":"158","endLine":113,"endColumn":15},{"ruleId":"165","severity":1,"message":"166","line":124,"column":24,"nodeType":"167","messageId":"168","endLine":124,"endColumn":26},{"ruleId":"155","severity":1,"message":"189","line":129,"column":13,"nodeType":"157","messageId":"158","endLine":129,"endColumn":15},{"ruleId":"165","severity":1,"message":"166","line":140,"column":24,"nodeType":"167","messageId":"168","endLine":140,"endColumn":26},{"ruleId":"155","severity":1,"message":"189","line":145,"column":13,"nodeType":"157","messageId":"158","endLine":145,"endColumn":15},{"ruleId":"165","severity":1,"message":"166","line":156,"column":24,"nodeType":"167","messageId":"168","endLine":156,"endColumn":26},{"ruleId":"155","severity":1,"message":"189","line":161,"column":13,"nodeType":"157","messageId":"158","endLine":161,"endColumn":15},{"ruleId":"165","severity":1,"message":"166","line":172,"column":24,"nodeType":"167","messageId":"168","endLine":172,"endColumn":26},{"ruleId":"155","severity":1,"message":"189","line":185,"column":13,"nodeType":"157","messageId":"158","endLine":185,"endColumn":15},{"ruleId":"165","severity":1,"message":"166","line":211,"column":24,"nodeType":"167","messageId":"168","endLine":211,"endColumn":26},{"ruleId":"190","severity":1,"message":"191","line":225,"column":5,"nodeType":"192","messageId":"193","endLine":225,"endColumn":17},{"ruleId":"165","severity":1,"message":"166","line":231,"column":24,"nodeType":"167","messageId":"168","endLine":231,"endColumn":26},{"ruleId":"155","severity":1,"message":"189","line":236,"column":13,"nodeType":"157","messageId":"158","endLine":236,"endColumn":15},{"ruleId":"165","severity":1,"message":"166","line":247,"column":24,"nodeType":"167","messageId":"168","endLine":247,"endColumn":26},{"ruleId":"190","severity":1,"message":"191","line":259,"column":5,"nodeType":"192","messageId":"193","endLine":259,"endColumn":15},{"ruleId":"155","severity":1,"message":"163","line":15,"column":21,"nodeType":"157","messageId":"158","endLine":15,"endColumn":33},{"ruleId":"155","severity":1,"message":"162","line":22,"column":23,"nodeType":"157","messageId":"158","endLine":22,"endColumn":37},{"ruleId":"155","severity":1,"message":"173","line":76,"column":10,"nodeType":"157","messageId":"158","endLine":76,"endColumn":18},{"ruleId":"155","severity":1,"message":"194","line":76,"column":20,"nodeType":"157","messageId":"158","endLine":76,"endColumn":31},{"ruleId":"155","severity":1,"message":"195","line":77,"column":21,"nodeType":"157","messageId":"158","endLine":77,"endColumn":33},{"ruleId":"155","severity":1,"message":"196","line":79,"column":10,"nodeType":"157","messageId":"158","endLine":79,"endColumn":14},{"ruleId":"155","severity":1,"message":"197","line":79,"column":16,"nodeType":"157","messageId":"158","endLine":79,"endColumn":23},{"ruleId":"155","severity":1,"message":"174","line":80,"column":16,"nodeType":"157","messageId":"158","endLine":80,"endColumn":23},{"ruleId":"155","severity":1,"message":"175","line":86,"column":10,"nodeType":"157","messageId":"158","endLine":86,"endColumn":16},{"ruleId":"155","severity":1,"message":"176","line":86,"column":18,"nodeType":"157","messageId":"158","endLine":86,"endColumn":27},{"ruleId":"155","severity":1,"message":"198","line":93,"column":25,"nodeType":"157","messageId":"158","endLine":93,"endColumn":41},{"ruleId":"178","severity":1,"message":"179","line":98,"column":6,"nodeType":"180","endLine":98,"endColumn":8,"suggestions":"199"},{"ruleId":"165","severity":1,"message":"166","line":175,"column":51,"nodeType":"167","messageId":"168","endLine":175,"endColumn":53},{"ruleId":"165","severity":1,"message":"166","line":180,"column":62,"nodeType":"167","messageId":"168","endLine":180,"endColumn":64},{"ruleId":"182","severity":1,"message":"183","line":251,"column":13,"nodeType":"184","endLine":251,"endColumn":35},{"ruleId":"165","severity":1,"message":"166","line":261,"column":45,"nodeType":"167","messageId":"168","endLine":261,"endColumn":47},{"ruleId":"165","severity":1,"message":"166","line":263,"column":42,"nodeType":"167","messageId":"168","endLine":263,"endColumn":44},{"ruleId":"155","severity":1,"message":"200","line":1,"column":18,"nodeType":"157","messageId":"158","endLine":1,"endColumn":27},{"ruleId":"155","severity":1,"message":"201","line":2,"column":17,"nodeType":"157","messageId":"158","endLine":2,"endColumn":26},{"ruleId":"155","severity":1,"message":"202","line":3,"column":8,"nodeType":"157","messageId":"158","endLine":3,"endColumn":16},{"ruleId":"155","severity":1,"message":"203","line":8,"column":7,"nodeType":"157","messageId":"158","endLine":8,"endColumn":19},{"ruleId":"155","severity":1,"message":"198","line":30,"column":25,"nodeType":"157","messageId":"158","endLine":30,"endColumn":41},"no-native-reassign",["204"],"no-negated-in-lhs",["205"],"no-unused-vars","'getCurrentWallet' is defined but never used.","Identifier","unusedVar","'tokenId' is assigned a value but never used.","'setTokenId' is assigned a value but never used.","'setIpfs' is assigned a value but never used.","'setTraitsArray' is assigned a value but never used.","'setTypeArray' is assigned a value but never used.","'mintNFT' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Card1' is defined but never used.","'Card2' is defined but never used.","'sampleNFTTokenID' is assigned a value but never used.","'setSampleNFTTokenID' is assigned a value but never used.","'tokenIds' is assigned a value but never used.","'setSize' is assigned a value but never used.","'traits' is assigned a value but never used.","'setTraits' is assigned a value but never used.","'updateTokenIds' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadNfts'. Either include it or remove the dependency array.","ArrayExpression",["206"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","Expected '!==' and instead saw '!='.","'NFTimg' is defined but never used.","'ghosp_contract' is assigned a value but never used.","'busd_contract' is assigned a value but never used.","'tx' is assigned a value but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'setTokenIds' is assigned a value but never used.","'setSaleItems' is assigned a value but never used.","'page' is assigned a value but never used.","'setPage' is assigned a value but never used.","'setWalletAddress' is assigned a value but never used.",["207"],"'urlSource' is defined but never used.","'Component' is defined but never used.","'ReactDOM' is defined but never used.","'customStyles' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"208","fix":"209"},{"desc":"210","fix":"211"},"Update the dependencies array to be: [loadNfts, page]",{"range":"212","text":"213"},"Update the dependencies array to be: [loadNfts]",{"range":"214","text":"215"},[4848,4854],"[loadNfts, page]",[2977,2979],"[loadNfts]"]
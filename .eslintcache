[{"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\index.js":"1","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\App.js":"2","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\reportWebVitals.js":"3","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\Mint.js":"4","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Contact\\Contact.js":"5","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\ConnectWallet\\ConnectWallet.js":"6","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Home\\Home.js":"7","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\NFTDetail\\NFTdetail.js":"8","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\Header.js":"9","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\MultiRangeInput.js":"10","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\core\\web3.js":"11","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\utils\\Utils.js":"12","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\loader\\Loader.js":"13","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\Profile.js":"14","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\IPFSUtils.js":"15","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\updateModal\\UpdateModal.js":"16","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\accordian\\Accordian.js":"17","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\accordian\\AccordianData.js":"18","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\addPropertyModal.js\\AddPropertyModal.js":"19","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\LoaderModal.js":"20"},{"size":603,"mtime":1648115103756,"results":"21","hashOfConfig":"22"},{"size":1938,"mtime":1648643972145,"results":"23","hashOfConfig":"22"},{"size":375,"mtime":1648115103768,"results":"24","hashOfConfig":"22"},{"size":11459,"mtime":1648645440756,"results":"25","hashOfConfig":"22"},{"size":1378,"mtime":1648115103760,"results":"26","hashOfConfig":"22"},{"size":2200,"mtime":1648115103758,"results":"27","hashOfConfig":"22"},{"size":16249,"mtime":1648643728097,"results":"28","hashOfConfig":"22"},{"size":7292,"mtime":1648646170628,"results":"29","hashOfConfig":"22"},{"size":2470,"mtime":1648579874510,"results":"30","hashOfConfig":"22"},{"size":2907,"mtime":1648643671764,"results":"31","hashOfConfig":"22"},{"size":7436,"mtime":1648579874526,"results":"32","hashOfConfig":"22"},{"size":341,"mtime":1648645894598,"results":"33","hashOfConfig":"22"},{"size":238,"mtime":1648133365107,"results":"34","hashOfConfig":"22"},{"size":12284,"mtime":1648579874615,"results":"35","hashOfConfig":"22"},{"size":2034,"mtime":1648210876491,"results":"36","hashOfConfig":"22"},{"size":3636,"mtime":1648579874542,"results":"37","hashOfConfig":"22"},{"size":3536,"mtime":1648638606906,"results":"38","hashOfConfig":"22"},{"size":2113,"mtime":1648453158027,"results":"39","hashOfConfig":"22"},{"size":3047,"mtime":1648579874540,"results":"40","hashOfConfig":"22"},{"size":540,"mtime":1648645430858,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"17edddb",{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\index.js",[],["87","88"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\App.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\reportWebVitals.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\Mint.js",["89","90","91","92","93","94","95","96","97"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Contact\\Contact.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\ConnectWallet\\ConnectWallet.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\Home\\Home.js",["98","99","100","101","102","103","104","105","106","107"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\NFTDetail\\NFTdetail.js",["108","109","110","111"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\Header.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\MultiRangeInput.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\core\\web3.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\utils\\Utils.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\loader\\Loader.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\Profile.js",["112","113","114","115","116","117","118","119","120","121","122","123","124"],"import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport MultiRangeInput from \"../../components/MultiRangeInput\";\r\nimport { BASEURL } from \"../../utils/Utils\";\r\nimport LeftIcon from \"../../assets/img/lefticon.png\";\r\nimport RightIcon from \"../../assets/img/righticon.png\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./profile.css\";\r\nimport ProfileImg from \"../../assets/img/card1.png\";\r\nimport UpdateModal from \"./updateModal/UpdateModal\";\r\nimport Loader from \"../../components/loader/Loader\";\r\nfunction Profile() {\r\n  const navigate = useNavigate();\r\n\r\n  const [typeArray, setTypeArray] = useState([\r\n    \"common\",\r\n    \"rare\",\r\n    \"epic\",\r\n    \"legendary\",\r\n  ]);\r\n\r\n  const [traitsArray, setTraitsArray] = useState([\r\n    \"tank\",\r\n    \"marksman\",\r\n    \"assassin\",\r\n  ]);\r\n\r\n  const loadNfts = async (e) => {\r\n    setIsLoading(true);\r\n\r\n    axios\r\n      .post(BASEURL + \"/nft/all/\", {\r\n        min,\r\n        max,\r\n        walletAddress,\r\n        currency,\r\n        minlevel,\r\n        maxlevel,\r\n        type: selectedType,\r\n        traits:\r\n          selectedTraits && selectedTraits.length > 0 ? selectedTraits : null,\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setTotalRecords(response.data.data[1].totalRecords);\r\n        setNftsArray(response.data.data[0]);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  const [sidebar, setSidebar] = useState(false);\r\n  const openSidebar = (e) => {\r\n    console.log(\"sidebar\");\r\n    e.preventDefault();\r\n    setSidebar((prev) => !prev);\r\n  };\r\n  const onClickItem = async (tokenID) => {\r\n    setSampleNFTTokenID(tokenID);\r\n  };\r\n\r\n  const clearAll = (e) => {\r\n    e.preventDefault();\r\n    setSelectedTraits([]);\r\n    setSelectedType(null);\r\n    setMinlevel(0);\r\n    setMax(null);\r\n    setMin(null);\r\n    setMaxlevel(100);\r\n  };\r\n\r\n  const [sampleNFTTokenID, setSampleNFTTokenID] = useState(null);\r\n  const [tokenIds, setTokenIds] = useState([1, 2, 3, 5]);\r\n  const [saleItems, setSaleItems] = useState([]);\r\n  const [nftsArray, setNftsArray] = useState(null);\r\n  const [page, setPage] = useState(1);\r\n  const [size, setSize] = useState(6);\r\n  const [totalRecords, setTotalRecords] = useState(null);\r\n  //   filters\r\n  const [min, setMin] = useState(null);\r\n  const [minlevel, setMinlevel] = useState(0);\r\n  const [maxlevel, setMaxlevel] = useState(100);\r\n  const [traits, setTraits] = useState(null);\r\n  const [currency, setCurrency] = useState(null);\r\n\r\n  const [selectedType, setSelectedType] = useState(null);\r\n  const [selectedTraits, setSelectedTraits] = useState([]);\r\n  const [max, setMax] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [walletAddress, setWalletAddress] = useState(\"xyz\");\r\n  const [showModal, setShowModal] = useState(false);\r\n  useEffect(() => {\r\n    loadNfts();\r\n    // updateTokenIds();\r\n  }, []);\r\n\r\n  const sellNft = async (e, nftId) => {\r\n    e.stopPropagation();\r\n    axios\r\n      .put(`${BASEURL}/nft/sell/${nftId}`, {\r\n        walletAddress,\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n\r\n  return (\r\n    <div className=\"profile-content\">\r\n      <div className=\"profile-back-filter\">\r\n        <button\r\n          className=\"custom-btn back-btn\"\r\n          onClick={() => {\r\n            navigate(\"/\");\r\n          }}\r\n        >\r\n          Back to home\r\n        </button>\r\n        <div className=\"fitermob profile-filters\">\r\n          <a href=\"/\" className=\"filter-btn\" onClick={openSidebar}>\r\n            Filters\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <div className=\"profile-flex\">\r\n        <div className=\"profile-div\">\r\n          <div className=\"red-div\">\r\n            <img src={ProfileImg} alt=\"\" />\r\n          </div>\r\n          <button className=\"custom-btn\" onClick={() => setShowModal(true)}>\r\n            Edit Profile\r\n          </button>\r\n          <h2>Johny</h2>\r\n          <p>Loremipsumdolor</p>{\" \"}\r\n          <div className=\"profile-about\">\r\n            <p>About me</p>\r\n            <p>\r\n              Lorem ipsum dolor, sit amet consectetur adipisicing elit. Vero\r\n              quaerat id eos doloribus incidunt nemo similique, obcaecati\r\n              repellat nisi rerum maiores culpa quasi. Explicabo, facilis.\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className=\"profile-nft-div\"\r\n          style={{ marginLeft: \"60px\", width: \"100%\" }}\r\n        >\r\n          <div className=\"nft-collections\">\r\n            {isLoading ? (\r\n              <Loader />\r\n            ) : (\r\n              nftsArray &&\r\n              nftsArray.map((elem, i) => {\r\n                return (\r\n                  <div\r\n                    className=\"card\"\r\n                    key={i}\r\n                    onClick={() => {\r\n                      onClickItem(i);\r\n                      navigate(`/trending/${elem._id}`);\r\n                    }}\r\n                  >\r\n                    <div className=\"card-img\">\r\n                      <img\r\n                        src={`${BASEURL}/uploads/${elem.imageUrl}`}\r\n                        alt=\"Card1\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"card-title\">\r\n                      <h4>\r\n                        {elem.title}\r\n                        {Number(sampleNFTTokenID)===Number(i) ? (\r\n                          <span>&#10003;</span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}{\" \"}\r\n                        {saleItems[i] && saleItems[i].onSale===true\r\n                          ? \"OnSale\"\r\n                          : \"\"}\r\n                      </h4>\r\n                      {/* <span>{elem.description}</span> */}\r\n                      <button\r\n                        className=\"custom-btn\"\r\n                        onClick={(e) => sellNft(e, elem._id)}\r\n                      >\r\n                        SELL\r\n                      </button>\r\n                    </div>\r\n                    <div className=\"card-price\">\r\n                      {/* <div>\r\n                          <span>gTHC</span>\r\n                          <p>21/219</p>\r\n                        </div> */}\r\n                      <div>\r\n                        <span>Price</span>\r\n                        <p>900 {elem.currency?.toUpperCase()}</p>\r\n                        <small>${elem.price} USD</small>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })\r\n            )}\r\n\r\n            {nftsArray && nftsArray.length > 0 && !isLoading ? (\r\n              <div className=\"pagination-wrap\">\r\n                <div className=\"pagination\">\r\n                  <div className=\"icon\">\r\n                    <a href=\"/\">\r\n                      <img src={LeftIcon} alt=\"\" />\r\n                    </a>\r\n                  </div>\r\n                  <div className=\"number\">\r\n                    <span>{size > totalRecords ? totalRecords : size}</span>\r\n                    of {totalRecords && totalRecords}\r\n                  </div>\r\n                  <div className=\"icon\">\r\n                    <a href=\"/\">\r\n                      <img src={RightIcon} alt=\"\" />\r\n                    </a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div\r\n                style={{\r\n                  width: \"100%\",\r\n                  marginTop: \"20px\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"center\",\r\n                }}\r\n              >\r\n                <h2>No Data Found!</h2>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className={sidebar ? \"sidebar sidebar-active\" : \"sidebar\"}>\r\n          <div className=\"filter\">\r\n            <h4>FILTERS</h4>\r\n            <a href=\"/\" onClick={clearAll}>\r\n              CLEAR ALL\r\n            </a>\r\n          </div>\r\n          <div className=\"hero\">\r\n            <h4>GHOSPHERS</h4>\r\n            <p>No Ghosper selected</p>\r\n            <a onClick={loadNfts}>Choose Ghospers</a>\r\n          </div>\r\n          <div className=\"hero\">\r\n            <h4>GHOSPHERS</h4>\r\n            <div className=\"checkbox\">\r\n              {typeArray.map((t) => {\r\n                return (\r\n                  <label key={t} className=\"checkbox-wrap\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={selectedType===t}\r\n                      onChange={() => {\r\n                        if (selectedType===t) {\r\n                          setSelectedType(null);\r\n                        } else setSelectedType(t);\r\n                      }}\r\n                    />\r\n                    <span className=\"checkmark\"></span>\r\n                    {t}\r\n                  </label>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n          <div className=\"hero\">\r\n            <h4>PRICE</h4>\r\n            <div className=\"price\">\r\n              <div className=\"price-inpt\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Min\"\r\n                  onChange={(e) => setMin(e.target.value)}\r\n                />\r\n              </div>\r\n              <span></span>\r\n              <div className=\"price-inpt\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Max\"\r\n                  onChange={(e) => setMax(e.target.value)}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"hero\">\r\n            <h4>Currency</h4>\r\n            <div className=\"levels\">\r\n              <select\r\n                onChange={(e) => setCurrency(e.target.value)}\r\n                value={currency}\r\n              >\r\n                <option selected value=\"ghsp\">\r\n                  GHSP\r\n                </option>\r\n                <option value=\"bnb\">BNB</option>\r\n                <option value=\"busd\">BUSD</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div className=\"hero\">\r\n            <h4>LEVEL</h4>\r\n            <div className=\"levels\">\r\n              <MultiRangeInput\r\n                min={0}\r\n                max={100}\r\n                onChange={({ min, max }) => {\r\n                  setMinlevel(min);\r\n                  setMaxlevel(max);\r\n                  console.log(`min = ${min}, max = ${max}`);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"hero\">\r\n            <h4>TRAITS</h4>\r\n            <div className=\"checkbox\">\r\n              {traitsArray &&\r\n                traitsArray.map((trait, index) => {\r\n                  return (\r\n                    <label className=\"checkbox-wrap\" key={index}>\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={\r\n                          selectedTraits && selectedTraits.includes(trait)\r\n                        }\r\n                        onChange={() => {\r\n                          if (\r\n                            selectedTraits &&\r\n                            selectedTraits.includes(trait)\r\n                          ) {\r\n                            var remaningTraits =\r\n                              selectedTraits &&\r\n                              selectedTraits.filter((t) => t !== trait);\r\n                            setSelectedTraits(remaningTraits);\r\n                          } else {\r\n                            setSelectedTraits((prev) => [...prev, trait]);\r\n                          }\r\n                        }}\r\n                      />\r\n                      <span className=\"checkmark\"></span>\r\n                      {trait}\r\n                    </label>\r\n                  );\r\n                })}\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"hero skin\">\r\n\t\t\t\t\t\t\t<h4>SKINS</h4>\r\n\t\t\t\t\t\t\t<p>No skin selected</p>\r\n\t\t\t\t\t\t\t<a href=\"/\">Choose Skin</a>\r\n\t\t\t\t\t\t</div> */}\r\n        </div>\r\n      </div>\r\n      <UpdateModal showModal={showModal} setShowModal={setShowModal} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\IPFSUtils.js",["125"],"import { create, urlSource } from 'ipfs-http-client'\r\nimport axios from 'axios';\r\n//import IPFS from 'nano-ipfs-store'\r\nlet all = require('it-all')\r\n\r\nlet client = create('https://ipfs.infura.io:5001/api/v0');\r\n\r\nconst uploadFileToIPFS = async (files) => {\r\n    console.log(\"enter uploadFileToIPFS\", files);\r\n    let lists = [];\r\n    try {\r\n        for (let i = 0; i < files.length; i++) {\r\n            const added = await client.add(files[i])\r\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n            console.log(\"[GD], FileName = \", files[i].name, \", Hash: \", added.path)\r\n            lists.push(url)\r\n        }\r\n        return lists\r\n    } catch (err) {\r\n        console.log(\"Error uploading file: \", err)\r\n        return []\r\n    }\r\n}\r\n\r\nconst uploadFolderToIPFS = async (files) => {\r\n    try {\r\n        /*let fileObjectsArray = Array.from(files).map((file) => {\r\n            return {\r\n                path: file.name,\r\n                content: file\r\n            }\r\n        })*/\r\n        const results = await all(\r\n            client.addAll(files, { wrapWithDirectory: true })\r\n        )\r\n        const length = results.length\r\n        const filesHash = results[length - 1].cid._baseCache.get('z')\r\n        const filesUrl = 'https://ipfs.infura.io/ipfs/' + filesHash\r\n        return filesUrl\r\n    } catch (err) {\r\n        console.log(\"[GD], Error uploading file: \", err)\r\n        return \"\"\r\n    }\r\n}\r\n\r\nconst uploadTextToIPFS = async (data) => {\r\n    try {\r\n        let doc = JSON.stringify(data)\r\n        const added = await client.add(doc)\r\n        const filesUrl = 'https://ipfs.infura.io/ipfs/' + added.path;\r\n        return filesUrl\r\n    } catch (err) {\r\n        //console.log(\"Error: \", err)\r\n        return null\r\n    }\r\n}\r\n\r\nconst loadFromIPFS = async (url) => {\r\n    let res = await axios.get(`https://ipfs.infura.io/ipfs/${url}`)\r\n    return res;\r\n}\r\n\r\n\r\nconst IPFSUtils = {\r\n    uploadFileToIPFS,\r\n    uploadFolderToIPFS,\r\n    uploadTextToIPFS,\r\n    loadFromIPFS\r\n}\r\n\r\n\r\nexport default IPFSUtils;","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\profile\\updateModal\\UpdateModal.js",[],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\accordian\\Accordian.js",["126"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\components\\accordian\\AccordianData.js",[],["127","128"],"E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\addPropertyModal.js\\AddPropertyModal.js",["129","130"],"import React, { Component, useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport { BASEURL } from \"../../../utils/Utils\";\r\nimport \"./addPropertyModal.css\";\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction AddPropertyModal({ setShowModal, showModal, setProperties }) {\r\n  console.log(showModal);\r\n  function closeModal() {\r\n    setShowModal(false);\r\n  }\r\n\r\n  const [rows, setRows] = useState([\r\n    {\r\n      type: \"\",\r\n      value: \"\",\r\n    },\r\n  ]);\r\n\r\n  const onChange = (e, index) => {\r\n    setRows((prev) =>\r\n      Object.values({\r\n        ...prev,\r\n        [index]: { ...prev[index], [e.target.name]: e.target.value },\r\n      })\r\n    );\r\n  };\r\n\r\n  const removeRow = (index) => {\r\n    if (rows.length !== 1) {\r\n      var rowsTemp = [...rows];\r\n      rowsTemp.splice(index, 1);\r\n      setRows(rowsTemp);\r\n    }\r\n  };\r\n\r\n  const AddRows = () => {\r\n    setProperties(rows);\r\n    setShowModal(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"scrollable-modal\">\r\n      <Modal\r\n        isOpen={showModal}\r\n        // onAfterOpen={afterOpenModal}\r\n        onRequestClose={closeModal}\r\n        // style={customStyles}\r\n        // className=\"scrollable-modal\"\r\n        contentLabel=\"Example Modal\"\r\n      >\r\n        <div className=\"properties-modal-content\">\r\n          <h2>Add Properties </h2>\r\n          <div className=\"property-rows\">\r\n            {rows &&\r\n              rows.map((row, index) => {\r\n                return (\r\n                  <div key={index} className=\"inputs-div\">\r\n                    <div>\r\n                      <label htmlFor=\"\">Type</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"type\"\r\n                        onChange={(e) => onChange(e, index)}\r\n                        className=\"mint-input\"\r\n                        placeholder=\"Hair\"\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <label htmlFor=\"\">Value</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"value\"\r\n                        onChange={(e) => onChange(e, index)}\r\n                        className=\"mint-input\"\r\n                        placeholder=\"Blonde\"\r\n                      />\r\n                    </div>\r\n                    <button\r\n                      onClick={() => removeRow(index)}\r\n                      className=\"remove-btn\"\r\n                    >\r\n                      Remove\r\n                    </button>\r\n                  </div>\r\n                );\r\n              })}\r\n          </div>\r\n          <button\r\n            className=\"add-btn\"\r\n            onClick={() => {\r\n              setRows((prev) => [\r\n                ...prev,\r\n                {\r\n                  type: \"\",\r\n                  value: \"\",\r\n                },\r\n              ]);\r\n            }}\r\n          >\r\n            Add\r\n          </button>\r\n\r\n          <button onClick={AddRows}>Save</button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddPropertyModal;\r\n","E:\\Prince\\freelancing\\yogesh\\react\\ghospers\\ghospers_marketplace\\src\\pages\\mint\\LoaderModal.js",["131","132"],{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","severity":1,"message":"138","line":4,"column":8,"nodeType":"139","messageId":"140","endLine":4,"endColumn":17},{"ruleId":"137","severity":1,"message":"141","line":11,"column":3,"nodeType":"139","messageId":"140","endLine":11,"endColumn":12},{"ruleId":"137","severity":1,"message":"142","line":12,"column":3,"nodeType":"139","messageId":"140","endLine":12,"endColumn":19},{"ruleId":"137","severity":1,"message":"143","line":27,"column":10,"nodeType":"139","messageId":"140","endLine":27,"endColumn":17},{"ruleId":"137","severity":1,"message":"144","line":27,"column":19,"nodeType":"139","messageId":"140","endLine":27,"endColumn":29},{"ruleId":"137","severity":1,"message":"145","line":30,"column":16,"nodeType":"139","messageId":"140","endLine":30,"endColumn":23},{"ruleId":"137","severity":1,"message":"146","line":38,"column":23,"nodeType":"139","messageId":"140","endLine":38,"endColumn":37},{"ruleId":"137","severity":1,"message":"147","line":44,"column":21,"nodeType":"139","messageId":"140","endLine":44,"endColumn":33},{"ruleId":"137","severity":1,"message":"148","line":179,"column":9,"nodeType":"139","messageId":"140","endLine":179,"endColumn":16},{"ruleId":"137","severity":1,"message":"149","line":85,"column":16,"nodeType":"139","messageId":"140","endLine":85,"endColumn":23},{"ruleId":"150","severity":1,"message":"151","line":127,"column":6,"nodeType":"152","endLine":127,"endColumn":30,"suggestions":"153"},{"ruleId":"137","severity":1,"message":"154","line":129,"column":9,"nodeType":"139","messageId":"140","endLine":129,"endColumn":23},{"ruleId":"137","severity":1,"message":"148","line":161,"column":9,"nodeType":"139","messageId":"140","endLine":161,"endColumn":16},{"ruleId":"150","severity":1,"message":"155","line":168,"column":6,"nodeType":"152","endLine":180,"endColumn":4,"suggestions":"156"},{"ruleId":"157","severity":1,"message":"158","line":213,"column":15,"nodeType":"159","endLine":213,"endColumn":37},{"ruleId":"160","severity":1,"message":"161","line":386,"column":68,"nodeType":"162","messageId":"163","endLine":386,"endColumn":70},{"ruleId":"160","severity":1,"message":"164","line":439,"column":38,"nodeType":"162","messageId":"163","endLine":439,"endColumn":40},{"ruleId":"157","severity":1,"message":"158","line":444,"column":27,"nodeType":"159","endLine":444,"endColumn":30},{"ruleId":"157","severity":1,"message":"158","line":465,"column":27,"nodeType":"159","endLine":465,"endColumn":30},{"ruleId":"137","severity":1,"message":"165","line":4,"column":8,"nodeType":"139","messageId":"140","endLine":4,"endColumn":14},{"ruleId":"137","severity":1,"message":"166","line":5,"column":8,"nodeType":"139","messageId":"140","endLine":5,"endColumn":16},{"ruleId":"137","severity":1,"message":"167","line":6,"column":8,"nodeType":"139","messageId":"140","endLine":6,"endColumn":12},{"ruleId":"137","severity":1,"message":"168","line":7,"column":8,"nodeType":"139","messageId":"140","endLine":7,"endColumn":17},{"ruleId":"137","severity":1,"message":"147","line":15,"column":21,"nodeType":"139","messageId":"140","endLine":15,"endColumn":33},{"ruleId":"137","severity":1,"message":"146","line":22,"column":23,"nodeType":"139","messageId":"140","endLine":22,"endColumn":37},{"ruleId":"137","severity":1,"message":"169","line":76,"column":10,"nodeType":"139","messageId":"140","endLine":76,"endColumn":18},{"ruleId":"137","severity":1,"message":"170","line":76,"column":20,"nodeType":"139","messageId":"140","endLine":76,"endColumn":31},{"ruleId":"137","severity":1,"message":"171","line":77,"column":21,"nodeType":"139","messageId":"140","endLine":77,"endColumn":33},{"ruleId":"137","severity":1,"message":"172","line":79,"column":10,"nodeType":"139","messageId":"140","endLine":79,"endColumn":14},{"ruleId":"137","severity":1,"message":"173","line":79,"column":16,"nodeType":"139","messageId":"140","endLine":79,"endColumn":23},{"ruleId":"137","severity":1,"message":"149","line":80,"column":16,"nodeType":"139","messageId":"140","endLine":80,"endColumn":23},{"ruleId":"137","severity":1,"message":"174","line":86,"column":10,"nodeType":"139","messageId":"140","endLine":86,"endColumn":16},{"ruleId":"137","severity":1,"message":"175","line":86,"column":18,"nodeType":"139","messageId":"140","endLine":86,"endColumn":27},{"ruleId":"137","severity":1,"message":"176","line":93,"column":25,"nodeType":"139","messageId":"140","endLine":93,"endColumn":41},{"ruleId":"150","severity":1,"message":"155","line":98,"column":6,"nodeType":"152","endLine":98,"endColumn":8,"suggestions":"177"},{"ruleId":"157","severity":1,"message":"158","line":254,"column":13,"nodeType":"159","endLine":254,"endColumn":35},{"ruleId":"137","severity":1,"message":"178","line":1,"column":18,"nodeType":"139","messageId":"140","endLine":1,"endColumn":27},{"ruleId":"150","severity":1,"message":"179","line":32,"column":6,"nodeType":"152","endLine":32,"endColumn":26,"suggestions":"180"},{"ruleId":"133","replacedBy":"181"},{"ruleId":"135","replacedBy":"182"},{"ruleId":"137","severity":1,"message":"183","line":1,"column":17,"nodeType":"139","messageId":"140","endLine":1,"endColumn":26},{"ruleId":"137","severity":1,"message":"184","line":3,"column":10,"nodeType":"139","messageId":"140","endLine":3,"endColumn":17},{"ruleId":"137","severity":1,"message":"183","line":1,"column":17,"nodeType":"139","messageId":"140","endLine":1,"endColumn":26},{"ruleId":"137","severity":1,"message":"185","line":1,"column":28,"nodeType":"139","messageId":"140","endLine":1,"endColumn":36},"no-native-reassign",["186"],"no-negated-in-lhs",["187"],"no-unused-vars","'IPFSUtils' is defined but never used.","Identifier","unusedVar","'createNFT' is defined but never used.","'getCurrentWallet' is defined but never used.","'tokenId' is assigned a value but never used.","'setTokenId' is assigned a value but never used.","'setIpfs' is assigned a value but never used.","'setTraitsArray' is assigned a value but never used.","'setTypeArray' is assigned a value but never used.","'mintNFT' is assigned a value but never used.","'setSize' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selectedProperties'. Either include it or remove the dependency array.","ArrayExpression",["188"],"'updateTokenIds' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadNfts'. Either include it or remove the dependency array.",["189"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'NFTimg' is defined but never used.","'coinIcon' is defined but never used.","'Icon' is defined but never used.","'SwordIcon' is defined but never used.","'tokenIds' is assigned a value but never used.","'setTokenIds' is assigned a value but never used.","'setSaleItems' is assigned a value but never used.","'page' is assigned a value but never used.","'setPage' is assigned a value but never used.","'traits' is assigned a value but never used.","'setTraits' is assigned a value but never used.","'setWalletAddress' is assigned a value but never used.",["190"],"'urlSource' is defined but never used.","React Hook useEffect has a missing dependency: 'setSingleSelectedProperty'. Either include it or remove the dependency array. If 'setSingleSelectedProperty' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["191"],["186"],["187"],"'Component' is defined but never used.","'BASEURL' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},"Update the dependencies array to be: [selectedProperties, singleSelectedProperty]",{"range":"200","text":"201"},"Update the dependencies array to be: [min, max, page, size, minlevel, selectedProperties, currency, selectedType, maxlevel, selectedTraits, loadNfts]",{"range":"202","text":"203"},"Update the dependencies array to be: [loadNfts]",{"range":"204","text":"205"},"Update the dependencies array to be: [selectedProperties, setSingleSelectedProperty]",{"range":"206","text":"207"},[4056,4080],"[selectedProperties, singleSelectedProperty]",[4960,5143],"[min, max, page, size, minlevel, selectedProperties, currency, selectedType, maxlevel, selectedTraits, loadNfts]",[2977,2979],"[loadNfts]",[1038,1058],"[selectedProperties, setSingleSelectedProperty]"]